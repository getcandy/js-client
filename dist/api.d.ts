/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AccountPasswordResetBody
 */
export interface AccountPasswordResetBody {
    /**
     *
     * @type {string}
     * @memberof AccountPasswordResetBody
     */
    password_confirmation: string;
    /**
     *
     * @type {string}
     * @memberof AccountPasswordResetBody
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof AccountPasswordResetBody
     */
    current_password: string;
}
/**
 *
 * @export
 * @interface ActivityLog
 */
export interface ActivityLog {
    /**
     *
     * @type {string}
     * @memberof ActivityLog
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ActivityLog
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ActivityLog
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ActivityLog
     */
    properties?: string;
    /**
     *
     * @type {string}
     * @memberof ActivityLog
     */
    created_at?: string;
    /**
     *
     * @type {UserResponse}
     * @memberof ActivityLog
     */
    user?: UserResponse;
}
/**
 *
 * @export
 * @interface ActivityLogCollection
 */
export interface ActivityLogCollection {
    /**
     *
     * @type {Array<ActivityLog>}
     * @memberof ActivityLogCollection
     */
    data?: Array<ActivityLog>;
}
/**
 *
 * @export
 * @interface ActivityLogResponse
 */
export interface ActivityLogResponse {
    /**
     *
     * @type {ActivityLog}
     * @memberof ActivityLogResponse
     */
    data?: ActivityLog;
}
/**
 *
 * @export
 * @interface AddBasketMetaBody
 */
export interface AddBasketMetaBody {
    /**
     *
     * @type {string}
     * @memberof AddBasketMetaBody
     */
    value: string;
    /**
     *
     * @type {string}
     * @memberof AddBasketMetaBody
     */
    key: string;
}
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     *
     * @type {string}
     * @memberof Address
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    firstname?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    lastname?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    address_two?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    address_three?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    county?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof Address
     */
    zip?: string;
}
/**
 *
 * @export
 * @interface AddressCollection
 */
export interface AddressCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Address>}
     * @memberof AddressCollection
     */
    data?: Array<Address>;
}
/**
 *
 * @export
 * @interface AddressCollectionAllOf
 */
export interface AddressCollectionAllOf {
    /**
     *
     * @type {Array<Address>}
     * @memberof AddressCollectionAllOf
     */
    data?: Array<Address>;
}
/**
 *
 * @export
 * @interface AddressResponse
 */
export interface AddressResponse {
    /**
     *
     * @type {Address}
     * @memberof AddressResponse
     */
    data?: Address;
}
/**
 *
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    caption?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    kind?: string;
    /**
     *
     * @type {boolean}
     * @memberof Asset
     */
    external?: boolean;
    /**
     *
     * @type {number}
     * @memberof Asset
     */
    position?: number;
    /**
     *
     * @type {boolean}
     * @memberof Asset
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    sub_kind?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    extension?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    original_filename?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    size?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    width?: string;
    /**
     *
     * @type {string}
     * @memberof Asset
     */
    height?: string;
    /**
     *
     * @type {AssetTransformCollection}
     * @memberof Asset
     */
    transforms?: AssetTransformCollection;
    /**
     *
     * @type {TagCollection}
     * @memberof Asset
     */
    tags?: TagCollection;
}
/**
 *
 * @export
 * @interface AssetCollection
 */
export interface AssetCollection {
    /**
     *
     * @type {Array<Asset>}
     * @memberof AssetCollection
     */
    data?: Array<Asset>;
}
/**
 *
 * @export
 * @interface AssetDetachBody
 */
export interface AssetDetachBody {
    /**
     * attributeId => position
     * @type {Array<object>}
     * @memberof AssetDetachBody
     */
    attributes?: Array<object>;
}
/**
 *
 * @export
 * @interface AssetResponse
 */
export interface AssetResponse {
    /**
     *
     * @type {Asset}
     * @memberof AssetResponse
     */
    data?: Asset;
}
/**
 *
 * @export
 * @interface AssetSimple
 */
export interface AssetSimple {
    /**
     *
     * @type {string}
     * @memberof AssetSimple
     */
    thumbnail_url?: string;
    /**
     *
     * @type {string}
     * @memberof AssetSimple
     */
    thumbnail?: string;
    /**
     *
     * @type {string}
     * @memberof AssetSimple
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof AssetSimple
     */
    filename?: string;
    /**
     *
     * @type {string}
     * @memberof AssetSimple
     */
    path?: string;
}
/**
 *
 * @export
 * @interface AssetSimpleUploadBody
 */
export interface AssetSimpleUploadBody {
    /**
     *
     * @type {object}
     * @memberof AssetSimpleUploadBody
     */
    file: object;
}
/**
 *
 * @export
 * @interface AssetTransform
 */
export interface AssetTransform {
    /**
     *
     * @type {string}
     * @memberof AssetTransform
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AssetTransform
     */
    handle?: string;
    /**
     *
     * @type {string}
     * @memberof AssetTransform
     */
    url?: string;
}
/**
 *
 * @export
 * @interface AssetTransformCollection
 */
export interface AssetTransformCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<AssetTransform>}
     * @memberof AssetTransformCollection
     */
    data?: Array<AssetTransform>;
}
/**
 *
 * @export
 * @interface AssetTransformCollectionAllOf
 */
export interface AssetTransformCollectionAllOf {
    /**
     *
     * @type {Array<AssetTransform>}
     * @memberof AssetTransformCollectionAllOf
     */
    data?: Array<AssetTransform>;
}
/**
 *
 * @export
 * @interface AssetTransformResponse
 */
export interface AssetTransformResponse {
    /**
     *
     * @type {AssetTransform}
     * @memberof AssetTransformResponse
     */
    data?: AssetTransform;
}
/**
 *
 * @export
 * @interface AssetsInclude
 */
export interface AssetsInclude {
    /**
     *
     * @type {Array<Asset>}
     * @memberof AssetsInclude
     */
    data?: Array<Asset>;
}
/**
 *
 * @export
 * @interface AssociationGroup
 */
export interface AssociationGroup {
    /**
     *
     * @type {string}
     * @memberof AssociationGroup
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AssociationGroup
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AssociationGroup
     */
    handle?: string;
}
/**
 *
 * @export
 * @interface AssociationGroupCollection
 */
export interface AssociationGroupCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<AssociationGroup>}
     * @memberof AssociationGroupCollection
     */
    data?: Array<AssociationGroup>;
}
/**
 *
 * @export
 * @interface AssociationGroupCollectionAllOf
 */
export interface AssociationGroupCollectionAllOf {
    /**
     *
     * @type {Array<AssociationGroup>}
     * @memberof AssociationGroupCollectionAllOf
     */
    data?: Array<AssociationGroup>;
}
/**
 *
 * @export
 * @interface AssociationGroupResponse
 */
export interface AssociationGroupResponse {
    /**
     *
     * @type {AssociationGroup}
     * @memberof AssociationGroupResponse
     */
    data?: AssociationGroup;
}
/**
 *
 * @export
 * @interface AttachCategoryChannelsBody
 */
export interface AttachCategoryChannelsBody {
    /**
     *
     * @type {Array<AttachCategoryChannelsBodyChannels>}
     * @memberof AttachCategoryChannelsBody
     */
    channels: Array<AttachCategoryChannelsBodyChannels>;
}
/**
 *
 * @export
 * @interface AttachCategoryChannelsBodyChannels
 */
export interface AttachCategoryChannelsBodyChannels {
    /**
     *
     * @type {string}
     * @memberof AttachCategoryChannelsBodyChannels
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AttachCategoryChannelsBodyChannels
     */
    published_at: string;
}
/**
 *
 * @export
 * @interface AttachCategoryCustomerGroupsBody
 */
export interface AttachCategoryCustomerGroupsBody {
    /**
     *
     * @type {Array<AttachCategoryCustomerGroupsBodyGroups>}
     * @memberof AttachCategoryCustomerGroupsBody
     */
    groups?: Array<AttachCategoryCustomerGroupsBodyGroups>;
}
/**
 *
 * @export
 * @interface AttachCategoryCustomerGroupsBodyGroups
 */
export interface AttachCategoryCustomerGroupsBodyGroups {
    /**
     *
     * @type {string}
     * @memberof AttachCategoryCustomerGroupsBodyGroups
     */
    id?: string;
    /**
     *
     * @type {boolean}
     * @memberof AttachCategoryCustomerGroupsBodyGroups
     */
    visible?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AttachCategoryCustomerGroupsBodyGroups
     */
    purchasable?: boolean;
}
/**
 *
 * @export
 * @interface AttachCategoryProductsBody
 */
export interface AttachCategoryProductsBody {
    /**
     *
     * @type {Array<AttachCategoryProductsBodyProducts>}
     * @memberof AttachCategoryProductsBody
     */
    products?: Array<AttachCategoryProductsBodyProducts>;
    /**
     * custom, min_price:asc, min_price:desc, sku:asc, sku:desc
     * @type {string}
     * @memberof AttachCategoryProductsBody
     */
    sort_type?: string;
}
/**
 *
 * @export
 * @interface AttachCategoryProductsBodyProducts
 */
export interface AttachCategoryProductsBodyProducts {
    /**
     *
     * @type {string}
     * @memberof AttachCategoryProductsBodyProducts
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof AttachCategoryProductsBodyProducts
     */
    position?: number;
}
/**
 *
 * @export
 * @interface AttachCategoryRoutesBody
 */
export interface AttachCategoryRoutesBody {
    /**
     *
     * @type {boolean}
     * @memberof AttachCategoryRoutesBody
     */
    redirect?: boolean;
    /**
     *
     * @type {string}
     * @memberof AttachCategoryRoutesBody
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof AttachCategoryRoutesBody
     */
    slug?: string;
    /**
     *
     * @type {string}
     * @memberof AttachCategoryRoutesBody
     */
    locale?: string;
}
/**
 * ### Available includes - group
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     *
     * @type {string}
     * @memberof Attribute
     */
    id?: string;
    /**
     *
     * @type {object}
     * @memberof Attribute
     */
    name?: object;
    /**
     *
     * @type {string}
     * @memberof Attribute
     */
    handle?: string;
    /**
     *
     * @type {number}
     * @memberof Attribute
     */
    position?: number;
    /**
     *
     * @type {boolean}
     * @memberof Attribute
     */
    filterable?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Attribute
     */
    scopeable?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Attribute
     */
    translatable?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Attribute
     */
    variant?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Attribute
     */
    searchable?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Attribute
     */
    localised?: boolean;
    /**
     *
     * @type {string}
     * @memberof Attribute
     */
    type?: string;
    /**
     *
     * @type {boolean}
     * @memberof Attribute
     */
    required?: boolean;
    /**
     *
     * @type {Array<object>}
     * @memberof Attribute
     */
    lookups?: Array<object>;
    /**
     *
     * @type {boolean}
     * @memberof Attribute
     */
    system?: boolean;
    /**
     *
     * @type {AttributeGroupResponse}
     * @memberof Attribute
     */
    group?: AttributeGroupResponse;
}
/**
 *
 * @export
 * @interface AttributeCollection
 */
export interface AttributeCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Attribute>}
     * @memberof AttributeCollection
     */
    data?: Array<Attribute>;
}
/**
 *
 * @export
 * @interface AttributeCollectionAllOf
 */
export interface AttributeCollectionAllOf {
    /**
     *
     * @type {Array<Attribute>}
     * @memberof AttributeCollectionAllOf
     */
    data?: Array<Attribute>;
}
/**
 *
 * @export
 * @interface AttributeData
 */
export interface AttributeData {
    /**
     *
     * @type {object}
     * @memberof AttributeData
     */
    attribute_data?: object;
}
/**
 * ### Available includes - attributes
 * @export
 * @interface AttributeGroup
 */
export interface AttributeGroup {
    /**
     *
     * @type {string}
     * @memberof AttributeGroup
     */
    id?: string;
    /**
     *
     * @type {object}
     * @memberof AttributeGroup
     */
    name?: object;
    /**
     *
     * @type {string}
     * @memberof AttributeGroup
     */
    handle?: string;
    /**
     *
     * @type {number}
     * @memberof AttributeGroup
     */
    position?: number;
    /**
     *
     * @type {AttributeCollection}
     * @memberof AttributeGroup
     */
    attributes?: AttributeCollection;
}
/**
 *
 * @export
 * @interface AttributeGroupCollection
 */
export interface AttributeGroupCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<AttributeGroup>}
     * @memberof AttributeGroupCollection
     */
    data?: Array<AttributeGroup>;
}
/**
 *
 * @export
 * @interface AttributeGroupCollectionAllOf
 */
export interface AttributeGroupCollectionAllOf {
    /**
     *
     * @type {Array<AttributeGroup>}
     * @memberof AttributeGroupCollectionAllOf
     */
    data?: Array<AttributeGroup>;
}
/**
 *
 * @export
 * @interface AttributeGroupResponse
 */
export interface AttributeGroupResponse {
    /**
     *
     * @type {AttributeGroup}
     * @memberof AttributeGroupResponse
     */
    data?: AttributeGroup;
}
/**
 *
 * @export
 * @interface AttributeResponse
 */
export interface AttributeResponse {
    /**
     *
     * @type {Attribute}
     * @memberof AttributeResponse
     */
    data?: Attribute;
}
/**
 *
 * @export
 * @interface AttributesLookups
 */
export interface AttributesLookups {
    /**
     *
     * @type {string}
     * @memberof AttributesLookups
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof AttributesLookups
     */
    value?: string;
}
/**
 *
 * @export
 * @interface AttributesName
 */
export interface AttributesName {
    /**
     *
     * @type {string}
     * @memberof AttributesName
     */
    locale: string;
}
/**
 *
 * @export
 * @interface AttributesOrderUnprocessableResponse
 */
export interface AttributesOrderUnprocessableResponse {
    /**
     *
     * @type {Array<string>}
     * @memberof AttributesOrderUnprocessableResponse
     */
    attributes?: Array<string>;
}
/**
 *
 * @export
 * @interface AttributesReorderBody
 */
export interface AttributesReorderBody {
    /**
     *
     * @type {Array<AttributesReorderBodyGroups>}
     * @memberof AttributesReorderBody
     */
    groups?: Array<AttributesReorderBodyGroups>;
}
/**
 *
 * @export
 * @interface AttributesReorderBodyGroups
 */
export interface AttributesReorderBodyGroups {
    /**
     *
     * @type {number}
     * @memberof AttributesReorderBodyGroups
     */
    groupId?: number;
}
/**
 *
 * @export
 * @interface Basket
 */
export interface Basket {
    /**
     *
     * @type {string}
     * @memberof Basket
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof Basket
     */
    total?: number;
    /**
     *
     * @type {number}
     * @memberof Basket
     */
    sub_total?: number;
    /**
     *
     * @type {number}
     * @memberof Basket
     */
    tax_total?: number;
    /**
     *
     * @type {number}
     * @memberof Basket
     */
    discount_total?: number;
    /**
     *
     * @type {boolean}
     * @memberof Basket
     */
    changed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Basket
     */
    has_exclusions?: boolean;
    /**
     *
     * @type {object}
     * @memberof Basket
     */
    meta?: object;
    /**
     *
     * @type {BasketLineCollection}
     * @memberof Basket
     */
    lines?: BasketLineCollection;
    /**
     *
     * @type {OrderResponse}
     * @memberof Basket
     */
    order?: OrderResponse;
}
/**
 *
 * @export
 * @interface BasketCollection
 */
export interface BasketCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Basket>}
     * @memberof BasketCollection
     */
    data?: Array<Basket>;
}
/**
 *
 * @export
 * @interface BasketCollectionAllOf
 */
export interface BasketCollectionAllOf {
    /**
     *
     * @type {Array<Basket>}
     * @memberof BasketCollectionAllOf
     */
    data?: Array<Basket>;
}
/**
 *
 * @export
 * @interface BasketLine
 */
export interface BasketLine {
    /**
     *
     * @type {string}
     * @memberof BasketLine
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof BasketLine
     */
    quantity?: number;
    /**
     *
     * @type {number}
     * @memberof BasketLine
     */
    line_total?: number;
    /**
     *
     * @type {number}
     * @memberof BasketLine
     */
    unit_price?: number;
    /**
     *
     * @type {number}
     * @memberof BasketLine
     */
    unit_tax?: number;
    /**
     *
     * @type {number}
     * @memberof BasketLine
     */
    line_discount?: number;
    /**
     *
     * @type {number}
     * @memberof BasketLine
     */
    tax?: number;
    /**
     *
     * @type {object}
     * @memberof BasketLine
     */
    meta?: object;
    /**
     *
     * @type {ProductVariantResponse}
     * @memberof BasketLine
     */
    variant?: ProductVariantResponse;
}
/**
 *
 * @export
 * @interface BasketLineCollection
 */
export interface BasketLineCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<BasketLine>}
     * @memberof BasketLineCollection
     */
    data?: Array<BasketLine>;
}
/**
 *
 * @export
 * @interface BasketLineCollectionAllOf
 */
export interface BasketLineCollectionAllOf {
    /**
     *
     * @type {Array<BasketLine>}
     * @memberof BasketLineCollectionAllOf
     */
    data?: Array<BasketLine>;
}
/**
 *
 * @export
 * @interface BasketLineResponse
 */
export interface BasketLineResponse {
    /**
     *
     * @type {BasketLine}
     * @memberof BasketLineResponse
     */
    data?: BasketLine;
}
/**
 *
 * @export
 * @interface BasketLineUpdateBody
 */
export interface BasketLineUpdateBody {
    /**
     *
     * @type {number}
     * @memberof BasketLineUpdateBody
     */
    quantity?: number;
}
/**
 *
 * @export
 * @interface BasketResponse
 */
export interface BasketResponse {
    /**
     *
     * @type {Basket}
     * @memberof BasketResponse
     */
    data?: Basket;
}
/**
 * ### Available includes - children
 * @export
 * @interface Category
 */
export interface Category {
    /**
     *
     * @type {string}
     * @memberof Category
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Category
     */
    sort?: string;
    /**
     *
     * @type {number}
     * @memberof Category
     */
    products_count?: number;
    /**
     *
     * @type {number}
     * @memberof Category
     */
    children_count?: number;
    /**
     *
     * @type {number}
     * @memberof Category
     */
    left_pos?: number;
    /**
     *
     * @type {number}
     * @memberof Category
     */
    right_pos?: number;
    /**
     *
     * @type {string}
     * @memberof Category
     */
    name?: string;
    /**
     *
     * @type {object}
     * @memberof Category
     */
    attribute_data?: object;
    /**
     *
     * @type {CategoryCollection}
     * @memberof Category
     */
    children?: CategoryCollection;
    /**
     *
     * @type {ChannelCollection}
     * @memberof Category
     */
    channels?: ChannelCollection;
    /**
     *
     * @type {CategoryCollection}
     * @memberof Category
     */
    ancestors?: CategoryCollection;
    /**
     *
     * @type {RouteCollection}
     * @memberof Category
     */
    routes?: RouteCollection;
    /**
     *
     * @type {LayoutResponse}
     * @memberof Category
     */
    layout?: LayoutResponse;
    /**
     *
     * @type {AssetCollection}
     * @memberof Category
     */
    assets?: AssetCollection;
    /**
     *
     * @type {AssetResponse}
     * @memberof Category
     */
    primary_asset?: AssetResponse;
    /**
     *
     * @type {AttributeCollection}
     * @memberof Category
     */
    attributes?: AttributeCollection;
    /**
     *
     * @type {CustomerGroupCollection}
     * @memberof Category
     */
    customer_groups?: CustomerGroupCollection;
    /**
     *
     * @type {ProductCollection}
     * @memberof Category
     */
    products?: ProductCollection;
}
/**
 *
 * @export
 * @interface CategoryAttachLayoutBody
 */
export interface CategoryAttachLayoutBody {
    /**
     *
     * @type {string}
     * @memberof CategoryAttachLayoutBody
     */
    layout_id?: string;
}
/**
 *
 * @export
 * @interface CategoryCollection
 */
export interface CategoryCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Category>}
     * @memberof CategoryCollection
     */
    data?: Array<Category>;
}
/**
 *
 * @export
 * @interface CategoryCollectionAllOf
 */
export interface CategoryCollectionAllOf {
    /**
     *
     * @type {Array<Category>}
     * @memberof CategoryCollectionAllOf
     */
    data?: Array<Category>;
}
/**
 *
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     *
     * @type {Category}
     * @memberof CategoryResponse
     */
    data?: Category;
}
/**
 * ## Available includes  - products - categories - collections - discounts - shippingMethods
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    handle?: string;
    /**
     *
     * @type {string}
     * @memberof Channel
     */
    url?: string;
    /**
     *
     * @type {boolean}
     * @memberof Channel
     */
    _default?: boolean;
}
/**
 *
 * @export
 * @interface ChannelCollection
 */
export interface ChannelCollection extends Pagination {
    /**
     *
     * @type {Array<Channel>}
     * @memberof ChannelCollection
     */
    data?: Array<Channel>;
}
/**
 *
 * @export
 * @interface ChannelCollectionAllOf
 */
export interface ChannelCollectionAllOf {
    /**
     *
     * @type {Array<Channel>}
     * @memberof ChannelCollectionAllOf
     */
    data?: Array<Channel>;
}
/**
 *
 * @export
 * @interface ChannelResponse
 */
export interface ChannelResponse {
    /**
     *
     * @type {Channel}
     * @memberof ChannelResponse
     */
    data?: Channel;
}
/**
 * ### Available includes  - routes - layout - channels - assets - attributes - products - customerGroups
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     *
     * @type {string}
     * @memberof Collection
     */
    id?: string;
    /**
     *
     * @type {object}
     * @memberof Collection
     */
    attribute_data?: object;
    /**
     *
     * @type {RouteCollection}
     * @memberof Collection
     */
    routes?: RouteCollection;
    /**
     *
     * @type {LayoutResponse}
     * @memberof Collection
     */
    layout?: LayoutResponse;
    /**
     *
     * @type {ChannelCollection}
     * @memberof Collection
     */
    channels?: ChannelCollection;
    /**
     *
     * @type {AssetCollection}
     * @memberof Collection
     */
    assets?: AssetCollection;
    /**
     *
     * @type {AttributeCollection}
     * @memberof Collection
     */
    attributes?: AttributeCollection;
    /**
     *
     * @type {ProductCollection}
     * @memberof Collection
     */
    products?: ProductCollection;
    /**
     *
     * @type {CustomerGroupCollection}
     * @memberof Collection
     */
    customer_groups?: CustomerGroupCollection;
}
/**
 *
 * @export
 * @interface CollectionCollection
 */
export interface CollectionCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Collection>}
     * @memberof CollectionCollection
     */
    data?: Array<Collection>;
}
/**
 *
 * @export
 * @interface CollectionCollectionAllOf
 */
export interface CollectionCollectionAllOf {
    /**
     *
     * @type {Array<Collection>}
     * @memberof CollectionCollectionAllOf
     */
    data?: Array<Collection>;
}
/**
 *
 * @export
 * @interface CollectionResponse
 */
export interface CollectionResponse {
    /**
     *
     * @type {Collection}
     * @memberof CollectionResponse
     */
    data?: Collection;
}
/**
 *
 * @export
 * @interface CollectionsName
 */
export interface CollectionsName {
    /**
     *
     * @type {string}
     * @memberof CollectionsName
     */
    en?: string;
}
/**
 *
 * @export
 * @interface CreateAssetBody
 */
export interface CreateAssetBody {
    /**
     * Required when passing url
     * @type {string}
     * @memberof CreateAssetBody
     */
    mime_type?: string;
    /**
     * External URL to file to upload, required without file
     * @type {string}
     * @memberof CreateAssetBody
     */
    url?: string;
    /**
     *
     * @type {object}
     * @memberof CreateAssetBody
     */
    file?: object;
}
/**
 *
 * @export
 * @interface CreateAttributeGroupBody
 */
export interface CreateAttributeGroupBody {
    /**
     *
     * @type {CreateAttributeGroupBodyName}
     * @memberof CreateAttributeGroupBody
     */
    name?: CreateAttributeGroupBodyName;
}
/**
 *
 * @export
 * @interface CreateAttributeGroupBodyName
 */
export interface CreateAttributeGroupBodyName {
    /**
     *
     * @type {CreateAttributeGroupBodyNameEn}
     * @memberof CreateAttributeGroupBodyName
     */
    en: CreateAttributeGroupBodyNameEn;
}
/**
 *
 * @export
 * @interface CreateAttributeGroupBodyNameEn
 */
export interface CreateAttributeGroupBodyNameEn {
    /**
     *
     * @type {string}
     * @memberof CreateAttributeGroupBodyNameEn
     */
    name: string;
}
/**
 *
 * @export
 * @interface CreateBasketBody
 */
export interface CreateBasketBody {
    /**
     *
     * @type {Array<CreateBasketBodyVariants>}
     * @memberof CreateBasketBody
     */
    variants?: Array<CreateBasketBodyVariants>;
    /**
     *
     * @type {string}
     * @memberof CreateBasketBody
     */
    basket_id?: string;
}
/**
 *
 * @export
 * @interface CreateBasketBodyVariants
 */
export interface CreateBasketBodyVariants {
    /**
     *
     * @type {string}
     * @memberof CreateBasketBodyVariants
     */
    id: string;
    /**
     *
     * @type {number}
     * @memberof CreateBasketBodyVariants
     */
    quantity: number;
}
/**
 *
 * @export
 * @interface CreateBasketLinesBody
 */
export interface CreateBasketLinesBody {
    /**
     *
     * @type {Array<CreateBasketLinesBodyVariants>}
     * @memberof CreateBasketLinesBody
     */
    variants?: Array<CreateBasketLinesBodyVariants>;
    /**
     *
     * @type {string}
     * @memberof CreateBasketLinesBody
     */
    basket_id?: string;
}
/**
 *
 * @export
 * @interface CreateBasketLinesBodyVariants
 */
export interface CreateBasketLinesBodyVariants {
    /**
     *
     * @type {string}
     * @memberof CreateBasketLinesBodyVariants
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof CreateBasketLinesBodyVariants
     */
    quantity?: number;
    /**
     *
     * @type {object}
     * @memberof CreateBasketLinesBodyVariants
     */
    meta?: object;
}
/**
 *
 * @export
 * @interface CreateCategoryBody
 */
export interface CreateCategoryBody {
    /**
     *
     * @type {string}
     * @memberof CreateCategoryBody
     */
    url: string;
    /**
     *
     * @type {string}
     * @memberof CreateCategoryBody
     */
    path: string;
    /**
     *
     * @type {ProductsName}
     * @memberof CreateCategoryBody
     */
    name: ProductsName;
}
/**
 *
 * @export
 * @interface CreateChannelBody
 */
export interface CreateChannelBody {
    /**
     *
     * @type {string}
     * @memberof CreateChannelBody
     */
    handle?: string;
    /**
     *
     * @type {string}
     * @memberof CreateChannelBody
     */
    name?: string;
}
/**
 *
 * @export
 * @interface CreateOrderBody
 */
export interface CreateOrderBody {
    /**
     *
     * @type {string}
     * @memberof CreateOrderBody
     */
    basket_id: string;
    /**
     *
     * @type {string}
     * @memberof CreateOrderBody
     */
    include?: string;
}
/**
 *
 * @export
 * @interface CustomerGroup
 */
export interface CustomerGroup {
    /**
     *
     * @type {string}
     * @memberof CustomerGroup
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerGroup
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerGroup
     */
    handle?: string;
    /**
     *
     * @type {string}
     * @memberof CustomerGroup
     */
    visible?: string;
    /**
     *
     * @type {boolean}
     * @memberof CustomerGroup
     */
    purchasable?: boolean;
}
/**
 *
 * @export
 * @interface CustomerGroupCollection
 */
export interface CustomerGroupCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<CustomerGroup>}
     * @memberof CustomerGroupCollection
     */
    data?: Array<CustomerGroup>;
}
/**
 *
 * @export
 * @interface CustomerGroupCollectionAllOf
 */
export interface CustomerGroupCollectionAllOf {
    /**
     *
     * @type {Array<CustomerGroup>}
     * @memberof CustomerGroupCollectionAllOf
     */
    data?: Array<CustomerGroup>;
}
/**
 *
 * @export
 * @interface CustomerGroupResponse
 */
export interface CustomerGroupResponse {
    /**
     *
     * @type {CustomerGroup}
     * @memberof CustomerGroupResponse
     */
    data?: CustomerGroup;
}
/**
 *
 * @export
 * @interface CustomerPrice
 */
export interface CustomerPrice {
    /**
     *
     * @type {string}
     * @memberof CustomerPrice
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof CustomerPrice
     */
    price?: number;
    /**
     *
     * @type {TaxResponse}
     * @memberof CustomerPrice
     */
    tax?: TaxResponse;
    /**
     *
     * @type {CustomerGroupResponse}
     * @memberof CustomerPrice
     */
    group?: CustomerGroupResponse;
}
/**
 *
 * @export
 * @interface CustomerPriceCollection
 */
export interface CustomerPriceCollection {
    /**
     *
     * @type {Array<CustomerPrice>}
     * @memberof CustomerPriceCollection
     */
    data?: Array<CustomerPrice>;
}
/**
 *
 * @export
 * @interface CustomerPriceResponse
 */
export interface CustomerPriceResponse {
    /**
     *
     * @type {CustomerPrice}
     * @memberof CustomerPriceResponse
     */
    data?: CustomerPrice;
}
/**
 * ### Available includes - sets - rewards - items
 * @export
 * @interface Discount
 */
export interface Discount {
    /**
     *
     * @type {string}
     * @memberof Discount
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Discount
     */
    start_at?: string;
    /**
     *
     * @type {string}
     * @memberof Discount
     */
    end_at?: string;
    /**
     *
     * @type {boolean}
     * @memberof Discount
     */
    priority?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Discount
     */
    status?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Discount
     */
    stop_rules?: boolean;
    /**
     *
     * @type {number}
     * @memberof Discount
     */
    uses?: number;
}
/**
 *
 * @export
 * @interface DiscountCollection
 */
export interface DiscountCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Discount>}
     * @memberof DiscountCollection
     */
    data?: Array<Discount>;
}
/**
 *
 * @export
 * @interface DiscountCollectionAllOf
 */
export interface DiscountCollectionAllOf {
    /**
     *
     * @type {Array<Discount>}
     * @memberof DiscountCollectionAllOf
     */
    data?: Array<Discount>;
}
/**
 *
 * @export
 * @interface DiscountResponse
 */
export interface DiscountResponse {
    /**
     *
     * @type {Discount}
     * @memberof DiscountResponse
     */
    data?: Discount;
}
/**
 *
 * @export
 * @interface DiscountsChannels
 */
export interface DiscountsChannels {
    /**
     *
     * @type {string}
     * @memberof DiscountsChannels
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DiscountsChannels
     */
    published_at?: string;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdChannels
 */
export interface DiscountsDiscountIdChannels {
    /**
     *
     * @type {DiscountsDiscountIdChannelsData}
     * @memberof DiscountsDiscountIdChannels
     */
    data?: DiscountsDiscountIdChannelsData;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdChannelsData
 */
export interface DiscountsDiscountIdChannelsData {
    /**
     *
     * @type {string}
     * @memberof DiscountsDiscountIdChannelsData
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DiscountsDiscountIdChannelsData
     */
    published_at?: string;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdRewards
 */
export interface DiscountsDiscountIdRewards {
    /**
     *
     * @type {DiscountsDiscountIdRewardsData}
     * @memberof DiscountsDiscountIdRewards
     */
    data?: DiscountsDiscountIdRewardsData;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdRewardsData
 */
export interface DiscountsDiscountIdRewardsData {
    /**
     *
     * @type {Array<DiscountsDiscountIdRewardsDataProducts>}
     * @memberof DiscountsDiscountIdRewardsData
     */
    products?: Array<DiscountsDiscountIdRewardsDataProducts>;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdRewardsDataProducts
 */
export interface DiscountsDiscountIdRewardsDataProducts {
    /**
     *
     * @type {string}
     * @memberof DiscountsDiscountIdRewardsDataProducts
     */
    product_id?: string;
    /**
     *
     * @type {number}
     * @memberof DiscountsDiscountIdRewardsDataProducts
     */
    quantity?: number;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdSets
 */
export interface DiscountsDiscountIdSets {
    /**
     *
     * @type {Array<DiscountsDiscountIdSetsData>}
     * @memberof DiscountsDiscountIdSets
     */
    data?: Array<DiscountsDiscountIdSetsData>;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdSetsData
 */
export interface DiscountsDiscountIdSetsData {
    /**
     *
     * @type {string}
     * @memberof DiscountsDiscountIdSetsData
     */
    scope?: string;
    /**
     *
     * @type {boolean}
     * @memberof DiscountsDiscountIdSetsData
     */
    outcome?: boolean;
    /**
     *
     * @type {DiscountsDiscountIdSetsItems}
     * @memberof DiscountsDiscountIdSetsData
     */
    items?: DiscountsDiscountIdSetsItems;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdSetsItems
 */
export interface DiscountsDiscountIdSetsItems {
    /**
     *
     * @type {Array<DiscountsDiscountIdSetsItemsData>}
     * @memberof DiscountsDiscountIdSetsItems
     */
    data?: Array<DiscountsDiscountIdSetsItemsData>;
}
/**
 *
 * @export
 * @interface DiscountsDiscountIdSetsItemsData
 */
export interface DiscountsDiscountIdSetsItemsData {
    /**
     *
     * @type {Array<string>}
     * @memberof DiscountsDiscountIdSetsItemsData
     */
    eligibles?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof DiscountsDiscountIdSetsItemsData
     */
    type?: string;
}
/**
 *
 * @export
 * @interface DiscountsName
 */
export interface DiscountsName {
    /**
     *
     * @type {string}
     * @memberof DiscountsName
     */
    en?: string;
}
/**
 *
 * @export
 * @interface EmailPreview
 */
export interface EmailPreview {
    /**
     *
     * @type {string}
     * @memberof EmailPreview
     */
    subject?: string;
    /**
     *
     * @type {string}
     * @memberof EmailPreview
     */
    content?: string;
}
/**
 *
 * @export
 * @interface EmailPreviewResponse
 */
export interface EmailPreviewResponse {
    /**
     *
     * @type {EmailPreview}
     * @memberof EmailPreviewResponse
     */
    data?: EmailPreview;
}
/**
 *
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
    /**
     *
     * @type {number}
     * @memberof ErrorError
     */
    http_code?: number;
    /**
     *
     * @type {string}
     * @memberof ErrorError
     */
    message?: string;
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    tracking_no?: string;
    /**
     * Corresponds to status set in config
     * @type {string}
     * @memberof InlineObject
     */
    status?: string;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject
     */
    send_emails?: boolean;
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    payment_type_id?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    payment_type?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    order_id: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    payment_token: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    customer_reference?: string;
    /**
     *
     * @type {Array<object>}
     * @memberof InlineObject1
     */
    meta?: Array<object>;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    notes?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    company_name?: string;
}
/**
 *
 * @export
 * @interface InlineObject10
 */
export interface InlineObject10 {
    /**
     *
     * @type {string}
     * @memberof InlineObject10
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject10
     */
    lang: string;
    /**
     * Unique
     * @type {string}
     * @memberof InlineObject10
     */
    iso: string;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject10
     */
    enabled?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject10
     */
    _default?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject10
     */
    current?: boolean;
}
/**
 *
 * @export
 * @interface InlineObject11
 */
export interface InlineObject11 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineObject11
     */
    orders: Array<string>;
    /**
     *
     * @type {string}
     * @memberof InlineObject11
     */
    field: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject11
     */
    value?: string;
    /**
     * Whether to send any mailers when changing status
     * @type {boolean}
     * @memberof InlineObject11
     */
    send_emails?: boolean;
}
/**
 *
 * @export
 * @interface InlineObject12
 */
export interface InlineObject12 {
    /**
     *
     * @type {string}
     * @memberof InlineObject12
     */
    price_id?: string;
}
/**
 *
 * @export
 * @interface InlineObject13
 */
export interface InlineObject13 {
    /**
     *
     * @type {string}
     * @memberof InlineObject13
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject13
     */
    phone?: string;
}
/**
 *
 * @export
 * @interface InlineObject14
 */
export interface InlineObject14 {
    /**
     *
     * @type {number}
     * @memberof InlineObject14
     */
    quantity: number;
    /**
     *
     * @type {number}
     * @memberof InlineObject14
     */
    line_total: number;
    /**
     *
     * @type {number}
     * @memberof InlineObject14
     */
    unit_price: number;
    /**
     * The tax rate as a percentage
     * @type {number}
     * @memberof InlineObject14
     */
    tax_rate: number;
    /**
     * Shows publicly on the order line
     * @type {string}
     * @memberof InlineObject14
     */
    description: string;
    /**
     * Should this line be treated as a manual one
     * @type {boolean}
     * @memberof InlineObject14
     */
    is_manual?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject14
     */
    is_shipping?: boolean;
    /**
     * If this is a variant, list the option name here
     * @type {string}
     * @memberof InlineObject14
     */
    option?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject14
     */
    sku: string;
    /**
     *
     * @type {number}
     * @memberof InlineObject14
     */
    discount_total?: number;
}
/**
 *
 * @export
 * @interface InlineObject15
 */
export interface InlineObject15 {
    /**
     *
     * @type {string}
     * @memberof InlineObject15
     */
    paRes: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject15
     */
    transaction: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject15
     */
    order_id: string;
}
/**
 *
 * @export
 * @interface InlineObject16
 */
export interface InlineObject16 {
    /**
     *
     * @type {number}
     * @memberof InlineObject16
     */
    inventory?: number;
}
/**
 *
 * @export
 * @interface InlineObject17
 */
export interface InlineObject17 {
    /**
     *
     * @type {Array<ProductsProductIdDuplicateRoutes>}
     * @memberof InlineObject17
     */
    routes: Array<ProductsProductIdDuplicateRoutes>;
    /**
     *
     * @type {Array<ProductsProductIdDuplicateRoutes>}
     * @memberof InlineObject17
     */
    skus: Array<ProductsProductIdDuplicateRoutes>;
}
/**
 *
 * @export
 * @interface InlineObject18
 */
export interface InlineObject18 {
    /**
     *
     * @type {string}
     * @memberof InlineObject18
     */
    slug?: string;
}
/**
 *
 * @export
 * @interface InlineObject19
 */
export interface InlineObject19 {
    /**
     *
     * @type {string}
     * @memberof InlineObject19
     */
    slug?: string;
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     *
     * @type {string}
     * @memberof InlineObject2
     */
    group_id: string;
    /**
     *
     * @type {Array<AttributesName>}
     * @memberof InlineObject2
     */
    name: Array<AttributesName>;
    /**
     *
     * @type {string}
     * @memberof InlineObject2
     */
    handle: string;
    /**
     *
     * @type {number}
     * @memberof InlineObject2
     */
    position?: number;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject2
     */
    filterable?: boolean;
    /**
     *
     * @type {number}
     * @memberof InlineObject2
     */
    scopeable?: number;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject2
     */
    translatable?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject2
     */
    variant?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject2
     */
    searchable?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject2
     */
    localised?: boolean;
    /**
     *
     * @type {string}
     * @memberof InlineObject2
     */
    type?: string;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject2
     */
    required?: boolean;
    /**
     *
     * @type {Array<AttributesLookups>}
     * @memberof InlineObject2
     */
    lookups?: Array<AttributesLookups>;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject2
     */
    system?: boolean;
}
/**
 *
 * @export
 * @interface InlineObject20
 */
export interface InlineObject20 {
    /**
     * An array of attribute IDs
     * @type {Array<string>}
     * @memberof InlineObject20
     */
    attributes: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject21
 */
export interface InlineObject21 {
    /**
     * An array of collection IDs to associate
     * @type {Array<string>}
     * @memberof InlineObject21
     */
    collections: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject22
 */
export interface InlineObject22 {
    /**
     * Array of category ID\'s
     * @type {Array<string>}
     * @memberof InlineObject22
     */
    categories: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject23
 */
export interface InlineObject23 {
    /**
     * Array of channel ID\'s
     * @type {Array<string>}
     * @memberof InlineObject23
     */
    channels: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject24
 */
export interface InlineObject24 {
    /**
     *
     * @type {ProductsProductIdAssociationsRelations}
     * @memberof InlineObject24
     */
    relations?: ProductsProductIdAssociationsRelations;
}
/**
 *
 * @export
 * @interface InlineObject25
 */
export interface InlineObject25 {
    /**
     *
     * @type {Array<ProductsProductIdCustomerGroupsGroups>}
     * @memberof InlineObject25
     */
    groups: Array<ProductsProductIdCustomerGroupsGroups>;
}
/**
 *
 * @export
 * @interface InlineObject26
 */
export interface InlineObject26 {
    /**
     *
     * @type {ProductsName}
     * @memberof InlineObject26
     */
    name: ProductsName;
    /**
     *
     * @type {string}
     * @memberof InlineObject26
     */
    url: string;
    /**
     *
     * @type {number}
     * @memberof InlineObject26
     */
    stock: number;
    /**
     *
     * @type {string}
     * @memberof InlineObject26
     */
    family_id: string;
    /**
     *
     * @type {number}
     * @memberof InlineObject26
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof InlineObject26
     */
    sku: string;
}
/**
 *
 * @export
 * @interface InlineObject27
 */
export interface InlineObject27 {
    /**
     *
     * @type {string}
     * @memberof InlineObject27
     */
    name?: string;
}
/**
 *
 * @export
 * @interface InlineObject28
 */
export interface InlineObject28 {
    /**
     *
     * @type {string}
     * @memberof InlineObject28
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineObject29
 */
export interface InlineObject29 {
    /**
     *
     * @type {number}
     * @memberof InlineObject29
     */
    rate: number;
    /**
     *
     * @type {string}
     * @memberof InlineObject29
     */
    zone_id: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject29
     */
    currency_id: string;
}
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * If left blank, the full amount will be refunded
     * @type {number}
     * @memberof InlineObject3
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    notes?: string;
}
/**
 *
 * @export
 * @interface InlineObject30
 */
export interface InlineObject30 {
    /**
     *
     * @type {number}
     * @memberof InlineObject30
     */
    rate: number;
    /**
     *
     * @type {string}
     * @memberof InlineObject30
     */
    zone_id: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject30
     */
    currency_id: string;
}
/**
 *
 * @export
 * @interface InlineObject31
 */
export interface InlineObject31 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineObject31
     */
    zones: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject32
 */
export interface InlineObject32 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineObject32
     */
    users?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject33
 */
export interface InlineObject33 {
    /**
     *
     * @type {string}
     * @memberof InlineObject33
     */
    type: InlineObject33TypeEnum;
    /**
     *
     * @type {CollectionsName}
     * @memberof InlineObject33
     */
    name?: CollectionsName;
}
/**
    * @export
    * @enum {string}
    */
export declare enum InlineObject33TypeEnum {
    Standard = "standard",
    Dhl = "dhl",
    Regional = "regional"
}
/**
 *
 * @export
 * @interface InlineObject34
 */
export interface InlineObject34 {
    /**
     *
     * @type {ProductsName}
     * @memberof InlineObject34
     */
    name: ProductsName;
    /**
     *
     * @type {string}
     * @memberof InlineObject34
     */
    type: string;
}
/**
 *
 * @export
 * @interface InlineObject35
 */
export interface InlineObject35 {
    /**
     *
     * @type {string}
     * @memberof InlineObject35
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineObject36
 */
export interface InlineObject36 {
    /**
     *
     * @type {string}
     * @memberof InlineObject36
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineObject37
 */
export interface InlineObject37 {
    /**
     * Unique name
     * @type {string}
     * @memberof InlineObject37
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof InlineObject37
     */
    percentage: number;
}
/**
 *
 * @export
 * @interface InlineObject38
 */
export interface InlineObject38 {
    /**
     * Must be unique
     * @type {string}
     * @memberof InlineObject38
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof InlineObject38
     */
    percentage: number;
}
/**
 *
 * @export
 * @interface InlineObject39
 */
export interface InlineObject39 {
    /**
     *
     * @type {string}
     * @memberof InlineObject39
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject39
     */
    firstname: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject39
     */
    lastname: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject39
     */
    password: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject39
     */
    password_confirmation: string;
}
/**
 *
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     *
     * @type {boolean}
     * @memberof InlineObject4
     */
    redirect?: boolean;
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    slug?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject4
     */
    locale?: string;
}
/**
 *
 * @export
 * @interface InlineObject40
 */
export interface InlineObject40 {
    /**
     *
     * @type {string}
     * @memberof InlineObject40
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject40
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject40
     */
    password_confirmation?: string;
}
/**
 *
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * Pass all products you wish to be associated.
     * @type {Array<string>}
     * @memberof InlineObject5
     */
    products?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     *
     * @type {CollectionsName}
     * @memberof InlineObject6
     */
    name?: CollectionsName;
    /**
     *
     * @type {string}
     * @memberof InlineObject6
     */
    url?: string;
}
/**
 *
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     *
     * @type {CollectionsName}
     * @memberof InlineObject7
     */
    name?: CollectionsName;
}
/**
 *
 * @export
 * @interface InlineObject8
 */
export interface InlineObject8 {
    /**
     *
     * @type {string}
     * @memberof InlineObject8
     */
    start_at?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject8
     */
    end_at?: string;
    /**
     *
     * @type {DiscountsName}
     * @memberof InlineObject8
     */
    name: DiscountsName;
    /**
     *
     * @type {number}
     * @memberof InlineObject8
     */
    uses?: number;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject8
     */
    status?: boolean;
    /**
     *
     * @type {Array<DiscountsChannels>}
     * @memberof InlineObject8
     */
    channels?: Array<DiscountsChannels>;
}
/**
 *
 * @export
 * @interface InlineObject9
 */
export interface InlineObject9 {
    /**
     *
     * @type {string}
     * @memberof InlineObject9
     */
    start_at: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject9
     */
    end_at?: string;
    /**
     *
     * @type {number}
     * @memberof InlineObject9
     */
    priority?: number;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject9
     */
    stop_rules?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InlineObject9
     */
    status?: boolean;
    /**
     *
     * @type {DiscountsDiscountIdChannels}
     * @memberof InlineObject9
     */
    channels?: DiscountsDiscountIdChannels;
    /**
     *
     * @type {DiscountsDiscountIdRewards}
     * @memberof InlineObject9
     */
    rewards?: DiscountsDiscountIdRewards;
    /**
     *
     * @type {DiscountsDiscountIdSets}
     * @memberof InlineObject9
     */
    sets?: DiscountsDiscountIdSets;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    labels?: Array<string>;
    /**
     *
     * @type {Array<InlineResponse200Datasets>}
     * @memberof InlineResponse200
     */
    datasets?: Array<InlineResponse200Datasets>;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    month?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    sub_total?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    delivery_total?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    tax_total?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    order_total?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2001
     */
    discount_total?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {InlineResponse2002202003}
     * @memberof InlineResponse2002
     */
    _202003?: InlineResponse2002202003;
}
/**
 *
 * @export
 * @interface InlineResponse2002202003
 */
export interface InlineResponse2002202003 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002202003
     */
    label?: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002202003
     */
    _new?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002202003
     */
    returning?: number;
    /**
     *
     * @type {number}
     * @memberof InlineResponse2002202003
     */
    total?: number;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    date?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    sub_total?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    delivery_total?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    tax_total?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    order_total?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2003
     */
    discount_total?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     *
     * @type {InlineResponse2004Date}
     * @memberof InlineResponse2004
     */
    date?: InlineResponse2004Date;
}
/**
 *
 * @export
 * @interface InlineResponse2004Date
 */
export interface InlineResponse2004Date {
    /**
     *
     * @type {Array<InlineResponse2004DateProducts>}
     * @memberof InlineResponse2004Date
     */
    products?: Array<InlineResponse2004DateProducts>;
}
/**
 *
 * @export
 * @interface InlineResponse2004DateProducts
 */
export interface InlineResponse2004DateProducts {
    /**
     *
     * @type {number}
     * @memberof InlineResponse2004DateProducts
     */
    product_count?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004DateProducts
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004DateProducts
     */
    sku?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2004DateProducts
     */
    month?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    current_month?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    previous_month?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    today?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    yesterday?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    current_week?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2005
     */
    previous_week?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     *
     * @type {ShippingMethod}
     * @memberof InlineResponse2006
     */
    data?: ShippingMethod;
}
/**
 *
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     *
     * @type {Basket}
     * @memberof InlineResponse2007
     */
    data?: Basket;
}
/**
 *
 * @export
 * @interface InlineResponse200Datasets
 */
export interface InlineResponse200Datasets {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200Datasets
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200Datasets
     */
    backgroundColor?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200Datasets
     */
    yAxisId?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200Datasets
     */
    borderColor?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse200Datasets
     */
    data?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof InlineResponse200Datasets
     */
    fill?: boolean;
}
/**
 *
 * @export
 * @interface InlineResponse404
 */
export interface InlineResponse404 {
    /**
     *
     * @type {Order}
     * @memberof InlineResponse404
     */
    data?: Order;
}
/**
 *
 * @export
 * @interface InlineResponse4041
 */
export interface InlineResponse4041 {
    /**
     *
     * @type {Error}
     * @memberof InlineResponse4041
     */
    message?: Error;
}
/**
 *
 * @export
 * @interface InlineResponse422
 */
export interface InlineResponse422 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse422
     */
    handle?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse422
     */
    name?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4221
 */
export interface InlineResponse4221 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4221
     */
    group_id?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4221
     */
    name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4221
     */
    handle?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse42210
 */
export interface InlineResponse42210 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse42210
     */
    message?: string;
    /**
     *
     * @type {Array<InlineResponse42210Errors>}
     * @memberof InlineResponse42210
     */
    errors?: Array<InlineResponse42210Errors>;
}
/**
 *
 * @export
 * @interface InlineResponse42210Errors
 */
export interface InlineResponse42210Errors {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42210Errors
     */
    from?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42210Errors
     */
    to?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse42211
 */
export interface InlineResponse42211 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42211
     */
    name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42211
     */
    url?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42211
     */
    stock?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42211
     */
    family_id?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42211
     */
    price?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42211
     */
    sku?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse42212
 */
export interface InlineResponse42212 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42212
     */
    rate?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42212
     */
    zone_id?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42212
     */
    currency_id?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse42213
 */
export interface InlineResponse42213 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42213
     */
    users?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse42214
 */
export interface InlineResponse42214 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42214
     */
    name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42214
     */
    type?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse42215
 */
export interface InlineResponse42215 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42215
     */
    name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse42215
     */
    percentage?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4222
 */
export interface InlineResponse4222 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4222
     */
    name?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4223
 */
export interface InlineResponse4223 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4223
     */
    id?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4224
 */
export interface InlineResponse4224 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4224
     */
    name?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4224
     */
    lang?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4224
     */
    iso?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4225
 */
export interface InlineResponse4225 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4225
     */
    orders?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4225
     */
    field?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4225
     */
    value?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4226
 */
export interface InlineResponse4226 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4226
     */
    price_id?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4227
 */
export interface InlineResponse4227 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4227
     */
    quantity?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4227
     */
    line_total?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4227
     */
    unit_price?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4227
     */
    tax_rate?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4227
     */
    description?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4228
 */
export interface InlineResponse4228 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4228
     */
    attributes?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse4229
 */
export interface InlineResponse4229 {
    /**
     *
     * @type {Array<string>}
     * @memberof InlineResponse4229
     */
    collections?: Array<string>;
}
/**
 *
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    encoding?: string;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    content?: string;
}
/**
 *
 * @export
 * @interface InvoiceResponse
 */
export interface InvoiceResponse {
    /**
     *
     * @type {Invoice}
     * @memberof InvoiceResponse
     */
    data?: Invoice;
}
/**
 *
 * @export
 * @interface Language
 */
export interface Language {
    /**
     *
     * @type {string}
     * @memberof Language
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Language
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Language
     */
    lang?: string;
    /**
     *
     * @type {string}
     * @memberof Language
     */
    iso?: string;
    /**
     *
     * @type {boolean}
     * @memberof Language
     */
    _default?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Language
     */
    enabled?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Language
     */
    current?: boolean;
}
/**
 *
 * @export
 * @interface LanguageCollection
 */
export interface LanguageCollection extends PaginatedResponse {
    /**
     *
     * @type {Language}
     * @memberof LanguageCollection
     */
    data?: Language;
}
/**
 *
 * @export
 * @interface LanguageCollectionAllOf
 */
export interface LanguageCollectionAllOf {
    /**
     *
     * @type {Language}
     * @memberof LanguageCollectionAllOf
     */
    data?: Language;
}
/**
 *
 * @export
 * @interface LanguageResponse
 */
export interface LanguageResponse {
    /**
     *
     * @type {Language}
     * @memberof LanguageResponse
     */
    data?: Language;
}
/**
 *
 * @export
 * @interface Layout
 */
export interface Layout {
    /**
     *
     * @type {string}
     * @memberof Layout
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Layout
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Layout
     */
    handle: string;
    /**
     *
     * @type {string}
     * @memberof Layout
     */
    type: string;
}
/**
 *
 * @export
 * @interface LayoutCollection
 */
export interface LayoutCollection extends Layout {
    /**
     *
     * @type {Array<Language>}
     * @memberof LayoutCollection
     */
    data?: Array<Language>;
}
/**
 *
 * @export
 * @interface LayoutCollectionAllOf
 */
export interface LayoutCollectionAllOf {
    /**
     *
     * @type {Array<Language>}
     * @memberof LayoutCollectionAllOf
     */
    data?: Array<Language>;
}
/**
 *
 * @export
 * @interface LayoutResponse
 */
export interface LayoutResponse {
    /**
     *
     * @type {Layout}
     * @memberof LayoutResponse
     */
    data?: Layout;
}
/**
 *
 * @export
 * @interface Links
 */
export interface Links {
    /**
     *
     * @type {string}
     * @memberof Links
     */
    first?: string;
    /**
     *
     * @type {string}
     * @memberof Links
     */
    last?: string;
    /**
     *
     * @type {string}
     * @memberof Links
     */
    prev?: string | null;
    /**
     *
     * @type {string}
     * @memberof Links
     */
    next?: string | null;
}
/**
 *
 * @export
 * @interface LocalisedAttributeData
 */
export interface LocalisedAttributeData {
    /**
     *
     * @type {string}
     * @memberof LocalisedAttributeData
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof LocalisedAttributeData
     */
    description?: string;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     *
     * @type {string}
     * @memberof Message
     */
    message?: string;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     *
     * @type {ErrorError}
     * @memberof ModelError
     */
    error?: ErrorError;
}
/**
 *
 * @export
 * @interface Order
 */
export interface Order {
    /**
     *
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    display_id?: string;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    sub_total?: number;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    type?: string;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    delivery_total?: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    discount_total?: number;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    tax_total?: number;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    shipping_preference?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    shipping_method?: string;
    /**
     *
     * @type {number}
     * @memberof Order
     */
    order_total?: number;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    reference?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    customer_reference?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    invoice_reference?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    vat_no?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    tracking_no?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    dispatched_at?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    currency?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    customer_name?: string;
    /**
     *
     * @type {OrderContactDetails}
     * @memberof Order
     */
    contact_details?: OrderContactDetails;
    /**
     *
     * @type {Address}
     * @memberof Order
     */
    billing_details?: Address;
    /**
     *
     * @type {Address}
     * @memberof Order
     */
    shipping_details?: Address;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    created_at?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    updated_at?: string;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    notes?: string;
    /**
     *
     * @type {Array<object>}
     * @memberof Order
     */
    meta?: Array<object>;
    /**
     *
     * @type {BasketResponse}
     * @memberof Order
     */
    basket?: BasketResponse;
    /**
     *
     * @type {string}
     * @memberof Order
     */
    discounts?: string;
    /**
     *
     * @type {TransactionCollection}
     * @memberof Order
     */
    transactions?: TransactionCollection;
    /**
     *
     * @type {OrderLineCollection}
     * @memberof Order
     */
    lines?: OrderLineCollection;
    /**
     *
     * @type {OrderLineResponse}
     * @memberof Order
     */
    shipping?: OrderLineResponse;
    /**
     *
     * @type {ActivityLogCollection}
     * @memberof Order
     */
    logs?: ActivityLogCollection;
    /**
     *
     * @type {UserResponse}
     * @memberof Order
     */
    user?: UserResponse;
}
/**
 *
 * @export
 * @interface OrderCollection
 */
export interface OrderCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Order>}
     * @memberof OrderCollection
     */
    data?: Array<Order>;
}
/**
 *
 * @export
 * @interface OrderCollectionAllOf
 */
export interface OrderCollectionAllOf {
    /**
     *
     * @type {Array<Order>}
     * @memberof OrderCollectionAllOf
     */
    data?: Array<Order>;
}
/**
 *
 * @export
 * @interface OrderContactDetails
 */
export interface OrderContactDetails {
    /**
     *
     * @type {string}
     * @memberof OrderContactDetails
     */
    phone?: string;
    /**
     *
     * @type {string}
     * @memberof OrderContactDetails
     */
    email?: string;
}
/**
 *
 * @export
 * @interface OrderExport
 */
export interface OrderExport {
    /**
     *
     * @type {string}
     * @memberof OrderExport
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof OrderExport
     */
    content?: string;
}
/**
 *
 * @export
 * @interface OrderExportResponse
 */
export interface OrderExportResponse {
    /**
     *
     * @type {OrderExport}
     * @memberof OrderExportResponse
     */
    data?: OrderExport;
}
/**
 *
 * @export
 * @interface OrderLine
 */
export interface OrderLine {
    /**
     *
     * @type {string}
     * @memberof OrderLine
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof OrderLine
     */
    quantity?: number;
    /**
     *
     * @type {number}
     * @memberof OrderLine
     */
    line_total?: number;
    /**
     *
     * @type {number}
     * @memberof OrderLine
     */
    discount_total?: number;
    /**
     *
     * @type {number}
     * @memberof OrderLine
     */
    delivery_total?: number;
    /**
     *
     * @type {number}
     * @memberof OrderLine
     */
    unit_price?: number;
    /**
     *
     * @type {number}
     * @memberof OrderLine
     */
    unit_qty?: number;
    /**
     *
     * @type {number}
     * @memberof OrderLine
     */
    tax_total?: number;
    /**
     *
     * @type {number}
     * @memberof OrderLine
     */
    tax_rate?: number;
    /**
     *
     * @type {string}
     * @memberof OrderLine
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof OrderLine
     */
    option?: string;
    /**
     *
     * @type {string}
     * @memberof OrderLine
     */
    sku?: string;
    /**
     *
     * @type {boolean}
     * @memberof OrderLine
     */
    is_shipping?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OrderLine
     */
    is_manual?: boolean;
    /**
     *
     * @type {object}
     * @memberof OrderLine
     */
    meta?: object;
}
/**
 *
 * @export
 * @interface OrderLineCollection
 */
export interface OrderLineCollection {
    /**
     *
     * @type {Array<OrderLine>}
     * @memberof OrderLineCollection
     */
    data?: Array<OrderLine>;
}
/**
 *
 * @export
 * @interface OrderLineResponse
 */
export interface OrderLineResponse {
    /**
     *
     * @type {OrderLine}
     * @memberof OrderLineResponse
     */
    data?: OrderLine;
}
/**
 *
 * @export
 * @interface OrderResponse
 */
export interface OrderResponse {
    /**
     *
     * @type {Order}
     * @memberof OrderResponse
     */
    data?: Order;
}
/**
 *
 * @export
 * @interface OrderType
 */
export interface OrderType {
    /**
     *
     * @type {string}
     * @memberof OrderType
     */
    label?: string;
}
/**
 *
 * @export
 * @interface OrderTypeCollection
 */
export interface OrderTypeCollection {
    /**
     *
     * @type {Array<OrderType>}
     * @memberof OrderTypeCollection
     */
    data?: Array<OrderType>;
}
/**
 *
 * @export
 * @interface PaginatedResponse
 */
export interface PaginatedResponse {
    /**
     *
     * @type {Pagination}
     * @memberof PaginatedResponse
     */
    meta?: Pagination;
    /**
     *
     * @type {Links}
     * @memberof PaginatedResponse
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    current_page?: number;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    from?: number;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    last_page?: number;
    /**
     *
     * @type {string}
     * @memberof Pagination
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    per_page?: number;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    to?: number;
    /**
     *
     * @type {number}
     * @memberof Pagination
     */
    total?: number;
}
/**
 *
 * @export
 * @interface PaymentProvider
 */
export interface PaymentProvider {
    /**
     *
     * @type {string}
     * @memberof PaymentProvider
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentProvider
     */
    name?: string;
    /**
     * If supported
     * @type {string}
     * @memberof PaymentProvider
     */
    client_token?: string;
    /**
     * If supported
     * @type {string}
     * @memberof PaymentProvider
     */
    exires_at?: string;
}
/**
 *
 * @export
 * @interface PaymentProviderCollection
 */
export interface PaymentProviderCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<PaymentProvider>}
     * @memberof PaymentProviderCollection
     */
    data?: Array<PaymentProvider>;
}
/**
 *
 * @export
 * @interface PaymentProviderCollectionAllOf
 */
export interface PaymentProviderCollectionAllOf {
    /**
     *
     * @type {Array<PaymentProvider>}
     * @memberof PaymentProviderCollectionAllOf
     */
    data?: Array<PaymentProvider>;
}
/**
 *
 * @export
 * @interface PaymentProviderResponse
 */
export interface PaymentProviderResponse {
    /**
     *
     * @type {PaymentProvider}
     * @memberof PaymentProviderResponse
     */
    data?: PaymentProvider;
}
/**
 *
 * @export
 * @interface PaymentType
 */
export interface PaymentType {
    /**
     *
     * @type {string}
     * @memberof PaymentType
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentType
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentType
     */
    handle?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentType
     */
    driver?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentType
     */
    success_status?: string;
}
/**
 *
 * @export
 * @interface PaymentTypeCollection
 */
export interface PaymentTypeCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<PaymentType>}
     * @memberof PaymentTypeCollection
     */
    data?: Array<PaymentType>;
}
/**
 *
 * @export
 * @interface PaymentTypeCollectionAllOf
 */
export interface PaymentTypeCollectionAllOf {
    /**
     *
     * @type {Array<PaymentType>}
     * @memberof PaymentTypeCollectionAllOf
     */
    data?: Array<PaymentType>;
}
/**
 *
 * @export
 * @interface PaymentTypeResponse
 */
export interface PaymentTypeResponse {
    /**
     *
     * @type {PaymentType}
     * @memberof PaymentTypeResponse
     */
    data?: PaymentType;
}
/**
 *
 * @export
 * @interface Permission
 */
export interface Permission {
    /**
     *
     * @type {string}
     * @memberof Permission
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Permission
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Permission
     */
    guard_name?: string;
}
/**
 *
 * @export
 * @interface PermissionCollection
 */
export interface PermissionCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Permission>}
     * @memberof PermissionCollection
     */
    data?: Array<Permission>;
}
/**
 *
 * @export
 * @interface PermissionCollectionAllOf
 */
export interface PermissionCollectionAllOf {
    /**
     *
     * @type {Array<Permission>}
     * @memberof PermissionCollectionAllOf
     */
    data?: Array<Permission>;
}
/**
 *
 * @export
 * @interface PermissionResponse
 */
export interface PermissionResponse {
    /**
     *
     * @type {Permission}
     * @memberof PermissionResponse
     */
    data?: Permission;
}
/**
 *
 * @export
 * @interface Product
 */
export interface Product {
    /**
     *
     * @type {string}
     * @memberof Product
     */
    id?: string;
    /**
     * If this product is a draft, this will be populated
     * @type {string}
     * @memberof Product
     */
    drafted_at?: string;
    /**
     * Displays any variant option data
     * @type {object}
     * @memberof Product
     */
    option_data?: object;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    created_at?: string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    updated_at?: string;
    /**
     *
     * @type {ProductFamilyResponse}
     * @memberof Product
     */
    family?: ProductFamilyResponse;
    /**
     *
     * @type {ProductResponse}
     * @memberof Product
     */
    draft?: ProductResponse;
    /**
     *
     * @type {ProductResponse}
     * @memberof Product
     */
    published_parent?: ProductResponse;
    /**
     *
     * @type {AssetCollection}
     * @memberof Product
     */
    assets?: AssetCollection;
    /**
     *
     * @type {RouteCollection}
     * @memberof Product
     */
    routes?: RouteCollection;
    /**
     *
     * @type {ChannelCollection}
     * @memberof Product
     */
    channels?: ChannelCollection;
    /**
     *
     * @type {ProductVariantResponse}
     * @memberof Product
     */
    first_variant?: ProductVariantResponse;
    /**
     *
     * @type {AssetResponse}
     * @memberof Product
     */
    primary_asset?: AssetResponse;
    /**
     *
     * @type {CategoryCollection}
     * @memberof Product
     */
    categories?: CategoryCollection;
    /**
     *
     * @type {ProductVariantCollection}
     * @memberof Product
     */
    variants?: ProductVariantCollection;
    /**
     *
     * @type {DiscountCollection}
     * @memberof Product
     */
    discounts?: DiscountCollection;
    /**
     *
     * @type {CollectionCollection}
     * @memberof Product
     */
    collections?: CollectionCollection;
    /**
     *
     * @type {ProductAssociationCollection}
     * @memberof Product
     */
    associations?: ProductAssociationCollection;
    /**
     *
     * @type {VersionCollection}
     * @memberof Product
     */
    versions?: VersionCollection;
    /**
     *
     * @type {CustomerGroupCollection}
     * @memberof Product
     */
    customer_groups?: CustomerGroupCollection;
    /**
     *
     * @type {AttributeCollection}
     * @memberof Product
     */
    attributes?: AttributeCollection;
    /**
     *
     * @type {LayoutResponse}
     * @memberof Product
     */
    layout?: LayoutResponse;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    description?: string;
    /**
     *
     * @type {object}
     * @memberof Product
     */
    attribute_data?: object;
}
/**
 *
 * @export
 * @interface ProductAllOf
 */
export interface ProductAllOf {
    /**
     *
     * @type {string}
     * @memberof ProductAllOf
     */
    id?: string;
    /**
     * If this product is a draft, this will be populated
     * @type {string}
     * @memberof ProductAllOf
     */
    drafted_at?: string;
    /**
     * Displays any variant option data
     * @type {object}
     * @memberof ProductAllOf
     */
    option_data?: object;
    /**
     *
     * @type {string}
     * @memberof ProductAllOf
     */
    created_at?: string;
    /**
     *
     * @type {string}
     * @memberof ProductAllOf
     */
    updated_at?: string;
    /**
     *
     * @type {ProductFamilyResponse}
     * @memberof ProductAllOf
     */
    family?: ProductFamilyResponse;
    /**
     *
     * @type {ProductResponse}
     * @memberof ProductAllOf
     */
    draft?: ProductResponse;
    /**
     *
     * @type {ProductResponse}
     * @memberof ProductAllOf
     */
    published_parent?: ProductResponse;
    /**
     *
     * @type {AssetCollection}
     * @memberof ProductAllOf
     */
    assets?: AssetCollection;
    /**
     *
     * @type {RouteCollection}
     * @memberof ProductAllOf
     */
    routes?: RouteCollection;
    /**
     *
     * @type {ChannelCollection}
     * @memberof ProductAllOf
     */
    channels?: ChannelCollection;
    /**
     *
     * @type {ProductVariantResponse}
     * @memberof ProductAllOf
     */
    first_variant?: ProductVariantResponse;
    /**
     *
     * @type {AssetResponse}
     * @memberof ProductAllOf
     */
    primary_asset?: AssetResponse;
    /**
     *
     * @type {CategoryCollection}
     * @memberof ProductAllOf
     */
    categories?: CategoryCollection;
    /**
     *
     * @type {ProductVariantCollection}
     * @memberof ProductAllOf
     */
    variants?: ProductVariantCollection;
    /**
     *
     * @type {DiscountCollection}
     * @memberof ProductAllOf
     */
    discounts?: DiscountCollection;
    /**
     *
     * @type {CollectionCollection}
     * @memberof ProductAllOf
     */
    collections?: CollectionCollection;
    /**
     *
     * @type {ProductAssociationCollection}
     * @memberof ProductAllOf
     */
    associations?: ProductAssociationCollection;
    /**
     *
     * @type {VersionCollection}
     * @memberof ProductAllOf
     */
    versions?: VersionCollection;
    /**
     *
     * @type {CustomerGroupCollection}
     * @memberof ProductAllOf
     */
    customer_groups?: CustomerGroupCollection;
    /**
     *
     * @type {AttributeCollection}
     * @memberof ProductAllOf
     */
    attributes?: AttributeCollection;
    /**
     *
     * @type {LayoutResponse}
     * @memberof ProductAllOf
     */
    layout?: LayoutResponse;
}
/**
 *
 * @export
 * @interface ProductAssociation
 */
export interface ProductAssociation {
    /**
     *
     * @type {string}
     * @memberof ProductAssociation
     */
    id?: string;
    /**
     *
     * @type {ProductResponse}
     * @memberof ProductAssociation
     */
    association?: ProductResponse;
    /**
     *
     * @type {AssociationGroupResponse}
     * @memberof ProductAssociation
     */
    group?: AssociationGroupResponse;
}
/**
 *
 * @export
 * @interface ProductAssociationCollection
 */
export interface ProductAssociationCollection {
    /**
     *
     * @type {Array<ProductAssociation>}
     * @memberof ProductAssociationCollection
     */
    data?: Array<ProductAssociation>;
}
/**
 *
 * @export
 * @interface ProductAssociationResponse
 */
export interface ProductAssociationResponse {
    /**
     *
     * @type {ProductAssociation}
     * @memberof ProductAssociationResponse
     */
    data?: ProductAssociation;
}
/**
 *
 * @export
 * @interface ProductCollection
 */
export interface ProductCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Product>}
     * @memberof ProductCollection
     */
    data?: Array<Product>;
}
/**
 *
 * @export
 * @interface ProductCollectionAllOf
 */
export interface ProductCollectionAllOf {
    /**
     *
     * @type {Array<Product>}
     * @memberof ProductCollectionAllOf
     */
    data?: Array<Product>;
}
/**
 *
 * @export
 * @interface ProductFamily
 */
export interface ProductFamily {
    /**
     *
     * @type {string}
     * @memberof ProductFamily
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductFamily
     */
    name?: string;
    /**
     *
     * @type {AttributeCollection}
     * @memberof ProductFamily
     */
    attributes?: AttributeCollection;
}
/**
 *
 * @export
 * @interface ProductFamilyCollection
 */
export interface ProductFamilyCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<ProductFamily>}
     * @memberof ProductFamilyCollection
     */
    data?: Array<ProductFamily>;
}
/**
 *
 * @export
 * @interface ProductFamilyCollectionAllOf
 */
export interface ProductFamilyCollectionAllOf {
    /**
     *
     * @type {Array<ProductFamily>}
     * @memberof ProductFamilyCollectionAllOf
     */
    data?: Array<ProductFamily>;
}
/**
 *
 * @export
 * @interface ProductFamilyResponse
 */
export interface ProductFamilyResponse {
    /**
     *
     * @type {ProductFamily}
     * @memberof ProductFamilyResponse
     */
    data?: ProductFamily;
}
/**
 *
 * @export
 * @interface ProductRecommendation
 */
export interface ProductRecommendation {
    /**
     *
     * @type {string}
     * @memberof ProductRecommendation
     */
    id?: string;
    /**
     *
     * @type {ProductResponse}
     * @memberof ProductRecommendation
     */
    product?: ProductResponse;
}
/**
 *
 * @export
 * @interface ProductRecommendationCollection
 */
export interface ProductRecommendationCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<ProductRecommendation>}
     * @memberof ProductRecommendationCollection
     */
    data?: Array<ProductRecommendation>;
}
/**
 *
 * @export
 * @interface ProductRecommendationCollectionAllOf
 */
export interface ProductRecommendationCollectionAllOf {
    /**
     *
     * @type {Array<ProductRecommendation>}
     * @memberof ProductRecommendationCollectionAllOf
     */
    data?: Array<ProductRecommendation>;
}
/**
 *
 * @export
 * @interface ProductRecommendationResponse
 */
export interface ProductRecommendationResponse {
    /**
     *
     * @type {ProductRecommendation}
     * @memberof ProductRecommendationResponse
     */
    data?: ProductRecommendation;
}
/**
 *
 * @export
 * @interface ProductResponse
 */
export interface ProductResponse {
    /**
     *
     * @type {Product}
     * @memberof ProductResponse
     */
    data?: Product;
}
/**
 *
 * @export
 * @interface ProductTierPrice
 */
export interface ProductTierPrice {
    /**
     *
     * @type {string}
     * @memberof ProductTierPrice
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof ProductTierPrice
     */
    lower_limit?: number;
    /**
     *
     * @type {number}
     * @memberof ProductTierPrice
     */
    price?: number;
    /**
     *
     * @type {number}
     * @memberof ProductTierPrice
     */
    tax?: number;
    /**
     *
     * @type {CustomerGroupResponse}
     * @memberof ProductTierPrice
     */
    group?: CustomerGroupResponse;
}
/**
 *
 * @export
 * @interface ProductTierPriceCollection
 */
export interface ProductTierPriceCollection {
    /**
     *
     * @type {Array<ProductTierPrice>}
     * @memberof ProductTierPriceCollection
     */
    data?: Array<ProductTierPrice>;
}
/**
 *
 * @export
 * @interface ProductTierPriceResponse
 */
export interface ProductTierPriceResponse {
    /**
     *
     * @type {ProductTierPrice}
     * @memberof ProductTierPriceResponse
     */
    data?: ProductTierPrice;
}
/**
 *
 * @export
 * @interface ProductUpdateBody
 */
export interface ProductUpdateBody {
    /**
     *
     * @type {object}
     * @memberof ProductUpdateBody
     */
    attribute_data?: object;
    /**
     *
     * @type {string}
     * @memberof ProductUpdateBody
     */
    family_id?: string;
}
/**
 * ### Available includes  - products - basketLines - image - tax - customerPricing - tiers
 * @export
 * @interface ProductVariant
 */
export interface ProductVariant {
    /**
     *
     * @type {string}
     * @memberof ProductVariant
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductVariant
     */
    sku?: string;
    /**
     *
     * @type {string}
     * @memberof ProductVariant
     */
    backorder?: string;
    /**
     *
     * @type {boolean}
     * @memberof ProductVariant
     */
    requires_shipping?: boolean;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    price?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    factor_tax?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    unit_price?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    total_tax?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    unit_tax?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    unit_qty?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    min_qty?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    max_qty?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    min_batch?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    inventory?: number;
    /**
     *
     * @type {number}
     * @memberof ProductVariant
     */
    incoming?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProductVariant
     */
    group_pricing?: boolean;
    /**
     *
     * @type {ProductVariantWeight}
     * @memberof ProductVariant
     */
    weight?: ProductVariantWeight;
    /**
     *
     * @type {ProductVariantWeight}
     * @memberof ProductVariant
     */
    height?: ProductVariantWeight;
    /**
     *
     * @type {ProductVariantWeight}
     * @memberof ProductVariant
     */
    width?: ProductVariantWeight;
    /**
     *
     * @type {ProductVariantWeight}
     * @memberof ProductVariant
     */
    depth?: ProductVariantWeight;
    /**
     *
     * @type {ProductVariantWeight}
     * @memberof ProductVariant
     */
    volume?: ProductVariantWeight;
    /**
     *
     * @type {ProductResponse}
     * @memberof ProductVariant
     */
    product?: ProductResponse;
    /**
     *
     * @type {AssetResponse}
     * @memberof ProductVariant
     */
    image?: AssetResponse;
    /**
     *
     * @type {CustomerPriceCollection}
     * @memberof ProductVariant
     */
    customer_pricing?: CustomerPriceCollection;
    /**
     *
     * @type {TaxResponse}
     * @memberof ProductVariant
     */
    tax?: TaxResponse;
    /**
     *
     * @type {ProductTierPriceCollection}
     * @memberof ProductVariant
     */
    tiers?: ProductTierPriceCollection;
    /**
     *
     * @type {object}
     * @memberof ProductVariant
     */
    options?: object;
}
/**
 *
 * @export
 * @interface ProductVariantCollection
 */
export interface ProductVariantCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<ProductVariant>}
     * @memberof ProductVariantCollection
     */
    data?: Array<ProductVariant>;
}
/**
 *
 * @export
 * @interface ProductVariantCollectionAllOf
 */
export interface ProductVariantCollectionAllOf {
    /**
     *
     * @type {Array<ProductVariant>}
     * @memberof ProductVariantCollectionAllOf
     */
    data?: Array<ProductVariant>;
}
/**
 *
 * @export
 * @interface ProductVariantResponse
 */
export interface ProductVariantResponse {
    /**
     *
     * @type {ProductVariant}
     * @memberof ProductVariantResponse
     */
    data?: ProductVariant;
}
/**
 *
 * @export
 * @interface ProductVariantWeight
 */
export interface ProductVariantWeight {
    /**
     *
     * @type {string}
     * @memberof ProductVariantWeight
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof ProductVariantWeight
     */
    unit?: string;
}
/**
 *
 * @export
 * @interface ProductsName
 */
export interface ProductsName {
    /**
     *
     * @type {string}
     * @memberof ProductsName
     */
    en: string;
}
/**
 *
 * @export
 * @interface ProductsProductIdAssociationsRelations
 */
export interface ProductsProductIdAssociationsRelations {
    /**
     *
     * @type {string}
     * @memberof ProductsProductIdAssociationsRelations
     */
    association_id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductsProductIdAssociationsRelations
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ProductsProductIdCustomerGroupsGroups
 */
export interface ProductsProductIdCustomerGroupsGroups {
    /**
     *
     * @type {boolean}
     * @memberof ProductsProductIdCustomerGroupsGroups
     */
    visible: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProductsProductIdCustomerGroupsGroups
     */
    purchasable: boolean;
}
/**
 *
 * @export
 * @interface ProductsProductIdDuplicateRoutes
 */
export interface ProductsProductIdDuplicateRoutes {
    /**
     *
     * @type {string}
     * @memberof ProductsProductIdDuplicateRoutes
     */
    old?: string;
    /**
     *
     * @type {string}
     * @memberof ProductsProductIdDuplicateRoutes
     */
    _new?: string;
}
/**
 *
 * @export
 * @interface RecycleBin
 */
export interface RecycleBin {
    /**
     *
     * @type {string}
     * @memberof RecycleBin
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof RecycleBin
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof RecycleBin
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof RecycleBin
     */
    thumbnail?: string;
    /**
     *
     * @type {string}
     * @memberof RecycleBin
     */
    deleted_at?: string;
    /**
     *
     * @type {object}
     * @memberof RecycleBin
     */
    recyclable?: object;
}
/**
 *
 * @export
 * @interface RecycleBinCollection
 */
export interface RecycleBinCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<RecycleBin>}
     * @memberof RecycleBinCollection
     */
    data?: Array<RecycleBin>;
}
/**
 *
 * @export
 * @interface RecycleBinCollectionAllOf
 */
export interface RecycleBinCollectionAllOf {
    /**
     *
     * @type {Array<RecycleBin>}
     * @memberof RecycleBinCollectionAllOf
     */
    data?: Array<RecycleBin>;
}
/**
 *
 * @export
 * @interface RecycleBinResponse
 */
export interface RecycleBinResponse {
    /**
     *
     * @type {RecycleBin}
     * @memberof RecycleBinResponse
     */
    data?: RecycleBin;
}
/**
 *
 * @export
 * @interface ReorderAttributesUnprocessableResponse
 */
export interface ReorderAttributesUnprocessableResponse {
    /**
     *
     * @type {string}
     * @memberof ReorderAttributesUnprocessableResponse
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ReorderCategoryBody
 */
export interface ReorderCategoryBody {
    /**
     * before, after, over
     * @type {string}
     * @memberof ReorderCategoryBody
     */
    action?: string;
    /**
     * The ID of the category which moved
     * @type {string}
     * @memberof ReorderCategoryBody
     */
    moved_node: string;
    /**
     * The id of the category affected
     * @type {string}
     * @memberof ReorderCategoryBody
     */
    node: string;
}
/**
 *
 * @export
 * @interface ResolveBasketBody
 */
export interface ResolveBasketBody {
    /**
     *
     * @type {boolean}
     * @memberof ResolveBasketBody
     */
    merge?: boolean;
    /**
     *
     * @type {string}
     * @memberof ResolveBasketBody
     */
    basket_id: string;
}
/**
 *
 * @export
 * @interface Role
 */
export interface Role {
    /**
     *
     * @type {string}
     * @memberof Role
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Role
     */
    guard_name?: string;
    /**
     *
     * @type {PermissionCollection}
     * @memberof Role
     */
    permissions?: PermissionCollection;
}
/**
 *
 * @export
 * @interface RoleCollection
 */
export interface RoleCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Role>}
     * @memberof RoleCollection
     */
    data?: Array<Role>;
}
/**
 *
 * @export
 * @interface RoleCollectionAllOf
 */
export interface RoleCollectionAllOf {
    /**
     *
     * @type {Array<Role>}
     * @memberof RoleCollectionAllOf
     */
    data?: Array<Role>;
}
/**
 *
 * @export
 * @interface RoleResponse
 */
export interface RoleResponse {
    /**
     *
     * @type {Role}
     * @memberof RoleResponse
     */
    data?: Role;
}
/**
 *
 * @export
 * @interface Root
 */
export interface Root {
    /**
     *
     * @type {string}
     * @memberof Root
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof Root
     */
    locale?: string;
    /**
     *
     * @type {string}
     * @memberof Root
     */
    channel?: string;
    /**
     *
     * @type {string}
     * @memberof Root
     */
    currency?: string;
}
/**
 *
 * @export
 * @interface Route
 */
export interface Route {
    /**
     *
     * @type {string}
     * @memberof Route
     */
    id?: string;
    /**
     *
     * @type {boolean}
     * @memberof Route
     */
    _default?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Route
     */
    redirect?: boolean;
    /**
     *
     * @type {string}
     * @memberof Route
     */
    locale?: string;
    /**
     *
     * @type {string}
     * @memberof Route
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof Route
     */
    slug?: string;
    /**
     *
     * @type {string}
     * @memberof Route
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Route
     */
    type?: string;
    /**
     *
     * @type {RouteElement}
     * @memberof Route
     */
    element?: RouteElement;
}
/**
 *
 * @export
 * @interface RouteCollection
 */
export interface RouteCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Route>}
     * @memberof RouteCollection
     */
    data?: Array<Route>;
}
/**
 *
 * @export
 * @interface RouteCollectionAllOf
 */
export interface RouteCollectionAllOf {
    /**
     *
     * @type {Array<Route>}
     * @memberof RouteCollectionAllOf
     */
    data?: Array<Route>;
}
/**
 *
 * @export
 * @interface RouteElement
 */
export interface RouteElement {
    /**
     *
     * @type {RouteElementData}
     * @memberof RouteElement
     */
    data?: RouteElementData;
}
/**
 *
 * @export
 * @interface RouteElementData
 */
export interface RouteElementData {
    /**
     *
     * @type {string}
     * @memberof RouteElementData
     */
    id?: string;
}
/**
 *
 * @export
 * @interface RouteResponse
 */
export interface RouteResponse {
    /**
     *
     * @type {Route}
     * @memberof RouteResponse
     */
    data?: Route;
}
/**
 *
 * @export
 * @interface SaveBasketBody
 */
export interface SaveBasketBody {
    /**
     *
     * @type {string}
     * @memberof SaveBasketBody
     */
    name: string;
}
/**
 *
 * @export
 * @interface SavedBasket
 */
export interface SavedBasket {
    /**
     *
     * @type {string}
     * @memberof SavedBasket
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SavedBasket
     */
    name?: string;
    /**
     *
     * @type {BasketResponse}
     * @memberof SavedBasket
     */
    basket?: BasketResponse;
}
/**
 *
 * @export
 * @interface SavedBasketCollection
 */
export interface SavedBasketCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<SavedBasket>}
     * @memberof SavedBasketCollection
     */
    data?: Array<SavedBasket>;
}
/**
 *
 * @export
 * @interface SavedBasketCollectionAllOf
 */
export interface SavedBasketCollectionAllOf {
    /**
     *
     * @type {Array<SavedBasket>}
     * @memberof SavedBasketCollectionAllOf
     */
    data?: Array<SavedBasket>;
}
/**
 *
 * @export
 * @interface SavedBasketResponse
 */
export interface SavedBasketResponse {
    /**
     *
     * @type {SavedBasket}
     * @memberof SavedBasketResponse
     */
    data?: SavedBasket;
}
/**
 *
 * @export
 * @interface SavedSearch
 */
export interface SavedSearch {
    /**
     *
     * @type {string}
     * @memberof SavedSearch
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof SavedSearch
     */
    name?: string;
    /**
     *
     * @type {object}
     * @memberof SavedSearch
     */
    payload?: object;
}
/**
 *
 * @export
 * @interface SavedSearchCollection
 */
export interface SavedSearchCollection {
    /**
     *
     * @type {Array<SavedSearch>}
     * @memberof SavedSearchCollection
     */
    data?: Array<SavedSearch>;
}
/**
 *
 * @export
 * @interface SavedSearchResponse
 */
export interface SavedSearchResponse {
    /**
     *
     * @type {SavedSearch}
     * @memberof SavedSearchResponse
     */
    data?: SavedSearch;
}
/**
 *
 * @export
 * @interface Search
 */
export interface Search {
    /**
     *
     * @type {object}
     * @memberof Search
     */
    suggestions?: object;
    /**
     *
     * @type {SearchMeta}
     * @memberof Search
     */
    meta?: SearchMeta;
    /**
     *
     * @type {Array<object>}
     * @memberof Search
     */
    data?: Array<object>;
}
/**
 *
 * @export
 * @interface SearchMeta
 */
export interface SearchMeta {
    /**
     *
     * @type {string}
     * @memberof SearchMeta
     */
    sort?: string;
    /**
     *
     * @type {boolean}
     * @memberof SearchMeta
     */
    category_page?: boolean;
    /**
     *
     * @type {SearchMetaPagination}
     * @memberof SearchMeta
     */
    pagination?: SearchMetaPagination;
    /**
     *
     * @type {SearchMetaAggregation}
     * @memberof SearchMeta
     */
    aggregation?: SearchMetaAggregation;
}
/**
 *
 * @export
 * @interface SearchMetaAggregation
 */
export interface SearchMetaAggregation {
    /**
     *
     * @type {object}
     * @memberof SearchMetaAggregation
     */
    data?: object;
}
/**
 *
 * @export
 * @interface SearchMetaPagination
 */
export interface SearchMetaPagination {
    /**
     *
     * @type {SearchMetaPaginationData}
     * @memberof SearchMetaPagination
     */
    data?: SearchMetaPaginationData;
}
/**
 *
 * @export
 * @interface SearchMetaPaginationData
 */
export interface SearchMetaPaginationData {
    /**
     *
     * @type {number}
     * @memberof SearchMetaPaginationData
     */
    total?: number;
    /**
     *
     * @type {number}
     * @memberof SearchMetaPaginationData
     */
    count?: number;
    /**
     *
     * @type {number}
     * @memberof SearchMetaPaginationData
     */
    per_page?: number;
    /**
     *
     * @type {number}
     * @memberof SearchMetaPaginationData
     */
    current_page?: number;
    /**
     *
     * @type {number}
     * @memberof SearchMetaPaginationData
     */
    total_pages?: number;
}
/**
 *
 * @export
 * @interface Setting
 */
export interface Setting {
    /**
     *
     * @type {string}
     * @memberof Setting
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Setting
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Setting
     */
    handle?: string;
    /**
     *
     * @type {object}
     * @memberof Setting
     */
    content?: object;
}
/**
 *
 * @export
 * @interface SettingCollection
 */
export interface SettingCollection {
    /**
     *
     * @type {Array<Setting>}
     * @memberof SettingCollection
     */
    data?: Array<Setting>;
}
/**
 *
 * @export
 * @interface SettingResponse
 */
export interface SettingResponse {
    /**
     *
     * @type {Setting}
     * @memberof SettingResponse
     */
    data?: Setting;
}
/**
 *
 * @export
 * @interface ShippingMethod
 */
export interface ShippingMethod {
    /**
     *
     * @type {string}
     * @memberof ShippingMethod
     */
    type?: string;
    /**
     *
     * @type {object}
     * @memberof ShippingMethod
     */
    attribute_data?: object;
    /**
     *
     * @type {string}
     * @memberof ShippingMethod
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingMethod
     */
    description?: string;
}
/**
 *
 * @export
 * @interface ShippingMethodAllOf
 */
export interface ShippingMethodAllOf {
    /**
     *
     * @type {string}
     * @memberof ShippingMethodAllOf
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ShippingMethodCollection
 */
export interface ShippingMethodCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<ShippingMethod>}
     * @memberof ShippingMethodCollection
     */
    data?: Array<ShippingMethod>;
}
/**
 *
 * @export
 * @interface ShippingMethodCollectionAllOf
 */
export interface ShippingMethodCollectionAllOf {
    /**
     *
     * @type {Array<ShippingMethod>}
     * @memberof ShippingMethodCollectionAllOf
     */
    data?: Array<ShippingMethod>;
}
/**
 *
 * @export
 * @interface ShippingMethodResponse
 */
export interface ShippingMethodResponse {
    /**
     *
     * @type {ShippingMethod}
     * @memberof ShippingMethodResponse
     */
    data?: ShippingMethod;
}
/**
 * ### Available Includes  - method - zone - currency - customer_groups
 * @export
 * @interface ShippingPrice
 */
export interface ShippingPrice {
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof ShippingPrice
     */
    rate?: number;
    /**
     *
     * @type {number}
     * @memberof ShippingPrice
     */
    tax?: number;
    /**
     *
     * @type {boolean}
     * @memberof ShippingPrice
     */
    fixed?: boolean;
    /**
     * Minimum basket total to be eligible
     * @type {number}
     * @memberof ShippingPrice
     */
    min_basket?: number;
    /**
     *
     * @type {number}
     * @memberof ShippingPrice
     */
    min_basket_tax?: number;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    min_weight?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    weight_unit?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    min_height?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    height_unit?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    min_width?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    width_unit?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    min_depth?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    depth_unit?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    min_volume?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingPrice
     */
    volume_unit?: string;
    /**
     *
     * @type {ShippingMethodResponse}
     * @memberof ShippingPrice
     */
    method?: ShippingMethodResponse;
    /**
     *
     * @type {ShippingZoneResponse}
     * @memberof ShippingPrice
     */
    zone?: ShippingZoneResponse;
}
/**
 *
 * @export
 * @interface ShippingPriceCollection
 */
export interface ShippingPriceCollection {
    /**
     *
     * @type {Array<ShippingPrice>}
     * @memberof ShippingPriceCollection
     */
    data?: Array<ShippingPrice>;
}
/**
 *
 * @export
 * @interface ShippingPriceResponse
 */
export interface ShippingPriceResponse {
    /**
     *
     * @type {ShippingPrice}
     * @memberof ShippingPriceResponse
     */
    data?: ShippingPrice;
}
/**
 *
 * @export
 * @interface ShippingZone
 */
export interface ShippingZone {
    /**
     *
     * @type {string}
     * @memberof ShippingZone
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ShippingZone
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ShippingZoneCollection
 */
export interface ShippingZoneCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<ShippingZone>}
     * @memberof ShippingZoneCollection
     */
    data?: Array<ShippingZone>;
}
/**
 *
 * @export
 * @interface ShippingZoneCollectionAllOf
 */
export interface ShippingZoneCollectionAllOf {
    /**
     *
     * @type {Array<ShippingZone>}
     * @memberof ShippingZoneCollectionAllOf
     */
    data?: Array<ShippingZone>;
}
/**
 *
 * @export
 * @interface ShippingZoneResponse
 */
export interface ShippingZoneResponse {
    /**
     *
     * @type {ShippingZone}
     * @memberof ShippingZoneResponse
     */
    data?: ShippingZone;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    name?: string;
}
/**
 *
 * @export
 * @interface TagCollection
 */
export interface TagCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Tag>}
     * @memberof TagCollection
     */
    data?: Array<Tag>;
}
/**
 *
 * @export
 * @interface TagCollectionAllOf
 */
export interface TagCollectionAllOf {
    /**
     *
     * @type {Array<Tag>}
     * @memberof TagCollectionAllOf
     */
    data?: Array<Tag>;
}
/**
 *
 * @export
 * @interface TagResponse
 */
export interface TagResponse {
    /**
     *
     * @type {Tag}
     * @memberof TagResponse
     */
    data?: Tag;
}
/**
 *
 * @export
 * @interface Tax
 */
export interface Tax {
    /**
     *
     * @type {string}
     * @memberof Tax
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Tax
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof Tax
     */
    percentage?: number;
    /**
     *
     * @type {boolean}
     * @memberof Tax
     */
    _default?: boolean;
}
/**
 *
 * @export
 * @interface TaxCollection
 */
export interface TaxCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Tax>}
     * @memberof TaxCollection
     */
    data?: Array<Tax>;
}
/**
 *
 * @export
 * @interface TaxCollectionAllOf
 */
export interface TaxCollectionAllOf {
    /**
     *
     * @type {Array<Tax>}
     * @memberof TaxCollectionAllOf
     */
    data?: Array<Tax>;
}
/**
 *
 * @export
 * @interface TaxResponse
 */
export interface TaxResponse {
    /**
     *
     * @type {Tax}
     * @memberof TaxResponse
     */
    data?: Tax;
}
/**
 *
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    transaction_id?: string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    merchant?: string;
    /**
     *
     * @type {number}
     * @memberof Transaction
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    card_type?: string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    last_four?: string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    provider?: string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    driver?: string;
    /**
     *
     * @type {boolean}
     * @memberof Transaction
     */
    success?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Transaction
     */
    refund?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Transaction
     */
    address_matched?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Transaction
     */
    cvc_matched?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Transaction
     */
    threed_secure?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Transaction
     */
    postcode_matched?: boolean;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    notes?: string;
    /**
     *
     * @type {string}
     * @memberof Transaction
     */
    created_at?: string;
}
/**
 *
 * @export
 * @interface TransactionCollection
 */
export interface TransactionCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<Transaction>}
     * @memberof TransactionCollection
     */
    data?: Array<Transaction>;
}
/**
 *
 * @export
 * @interface TransactionCollectionAllOf
 */
export interface TransactionCollectionAllOf {
    /**
     *
     * @type {Array<Transaction>}
     * @memberof TransactionCollectionAllOf
     */
    data?: Array<Transaction>;
}
/**
 *
 * @export
 * @interface TransactionResponse
 */
export interface TransactionResponse {
    /**
     *
     * @type {Transaction}
     * @memberof TransactionResponse
     */
    data?: Transaction;
}
/**
 *
 * @export
 * @interface Unauthenticated
 */
export interface Unauthenticated {
    /**
     *
     * @type {string}
     * @memberof Unauthenticated
     */
    error?: string;
}
/**
 *
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
    /**
     *
     * @type {string}
     * @memberof Unauthorized
     */
    error?: string;
}
/**
 *
 * @export
 * @interface UpdateAssetBody
 */
export interface UpdateAssetBody {
    /**
     *
     * @type {Array<UpdateAssetBodyAssets>}
     * @memberof UpdateAssetBody
     */
    assets?: Array<UpdateAssetBodyAssets>;
}
/**
 *
 * @export
 * @interface UpdateAssetBodyAssets
 */
export interface UpdateAssetBodyAssets {
    /**
     *
     * @type {string}
     * @memberof UpdateAssetBodyAssets
     */
    id: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateAssetBodyAssets
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateAttributeBody
 */
export interface UpdateAttributeBody {
    /**
     *
     * @type {object}
     * @memberof UpdateAttributeBody
     */
    attributes: object;
}
/**
 *
 * @export
 * @interface UpdateAttributesBody
 */
export interface UpdateAttributesBody {
    /**
     *
     * @type {object}
     * @memberof UpdateAttributesBody
     */
    attributes: object;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
}
/**
 *
 * @export
 * @interface UserCollection
 */
export interface UserCollection extends PaginatedResponse {
    /**
     *
     * @type {Array<object>}
     * @memberof UserCollection
     */
    data?: Array<object>;
}
/**
 *
 * @export
 * @interface UserCollectionAllOf
 */
export interface UserCollectionAllOf {
    /**
     *
     * @type {Array<object>}
     * @memberof UserCollectionAllOf
     */
    data?: Array<object>;
}
/**
 *
 * @export
 * @interface UserFields
 */
export interface UserFields {
    /**
     *
     * @type {object}
     * @memberof UserFields
     */
    fields?: object;
}
/**
 *
 * @export
 * @interface UserFieldsResponse
 */
export interface UserFieldsResponse {
    /**
     *
     * @type {UserFields}
     * @memberof UserFieldsResponse
     */
    data?: UserFields;
}
/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     *
     * @type {User}
     * @memberof UserResponse
     */
    data?: User;
}
/**
 *
 * @export
 * @interface VersionCollection
 */
export interface VersionCollection {
    /**
     *
     * @type {object}
     * @memberof VersionCollection
     */
    data?: object;
}
/**
 * AssetsApi - axios parameter creator
 * @export
 */
export declare const AssetsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Upload an asset to a model
     * @summary Create Asset
     * @param {string} [mimeType] Required when passing url
     * @param {string} [url] External URL to file to upload, required without file
     * @param {object} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssets(mimeType?: string, url?: string, file?: object, options?: any): RequestArgs;
    /**
     * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
     * @summary Detach an asset from it\'s model
     * @param {string} assetId The hashed asset id
     * @param {string} ownerId The hashed owner id
     * @param {AssetDetachBody} [assetDetachBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssetsAssetIdDetachOwnerId(assetId: string, ownerId: string, assetDetachBody?: AssetDetachBody, options?: any): RequestArgs;
    /**
     * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
     * @summary Simple asset upload
     * @param {object} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssetsSimple(file: object, options?: any): RequestArgs;
    /**
     * Update all assets in the given array of ids.
     * @summary Update Assets
     * @param {UpdateAssetBody} [updateAssetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAssets(updateAssetBody?: UpdateAssetBody, options?: any): RequestArgs;
};
/**
 * AssetsApi - functional programming interface
 * @export
 */
export declare const AssetsApiFp: (configuration?: Configuration) => {
    /**
     * Upload an asset to a model
     * @summary Create Asset
     * @param {string} [mimeType] Required when passing url
     * @param {string} [url] External URL to file to upload, required without file
     * @param {object} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssets(mimeType?: string, url?: string, file?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetResponse>;
    /**
     * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
     * @summary Detach an asset from it\'s model
     * @param {string} assetId The hashed asset id
     * @param {string} ownerId The hashed owner id
     * @param {AssetDetachBody} [assetDetachBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssetsAssetIdDetachOwnerId(assetId: string, ownerId: string, assetDetachBody?: AssetDetachBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
     * @summary Simple asset upload
     * @param {object} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssetsSimple(file: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetSimple>;
    /**
     * Update all assets in the given array of ids.
     * @summary Update Assets
     * @param {UpdateAssetBody} [updateAssetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAssets(updateAssetBody?: UpdateAssetBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetResponse>;
};
/**
 * AssetsApi - factory interface
 * @export
 */
export declare const AssetsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Upload an asset to a model
     * @summary Create Asset
     * @param {string} [mimeType] Required when passing url
     * @param {string} [url] External URL to file to upload, required without file
     * @param {object} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssets(mimeType?: string, url?: string, file?: object, options?: any): AxiosPromise<AssetResponse>;
    /**
     * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
     * @summary Detach an asset from it\'s model
     * @param {string} assetId The hashed asset id
     * @param {string} ownerId The hashed owner id
     * @param {AssetDetachBody} [assetDetachBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssetsAssetIdDetachOwnerId(assetId: string, ownerId: string, assetDetachBody?: AssetDetachBody, options?: any): AxiosPromise<void>;
    /**
     * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
     * @summary Simple asset upload
     * @param {object} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAssetsSimple(file: object, options?: any): AxiosPromise<AssetSimple>;
    /**
     * Update all assets in the given array of ids.
     * @summary Update Assets
     * @param {UpdateAssetBody} [updateAssetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAssets(updateAssetBody?: UpdateAssetBody, options?: any): AxiosPromise<AssetResponse>;
};
/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export declare class AssetsApi extends BaseAPI {
    /**
     * Upload an asset to a model
     * @summary Create Asset
     * @param {string} [mimeType] Required when passing url
     * @param {string} [url] External URL to file to upload, required without file
     * @param {object} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    postAssets(mimeType?: string, url?: string, file?: object, options?: any): AxiosPromise<AssetResponse>;
    /**
     * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
     * @summary Detach an asset from it\'s model
     * @param {string} assetId The hashed asset id
     * @param {string} ownerId The hashed owner id
     * @param {AssetDetachBody} [assetDetachBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    postAssetsAssetIdDetachOwnerId(assetId: string, ownerId: string, assetDetachBody?: AssetDetachBody, options?: any): AxiosPromise<void>;
    /**
     * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
     * @summary Simple asset upload
     * @param {object} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    postAssetsSimple(file: object, options?: any): AxiosPromise<AssetSimple>;
    /**
     * Update all assets in the given array of ids.
     * @summary Update Assets
     * @param {UpdateAssetBody} [updateAssetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    putAssets(updateAssetBody?: UpdateAssetBody, options?: any): AxiosPromise<AssetResponse>;
}
/**
 * AssociationsApi - axios parameter creator
 * @export
 */
export declare const AssociationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a paginated response of association groups available in the system
     * @summary Paginated array of association groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssociationsGroups(options?: any): RequestArgs;
};
/**
 * AssociationsApi - functional programming interface
 * @export
 */
export declare const AssociationsApiFp: (configuration?: Configuration) => {
    /**
     * Returns a paginated response of association groups available in the system
     * @summary Paginated array of association groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssociationsGroups(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssociationGroupCollection>;
};
/**
 * AssociationsApi - factory interface
 * @export
 */
export declare const AssociationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a paginated response of association groups available in the system
     * @summary Paginated array of association groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssociationsGroups(options?: any): AxiosPromise<AssociationGroupCollection>;
};
/**
 * AssociationsApi - object-oriented interface
 * @export
 * @class AssociationsApi
 * @extends {BaseAPI}
 */
export declare class AssociationsApi extends BaseAPI {
    /**
     * Returns a paginated response of association groups available in the system
     * @summary Paginated array of association groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssociationsApi
     */
    getAssociationsGroups(options?: any): AxiosPromise<AssociationGroupCollection>;
}
/**
 * AttributesApi - axios parameter creator
 * @export
 */
export declare const AttributesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes an attribute group
     * @summary Delete an attribute group
     * @param {string} attributeGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAttributeGroupsAttributeGroupId(attributeGroupId: string, options?: any): RequestArgs;
    /**
     * Delete an attribute.
     * @summary Delete an attribute
     * @param {string} attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAttributesAttributeId(attributeId: string, options?: any): RequestArgs;
    /**
     * Returns a paginated list of available attribute groups
     * @summary Paginated list of Attribute Groups
     * @param {boolean} [allRecords] Will skip pagination and return all records
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributeGroups(allRecords?: boolean, include?: string, options?: any): RequestArgs;
    /**
     * Gets a single attribute group
     * @summary Get a single attribute group
     * @param {string} attributeGroupId
     * @param {number} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributeGroupsAttributeGroupId(attributeGroupId: string, include?: number, options?: any): RequestArgs;
    /**
     * Return a paged array of attributes
     * @summary Get Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributes(options?: any): RequestArgs;
    /**
     * Returns an attribute from a given ID.
     * @summary Get an attribute
     * @param {string} attributeId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributesAttributeId(attributeId: string, include?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Create an Attribute Group
     * @param {CreateAttributeGroupBodyName} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAttributeGroups(name?: CreateAttributeGroupBodyName, options?: any): RequestArgs;
    /**
     * Create a new attribute
     * @summary Create Attribute
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAttributes(inlineObject2?: InlineObject2, options?: any): RequestArgs;
    /**
     * Updates an attribute group.
     * @summary Update an attribute group
     * @param {string} attributeGroupId
     * @param {AttributeGroup} [attributeGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributeGroupsAttributeGroupId(attributeGroupId: string, attributeGroup?: AttributeGroup, options?: any): RequestArgs;
    /**
     * Sends a request to reorder the attribute groups in the system
     * @summary Reorder attribute groups
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributeGroupsReorder(attributesReorderBody?: AttributesReorderBody, options?: any): RequestArgs;
    /**
     * Updates an attribute from a given ID.
     * @summary Update an attribute
     * @param {string} attributeId
     * @param {Attribute} [attribute]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributesAttributeId(attributeId: string, attribute?: Attribute, options?: any): RequestArgs;
    /**
     * Allows you to reorder a target category in relation to another.
     * @summary Update request to reorder attributes
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributesOrder(attributesReorderBody?: AttributesReorderBody, options?: any): RequestArgs;
};
/**
 * AttributesApi - functional programming interface
 * @export
 */
export declare const AttributesApiFp: (configuration?: Configuration) => {
    /**
     * Deletes an attribute group
     * @summary Delete an attribute group
     * @param {string} attributeGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAttributeGroupsAttributeGroupId(attributeGroupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Delete an attribute.
     * @summary Delete an attribute
     * @param {string} attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAttributesAttributeId(attributeId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Returns a paginated list of available attribute groups
     * @summary Paginated list of Attribute Groups
     * @param {boolean} [allRecords] Will skip pagination and return all records
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributeGroups(allRecords?: boolean, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupCollection>;
    /**
     * Gets a single attribute group
     * @summary Get a single attribute group
     * @param {string} attributeGroupId
     * @param {number} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributeGroupsAttributeGroupId(attributeGroupId: string, include?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupResponse>;
    /**
     * Return a paged array of attributes
     * @summary Get Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributes(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeCollection>;
    /**
     * Returns an attribute from a given ID.
     * @summary Get an attribute
     * @param {string} attributeId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributesAttributeId(attributeId: string, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResponse>;
    /**
     *
     * @summary Create an Attribute Group
     * @param {CreateAttributeGroupBodyName} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAttributeGroups(name?: CreateAttributeGroupBodyName, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupResponse>;
    /**
     * Create a new attribute
     * @summary Create Attribute
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAttributes(inlineObject2?: InlineObject2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResponse>;
    /**
     * Updates an attribute group.
     * @summary Update an attribute group
     * @param {string} attributeGroupId
     * @param {AttributeGroup} [attributeGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributeGroupsAttributeGroupId(attributeGroupId: string, attributeGroup?: AttributeGroup, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeGroupResponse>;
    /**
     * Sends a request to reorder the attribute groups in the system
     * @summary Reorder attribute groups
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributeGroupsReorder(attributesReorderBody?: AttributesReorderBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Updates an attribute from a given ID.
     * @summary Update an attribute
     * @param {string} attributeId
     * @param {Attribute} [attribute]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributesAttributeId(attributeId: string, attribute?: Attribute, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResponse>;
    /**
     * Allows you to reorder a target category in relation to another.
     * @summary Update request to reorder attributes
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributesOrder(attributesReorderBody?: AttributesReorderBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * AttributesApi - factory interface
 * @export
 */
export declare const AttributesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes an attribute group
     * @summary Delete an attribute group
     * @param {string} attributeGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAttributeGroupsAttributeGroupId(attributeGroupId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete an attribute.
     * @summary Delete an attribute
     * @param {string} attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAttributesAttributeId(attributeId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of available attribute groups
     * @summary Paginated list of Attribute Groups
     * @param {boolean} [allRecords] Will skip pagination and return all records
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributeGroups(allRecords?: boolean, include?: string, options?: any): AxiosPromise<AttributeGroupCollection>;
    /**
     * Gets a single attribute group
     * @summary Get a single attribute group
     * @param {string} attributeGroupId
     * @param {number} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributeGroupsAttributeGroupId(attributeGroupId: string, include?: number, options?: any): AxiosPromise<AttributeGroupResponse>;
    /**
     * Return a paged array of attributes
     * @summary Get Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributes(options?: any): AxiosPromise<AttributeCollection>;
    /**
     * Returns an attribute from a given ID.
     * @summary Get an attribute
     * @param {string} attributeId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttributesAttributeId(attributeId: string, include?: string, options?: any): AxiosPromise<AttributeResponse>;
    /**
     *
     * @summary Create an Attribute Group
     * @param {CreateAttributeGroupBodyName} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAttributeGroups(name?: CreateAttributeGroupBodyName, options?: any): AxiosPromise<AttributeGroupResponse>;
    /**
     * Create a new attribute
     * @summary Create Attribute
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAttributes(inlineObject2?: InlineObject2, options?: any): AxiosPromise<AttributeResponse>;
    /**
     * Updates an attribute group.
     * @summary Update an attribute group
     * @param {string} attributeGroupId
     * @param {AttributeGroup} [attributeGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributeGroupsAttributeGroupId(attributeGroupId: string, attributeGroup?: AttributeGroup, options?: any): AxiosPromise<AttributeGroupResponse>;
    /**
     * Sends a request to reorder the attribute groups in the system
     * @summary Reorder attribute groups
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributeGroupsReorder(attributesReorderBody?: AttributesReorderBody, options?: any): AxiosPromise<void>;
    /**
     * Updates an attribute from a given ID.
     * @summary Update an attribute
     * @param {string} attributeId
     * @param {Attribute} [attribute]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributesAttributeId(attributeId: string, attribute?: Attribute, options?: any): AxiosPromise<AttributeResponse>;
    /**
     * Allows you to reorder a target category in relation to another.
     * @summary Update request to reorder attributes
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAttributesOrder(attributesReorderBody?: AttributesReorderBody, options?: any): AxiosPromise<void>;
};
/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
export declare class AttributesApi extends BaseAPI {
    /**
     * Deletes an attribute group
     * @summary Delete an attribute group
     * @param {string} attributeGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    deleteAttributeGroupsAttributeGroupId(attributeGroupId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete an attribute.
     * @summary Delete an attribute
     * @param {string} attributeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    deleteAttributesAttributeId(attributeId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of available attribute groups
     * @summary Paginated list of Attribute Groups
     * @param {boolean} [allRecords] Will skip pagination and return all records
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAttributeGroups(allRecords?: boolean, include?: string, options?: any): AxiosPromise<AttributeGroupCollection>;
    /**
     * Gets a single attribute group
     * @summary Get a single attribute group
     * @param {string} attributeGroupId
     * @param {number} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAttributeGroupsAttributeGroupId(attributeGroupId: string, include?: number, options?: any): AxiosPromise<AttributeGroupResponse>;
    /**
     * Return a paged array of attributes
     * @summary Get Attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAttributes(options?: any): AxiosPromise<AttributeCollection>;
    /**
     * Returns an attribute from a given ID.
     * @summary Get an attribute
     * @param {string} attributeId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAttributesAttributeId(attributeId: string, include?: string, options?: any): AxiosPromise<AttributeResponse>;
    /**
     *
     * @summary Create an Attribute Group
     * @param {CreateAttributeGroupBodyName} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    postAttributeGroups(name?: CreateAttributeGroupBodyName, options?: any): AxiosPromise<AttributeGroupResponse>;
    /**
     * Create a new attribute
     * @summary Create Attribute
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    postAttributes(inlineObject2?: InlineObject2, options?: any): AxiosPromise<AttributeResponse>;
    /**
     * Updates an attribute group.
     * @summary Update an attribute group
     * @param {string} attributeGroupId
     * @param {AttributeGroup} [attributeGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    putAttributeGroupsAttributeGroupId(attributeGroupId: string, attributeGroup?: AttributeGroup, options?: any): AxiosPromise<AttributeGroupResponse>;
    /**
     * Sends a request to reorder the attribute groups in the system
     * @summary Reorder attribute groups
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    putAttributeGroupsReorder(attributesReorderBody?: AttributesReorderBody, options?: any): AxiosPromise<void>;
    /**
     * Updates an attribute from a given ID.
     * @summary Update an attribute
     * @param {string} attributeId
     * @param {Attribute} [attribute]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    putAttributesAttributeId(attributeId: string, attribute?: Attribute, options?: any): AxiosPromise<AttributeResponse>;
    /**
     * Allows you to reorder a target category in relation to another.
     * @summary Update request to reorder attributes
     * @param {AttributesReorderBody} [attributesReorderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    putAttributesOrder(attributesReorderBody?: AttributesReorderBody, options?: any): AxiosPromise<void>;
}
/**
 * BasketsApi - axios parameter creator
 * @export
 */
export declare const BasketsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketLines(options?: any): RequestArgs;
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketId(basketId: string, options?: any): RequestArgs;
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdDiscounts(basketId: string, options?: any): RequestArgs;
    /**
     * Removes a user from a basket and turns it into a guest basket  > This endpoint will be deprecated in 0.3.0
     * @summary Remove user
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdUser(basketId: string, options?: any): RequestArgs;
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBaskets(options?: any): RequestArgs;
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsBasketId(basketId: string, options?: any): RequestArgs;
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsCurrent(options?: any): RequestArgs;
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsSaved(options?: any): RequestArgs;
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketLines(createBasketLinesBody?: CreateBasketLinesBody, options?: any): RequestArgs;
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBaskets(createBasketBody?: CreateBasketBody, options?: any): RequestArgs;
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdClaim(basketId: string, options?: any): RequestArgs;
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdMeta(basketId: string, addBasketMetaBody?: AddBasketMetaBody, options?: any): RequestArgs;
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdSave(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): RequestArgs;
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {ResolveBasketBody} [resolveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsResolve(resolveBasketBody?: ResolveBasketBody, options?: any): RequestArgs;
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineId(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): RequestArgs;
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdAdd(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): RequestArgs;
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdRemove(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): RequestArgs;
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketId(basketId: string, options?: any): RequestArgs;
    /**
     * Attach a user to a basket.  > This endpoint will be deprecated in version 0.3.0
     * @summary Add user
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketIdUser(basketId: string, options?: any): RequestArgs;
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsSavedBasketId(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): RequestArgs;
};
/**
 * BasketsApi - functional programming interface
 * @export
 */
export declare const BasketsApiFp: (configuration?: Configuration) => {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketLines(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>;
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketId(basketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdDiscounts(basketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Removes a user from a basket and turns it into a guest basket  > This endpoint will be deprecated in 0.3.0
     * @summary Remove user
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdUser(basketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>;
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBaskets(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketCollection>;
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsBasketId(basketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsCurrent(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsSaved(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedBasketCollection>;
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketLines(createBasketLinesBody?: CreateBasketLinesBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBaskets(createBasketBody?: CreateBasketBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdClaim(basketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdMeta(basketId: string, addBasketMetaBody?: AddBasketMetaBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Basket>;
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdSave(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {ResolveBasketBody} [resolveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsResolve(resolveBasketBody?: ResolveBasketBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineId(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdAdd(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdRemove(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketId(basketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasketResponse>;
    /**
     * Attach a user to a basket.  > This endpoint will be deprecated in version 0.3.0
     * @summary Add user
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketIdUser(basketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Basket>;
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsSavedBasketId(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedBasketResponse>;
};
/**
 * BasketsApi - factory interface
 * @export
 */
export declare const BasketsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketLines(options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketId(basketId: string, options?: any): AxiosPromise<void>;
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdDiscounts(basketId: string, options?: any): AxiosPromise<void>;
    /**
     * Removes a user from a basket and turns it into a guest basket  > This endpoint will be deprecated in 0.3.0
     * @summary Remove user
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBasketsBasketIdUser(basketId: string, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBaskets(options?: any): AxiosPromise<BasketCollection>;
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsBasketId(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsCurrent(options?: any): AxiosPromise<BasketResponse>;
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBasketsSaved(options?: any): AxiosPromise<SavedBasketCollection>;
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketLines(createBasketLinesBody?: CreateBasketLinesBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBaskets(createBasketBody?: CreateBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdClaim(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdMeta(basketId: string, addBasketMetaBody?: AddBasketMetaBody, options?: any): AxiosPromise<Basket>;
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsBasketIdSave(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {ResolveBasketBody} [resolveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postBasketsResolve(resolveBasketBody?: ResolveBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineId(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdAdd(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketLinesBasketLineIdRemove(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketId(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Attach a user to a basket.  > This endpoint will be deprecated in version 0.3.0
     * @summary Add user
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsBasketIdUser(basketId: string, options?: any): AxiosPromise<Basket>;
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putBasketsSavedBasketId(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): AxiosPromise<SavedBasketResponse>;
};
/**
 * BasketsApi - object-oriented interface
 * @export
 * @class BasketsApi
 * @extends {BaseAPI}
 */
export declare class BasketsApi extends BaseAPI {
    /**
     * Removes basket lines from a basket
     * @summary Delete basket lines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketLines(options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Deletes a basket
     * @summary Delete a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketsBasketId(basketId: string, options?: any): AxiosPromise<void>;
    /**
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one.
     * @summary Remove discount
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketsBasketIdDiscounts(basketId: string, options?: any): AxiosPromise<void>;
    /**
     * Removes a user from a basket and turns it into a guest basket  > This endpoint will be deprecated in 0.3.0
     * @summary Remove user
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    deleteBasketsBasketIdUser(basketId: string, options?: any): AxiosPromise<InlineResponse2007>;
    /**
     * Get a paginated list of baskets
     * @summary Get baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBaskets(options?: any): AxiosPromise<BasketCollection>;
    /**
     * Get a basket by it\'s ID
     * @summary Get basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsBasketId(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * This request will get the current active basket for a user
     * @summary Get the current basket for a user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsCurrent(options?: any): AxiosPromise<BasketResponse>;
    /**
     * Returns an authenticatd users saved baskets.
     * @summary Get a users saved baskets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    getBasketsSaved(options?: any): AxiosPromise<SavedBasketCollection>;
    /**
     * Add lines to a basket
     * @summary Create basket lines
     * @param {CreateBasketLinesBody} [createBasketLinesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketLines(createBasketLinesBody?: CreateBasketLinesBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     *
     * @summary Create Basket
     * @param {CreateBasketBody} [createBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBaskets(createBasketBody?: CreateBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * A user is able to \"claim\" a guest basket.
     * @summary Allow a user to claim a basket
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdClaim(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Allows you to add custom meta information to a basket.
     * @summary Add meta information
     * @param {string} basketId
     * @param {AddBasketMetaBody} [addBasketMetaBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdMeta(basketId: string, addBasketMetaBody?: AddBasketMetaBody, options?: any): AxiosPromise<Basket>;
    /**
     * Saves a basket to a users account.
     * @summary Save a basket for a user
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsBasketIdSave(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @summary Resolve a basket
     * @param {ResolveBasketBody} [resolveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    postBasketsResolve(resolveBasketBody?: ResolveBasketBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Update a basket line based on it\'s ID.
     * @summary Update basket line
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineId(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Update basket line quantity
     * @summary Update basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineIdAdd(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Removes quantity from a basket line
     * @summary Remove basket line quantity
     * @param {string} basketLineId
     * @param {BasketLineUpdateBody} [basketLineUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketLinesBasketLineIdRemove(basketLineId: string, basketLineUpdateBody?: BasketLineUpdateBody, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Updates a basket
     * @summary Update a basket by ID
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketsBasketId(basketId: string, options?: any): AxiosPromise<BasketResponse>;
    /**
     * Attach a user to a basket.  > This endpoint will be deprecated in version 0.3.0
     * @summary Add user
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketsBasketIdUser(basketId: string, options?: any): AxiosPromise<Basket>;
    /**
     * Updates a saved basket on the API
     * @summary Update a saved basket
     * @param {string} basketId
     * @param {SaveBasketBody} [saveBasketBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasketsApi
     */
    putBasketsSavedBasketId(basketId: string, saveBasketBody?: SaveBasketBody, options?: any): AxiosPromise<SavedBasketResponse>;
}
/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export declare const CategoriesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a paginated resource of categories
     * @summary Return a paged array of categories
     * @param {boolean} [fullResponse]
     * @param {string} [include]
     * @param {boolean} [tree] Whether response should be a node tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories(fullResponse?: boolean, include?: string, tree?: boolean, options?: any): RequestArgs;
    /**
     * Returns a single category from a given ID
     * @summary Return a single category
     * @param {string} categoryId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoriesCategoryId(categoryId: string, includes?: string, options?: any): RequestArgs;
    /**
     * Returns categories by a given parent ID.
     * @summary Get categories by parent id
     * @param {string} parentId If omitted will return top level catgories
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoriesParentParentId(parentId: string, include?: string, options?: any): RequestArgs;
    /**
     * Creates a new category and returns it\'s resource.
     * @summary Create a new category
     * @param {CreateCategoryBody} [createCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategories(createCategoryBody?: CreateCategoryBody, options?: any): RequestArgs;
    /**
     * Attaches channels to a catagory
     * @summary Attach channels to a category
     * @param {string} categoryId
     * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdChannels(categoryId: string, attachCategoryChannelsBody?: AttachCategoryChannelsBody, options?: any): RequestArgs;
    /**
     * Attaches customer groups to a category resource.
     * @summary Attach customer groups to a category
     * @param {string} categoryId
     * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdCustomerGroups(categoryId: string, attachCategoryCustomerGroupsBody?: AttachCategoryCustomerGroupsBody, options?: any): RequestArgs;
    /**
     * Create or return the current category draft resource.
     * @summary Create or retrieve the current category draft
     * @param {string} categoryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdDrafts(categoryId: string, include?: string, options?: any): RequestArgs;
    /**
     * Attaches layouts to a category resource
     * @summary Update a category layout
     * @param {string} categoryId
     * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryLayouts(categoryId: string, categoryAttachLayoutBody?: CategoryAttachLayoutBody, options?: any): RequestArgs;
    /**
     * Attaches routes to a category resource.
     * @summary Update a category\'s routes
     * @param {string} categoryId
     * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryRoutes(categoryId: string, attachCategoryRoutesBody?: AttachCategoryRoutesBody, options?: any): RequestArgs;
    /**
     *
     * @summary Reorder a category
     * @param {ReorderCategoryBody} [reorderCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesReorder(reorderCategoryBody?: ReorderCategoryBody, options?: any): RequestArgs;
    /**
     * Update a category using a given ID.
     * @summary Update a category
     * @param {string} categoryId
     * @param {UpdateAttributesBody} [updateAttributesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategoriesCategoryId(categoryId: string, updateAttributesBody?: UpdateAttributesBody, options?: any): RequestArgs;
    /**
     * Attaches products to a category resource.
     * @summary Attach products
     * @param {string} categoryId
     * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategoriesCategoryIdProducts(categoryId: string, attachCategoryProductsBody?: AttachCategoryProductsBody, options?: any): RequestArgs;
};
/**
 * CategoriesApi - functional programming interface
 * @export
 */
export declare const CategoriesApiFp: (configuration?: Configuration) => {
    /**
     * Returns a paginated resource of categories
     * @summary Return a paged array of categories
     * @param {boolean} [fullResponse]
     * @param {string} [include]
     * @param {boolean} [tree] Whether response should be a node tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories(fullResponse?: boolean, include?: string, tree?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryCollection>;
    /**
     * Returns a single category from a given ID
     * @summary Return a single category
     * @param {string} categoryId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoriesCategoryId(categoryId: string, includes?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * Returns categories by a given parent ID.
     * @summary Get categories by parent id
     * @param {string} parentId If omitted will return top level catgories
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoriesParentParentId(parentId: string, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryCollection>;
    /**
     * Creates a new category and returns it\'s resource.
     * @summary Create a new category
     * @param {CreateCategoryBody} [createCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategories(createCategoryBody?: CreateCategoryBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * Attaches channels to a catagory
     * @summary Attach channels to a category
     * @param {string} categoryId
     * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdChannels(categoryId: string, attachCategoryChannelsBody?: AttachCategoryChannelsBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * Attaches customer groups to a category resource.
     * @summary Attach customer groups to a category
     * @param {string} categoryId
     * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdCustomerGroups(categoryId: string, attachCategoryCustomerGroupsBody?: AttachCategoryCustomerGroupsBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * Create or return the current category draft resource.
     * @summary Create or retrieve the current category draft
     * @param {string} categoryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdDrafts(categoryId: string, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * Attaches layouts to a category resource
     * @summary Update a category layout
     * @param {string} categoryId
     * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryLayouts(categoryId: string, categoryAttachLayoutBody?: CategoryAttachLayoutBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * Attaches routes to a category resource.
     * @summary Update a category\'s routes
     * @param {string} categoryId
     * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryRoutes(categoryId: string, attachCategoryRoutesBody?: AttachCategoryRoutesBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     *
     * @summary Reorder a category
     * @param {ReorderCategoryBody} [reorderCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesReorder(reorderCategoryBody?: ReorderCategoryBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * Update a category using a given ID.
     * @summary Update a category
     * @param {string} categoryId
     * @param {UpdateAttributesBody} [updateAttributesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategoriesCategoryId(categoryId: string, updateAttributesBody?: UpdateAttributesBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * Attaches products to a category resource.
     * @summary Attach products
     * @param {string} categoryId
     * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategoriesCategoryIdProducts(categoryId: string, attachCategoryProductsBody?: AttachCategoryProductsBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
};
/**
 * CategoriesApi - factory interface
 * @export
 */
export declare const CategoriesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a paginated resource of categories
     * @summary Return a paged array of categories
     * @param {boolean} [fullResponse]
     * @param {string} [include]
     * @param {boolean} [tree] Whether response should be a node tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories(fullResponse?: boolean, include?: string, tree?: boolean, options?: any): AxiosPromise<CategoryCollection>;
    /**
     * Returns a single category from a given ID
     * @summary Return a single category
     * @param {string} categoryId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoriesCategoryId(categoryId: string, includes?: string, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Returns categories by a given parent ID.
     * @summary Get categories by parent id
     * @param {string} parentId If omitted will return top level catgories
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategoriesParentParentId(parentId: string, include?: string, options?: any): AxiosPromise<CategoryCollection>;
    /**
     * Creates a new category and returns it\'s resource.
     * @summary Create a new category
     * @param {CreateCategoryBody} [createCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategories(createCategoryBody?: CreateCategoryBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches channels to a catagory
     * @summary Attach channels to a category
     * @param {string} categoryId
     * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdChannels(categoryId: string, attachCategoryChannelsBody?: AttachCategoryChannelsBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches customer groups to a category resource.
     * @summary Attach customer groups to a category
     * @param {string} categoryId
     * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdCustomerGroups(categoryId: string, attachCategoryCustomerGroupsBody?: AttachCategoryCustomerGroupsBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Create or return the current category draft resource.
     * @summary Create or retrieve the current category draft
     * @param {string} categoryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryIdDrafts(categoryId: string, include?: string, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches layouts to a category resource
     * @summary Update a category layout
     * @param {string} categoryId
     * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryLayouts(categoryId: string, categoryAttachLayoutBody?: CategoryAttachLayoutBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches routes to a category resource.
     * @summary Update a category\'s routes
     * @param {string} categoryId
     * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesCategoryRoutes(categoryId: string, attachCategoryRoutesBody?: AttachCategoryRoutesBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     *
     * @summary Reorder a category
     * @param {ReorderCategoryBody} [reorderCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCategoriesReorder(reorderCategoryBody?: ReorderCategoryBody, options?: any): AxiosPromise<Message>;
    /**
     * Update a category using a given ID.
     * @summary Update a category
     * @param {string} categoryId
     * @param {UpdateAttributesBody} [updateAttributesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategoriesCategoryId(categoryId: string, updateAttributesBody?: UpdateAttributesBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches products to a category resource.
     * @summary Attach products
     * @param {string} categoryId
     * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCategoriesCategoryIdProducts(categoryId: string, attachCategoryProductsBody?: AttachCategoryProductsBody, options?: any): AxiosPromise<CategoryResponse>;
};
/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export declare class CategoriesApi extends BaseAPI {
    /**
     * Returns a paginated resource of categories
     * @summary Return a paged array of categories
     * @param {boolean} [fullResponse]
     * @param {string} [include]
     * @param {boolean} [tree] Whether response should be a node tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategories(fullResponse?: boolean, include?: string, tree?: boolean, options?: any): AxiosPromise<CategoryCollection>;
    /**
     * Returns a single category from a given ID
     * @summary Return a single category
     * @param {string} categoryId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategoriesCategoryId(categoryId: string, includes?: string, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Returns categories by a given parent ID.
     * @summary Get categories by parent id
     * @param {string} parentId If omitted will return top level catgories
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    getCategoriesParentParentId(parentId: string, include?: string, options?: any): AxiosPromise<CategoryCollection>;
    /**
     * Creates a new category and returns it\'s resource.
     * @summary Create a new category
     * @param {CreateCategoryBody} [createCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategories(createCategoryBody?: CreateCategoryBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches channels to a catagory
     * @summary Attach channels to a category
     * @param {string} categoryId
     * @param {AttachCategoryChannelsBody} [attachCategoryChannelsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryIdChannels(categoryId: string, attachCategoryChannelsBody?: AttachCategoryChannelsBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches customer groups to a category resource.
     * @summary Attach customer groups to a category
     * @param {string} categoryId
     * @param {AttachCategoryCustomerGroupsBody} [attachCategoryCustomerGroupsBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryIdCustomerGroups(categoryId: string, attachCategoryCustomerGroupsBody?: AttachCategoryCustomerGroupsBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Create or return the current category draft resource.
     * @summary Create or retrieve the current category draft
     * @param {string} categoryId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryIdDrafts(categoryId: string, include?: string, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches layouts to a category resource
     * @summary Update a category layout
     * @param {string} categoryId
     * @param {CategoryAttachLayoutBody} [categoryAttachLayoutBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryLayouts(categoryId: string, categoryAttachLayoutBody?: CategoryAttachLayoutBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches routes to a category resource.
     * @summary Update a category\'s routes
     * @param {string} categoryId
     * @param {AttachCategoryRoutesBody} [attachCategoryRoutesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesCategoryRoutes(categoryId: string, attachCategoryRoutesBody?: AttachCategoryRoutesBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     *
     * @summary Reorder a category
     * @param {ReorderCategoryBody} [reorderCategoryBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    postCategoriesReorder(reorderCategoryBody?: ReorderCategoryBody, options?: any): AxiosPromise<Message>;
    /**
     * Update a category using a given ID.
     * @summary Update a category
     * @param {string} categoryId
     * @param {UpdateAttributesBody} [updateAttributesBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    putCategoriesCategoryId(categoryId: string, updateAttributesBody?: UpdateAttributesBody, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Attaches products to a category resource.
     * @summary Attach products
     * @param {string} categoryId
     * @param {AttachCategoryProductsBody} [attachCategoryProductsBody] When using \&quot;custom\&quot; sort type, sorting will be based on the position.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    putCategoriesCategoryIdProducts(categoryId: string, attachCategoryProductsBody?: AttachCategoryProductsBody, options?: any): AxiosPromise<CategoryResponse>;
}
/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export declare const ChannelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete the channel resource
     * @param {string} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannelsChannelId(channelId: string, options?: any): RequestArgs;
    /**
     * Gets a paginated list of all channel
     * @summary Get all channels
     * @param {string} [includes] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(includes?: string, perPage?: number, options?: any): RequestArgs;
    /**
     *
     * @summary Get the channel resource
     * @param {string} channelId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelsChannelId(channelId: string, includes?: string, options?: any): RequestArgs;
    /**
     * Create a new channel resource
     * @summary Create a new channel
     * @param {string} [handle]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postChannels(handle?: string, name?: string, options?: any): RequestArgs;
    /**
     *
     * @summary Update the channel resource
     * @param {string} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putChannelsChannelId(channelId: string, options?: any): RequestArgs;
};
/**
 * ChannelsApi - functional programming interface
 * @export
 */
export declare const ChannelsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete the channel resource
     * @param {string} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannelsChannelId(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Gets a paginated list of all channel
     * @summary Get all channels
     * @param {string} [includes] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(includes?: string, perPage?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelCollection>;
    /**
     *
     * @summary Get the channel resource
     * @param {string} channelId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelsChannelId(channelId: string, includes?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelResponse>;
    /**
     * Create a new channel resource
     * @summary Create a new channel
     * @param {string} [handle]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postChannels(handle?: string, name?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
    /**
     *
     * @summary Update the channel resource
     * @param {string} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putChannelsChannelId(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelResponse>;
};
/**
 * ChannelsApi - factory interface
 * @export
 */
export declare const ChannelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete the channel resource
     * @param {string} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannelsChannelId(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a paginated list of all channel
     * @summary Get all channels
     * @param {string} [includes] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(includes?: string, perPage?: number, options?: any): AxiosPromise<ChannelCollection>;
    /**
     *
     * @summary Get the channel resource
     * @param {string} channelId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelsChannelId(channelId: string, includes?: string, options?: any): AxiosPromise<ChannelResponse>;
    /**
     * Create a new channel resource
     * @summary Create a new channel
     * @param {string} [handle]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postChannels(handle?: string, name?: string, options?: any): AxiosPromise<Channel>;
    /**
     *
     * @summary Update the channel resource
     * @param {string} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putChannelsChannelId(channelId: string, options?: any): AxiosPromise<ChannelResponse>;
};
/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export declare class ChannelsApi extends BaseAPI {
    /**
     *
     * @summary Delete the channel resource
     * @param {string} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    deleteChannelsChannelId(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a paginated list of all channel
     * @summary Get all channels
     * @param {string} [includes] Comma separated includes for the resource
     * @param {number} [perPage] How many results per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    getChannels(includes?: string, perPage?: number, options?: any): AxiosPromise<ChannelCollection>;
    /**
     *
     * @summary Get the channel resource
     * @param {string} channelId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    getChannelsChannelId(channelId: string, includes?: string, options?: any): AxiosPromise<ChannelResponse>;
    /**
     * Create a new channel resource
     * @summary Create a new channel
     * @param {string} [handle]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    postChannels(handle?: string, name?: string, options?: any): AxiosPromise<Channel>;
    /**
     *
     * @summary Update the channel resource
     * @param {string} channelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    putChannelsChannelId(channelId: string, options?: any): AxiosPromise<ChannelResponse>;
}
/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export declare const CollectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollectionsCollectionId(collectionId: string, options?: any): RequestArgs;
    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): RequestArgs;
    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionsCollectionId(collectionId: string, include?: string, options?: any): RequestArgs;
    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollections(inlineObject6?: InlineObject6, options?: any): RequestArgs;
    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionIdProducts(collectionId: string, inlineObject5?: InlineObject5, options?: any): RequestArgs;
    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionRoutes(collectionId: string, inlineObject4?: InlineObject4, options?: any): RequestArgs;
    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCollectionsCollectionId(collectionId: string, inlineObject7?: InlineObject7, options?: any): RequestArgs;
};
/**
 * CollectionsApi - functional programming interface
 * @export
 */
export declare const CollectionsApiFp: (configuration?: Configuration) => {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollectionsCollectionId(collectionId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionCollection>;
    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionsCollectionId(collectionId: string, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>;
    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollections(inlineObject6?: InlineObject6, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>;
    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionIdProducts(collectionId: string, inlineObject5?: InlineObject5, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionRoutes(collectionId: string, inlineObject4?: InlineObject4, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>;
    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCollectionsCollectionId(collectionId: string, inlineObject7?: InlineObject7, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CollectionResponse>;
};
/**
 * CollectionsApi - factory interface
 * @export
 */
export declare const CollectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCollectionsCollectionId(collectionId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): AxiosPromise<CollectionCollection>;
    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectionsCollectionId(collectionId: string, include?: string, options?: any): AxiosPromise<CollectionResponse>;
    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollections(inlineObject6?: InlineObject6, options?: any): AxiosPromise<CollectionResponse>;
    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionIdProducts(collectionId: string, inlineObject5?: InlineObject5, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postCollectionsCollectionRoutes(collectionId: string, inlineObject4?: InlineObject4, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCollectionsCollectionId(collectionId: string, inlineObject7?: InlineObject7, options?: any): AxiosPromise<CollectionResponse>;
};
/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export declare class CollectionsApi extends BaseAPI {
    /**
     * Delete a Collection by its ID
     * @summary Delete Collection
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    deleteCollectionsCollectionId(collectionId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a paginated response of collections.
     * @summary Get Collections
     * @param {'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups'} [include]
     * @param {string} [perPage]
     * @param {string} [fullResponse]
     * @param {string} [sort]
     * @param {string} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getCollections(include?: 'routes' | 'layout' | 'channels' | 'assets' | 'attributes' | 'routes' | 'products' | 'customer_groups', perPage?: string, fullResponse?: string, sort?: string, page?: string, options?: any): AxiosPromise<CollectionCollection>;
    /**
     * Get a single Collection by its ID
     * @summary Single Collection
     * @param {string} collectionId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    getCollectionsCollectionId(collectionId: string, include?: string, options?: any): AxiosPromise<CollectionResponse>;
    /**
     * Create a new collection.
     * @summary Create Collection
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    postCollections(inlineObject6?: InlineObject6, options?: any): AxiosPromise<CollectionResponse>;
    /**
     * Syncs products with a collection.
     * @summary Update a collection\'s products
     * @param {string} collectionId
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    postCollectionsCollectionIdProducts(collectionId: string, inlineObject5?: InlineObject5, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * This request will allow you to attach routes to a collection
     * @summary Update a collection\'s routes
     * @param {string} collectionId
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    postCollectionsCollectionRoutes(collectionId: string, inlineObject4?: InlineObject4, options?: any): AxiosPromise<CategoryResponse>;
    /**
     * Update a Collection by its ID.
     * @summary Update Collection
     * @param {string} collectionId
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    putCollectionsCollectionId(collectionId: string, inlineObject7?: InlineObject7, options?: any): AxiosPromise<CollectionResponse>;
}
/**
 * CustomersApi - axios parameter creator
 * @export
 */
export declare const CustomersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Return a paginated CustomerGroup response
     * @summary Get Customer Groups
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomersGroups(include?: string, options?: any): RequestArgs;
    /**
     * This endpoint returns any available user fields which have been defined in the getcandy config.
     * @summary Get custom user fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersFields(options?: any): RequestArgs;
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
export declare const CustomersApiFp: (configuration?: Configuration) => {
    /**
     * Return a paginated CustomerGroup response
     * @summary Get Customer Groups
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomersGroups(include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGroupCollection>;
    /**
     * This endpoint returns any available user fields which have been defined in the getcandy config.
     * @summary Get custom user fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersFields(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFieldsResponse>;
};
/**
 * CustomersApi - factory interface
 * @export
 */
export declare const CustomersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Return a paginated CustomerGroup response
     * @summary Get Customer Groups
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomersGroups(include?: string, options?: any): AxiosPromise<CustomerGroupCollection>;
    /**
     * This endpoint returns any available user fields which have been defined in the getcandy config.
     * @summary Get custom user fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersFields(options?: any): AxiosPromise<UserFieldsResponse>;
};
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export declare class CustomersApi extends BaseAPI {
    /**
     * Return a paginated CustomerGroup response
     * @summary Get Customer Groups
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    getCustomersGroups(include?: string, options?: any): AxiosPromise<CustomerGroupCollection>;
    /**
     * This endpoint returns any available user fields which have been defined in the getcandy config.
     * @summary Get custom user fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    getUsersFields(options?: any): AxiosPromise<UserFieldsResponse>;
}
/**
 * DiscountsApi - axios parameter creator
 * @export
 */
export declare const DiscountsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes a Discount
     * @summary Delete Discount
     * @param {string} discountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscountsDiscountId(discountId: string, options?: any): RequestArgs;
    /**
     * Returns a paginated list of Discounts
     * @summary Get Discounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscounts(options?: any): RequestArgs;
    /**
     * Returns a Discount by it\'s ID.
     * @summary Get a Discount
     * @param {string} discountId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscountsDiscountId(discountId: string, include?: string, options?: any): RequestArgs;
    /**
     * Create a new Discount.
     * @summary Create Discount
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDiscounts(inlineObject8?: InlineObject8, options?: any): RequestArgs;
    /**
     * Updates a Discount
     * @summary Update Discount
     * @param {string} discountId
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDiscountsDiscountId(discountId: string, inlineObject9?: InlineObject9, options?: any): RequestArgs;
};
/**
 * DiscountsApi - functional programming interface
 * @export
 */
export declare const DiscountsApiFp: (configuration?: Configuration) => {
    /**
     * Deletes a Discount
     * @summary Delete Discount
     * @param {string} discountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscountsDiscountId(discountId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Returns a paginated list of Discounts
     * @summary Get Discounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscounts(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountCollection>;
    /**
     * Returns a Discount by it\'s ID.
     * @summary Get a Discount
     * @param {string} discountId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscountsDiscountId(discountId: string, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountResponse>;
    /**
     * Create a new Discount.
     * @summary Create Discount
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDiscounts(inlineObject8?: InlineObject8, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountResponse>;
    /**
     * Updates a Discount
     * @summary Update Discount
     * @param {string} discountId
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDiscountsDiscountId(discountId: string, inlineObject9?: InlineObject9, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiscountResponse>;
};
/**
 * DiscountsApi - factory interface
 * @export
 */
export declare const DiscountsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes a Discount
     * @summary Delete Discount
     * @param {string} discountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDiscountsDiscountId(discountId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of Discounts
     * @summary Get Discounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscounts(options?: any): AxiosPromise<DiscountCollection>;
    /**
     * Returns a Discount by it\'s ID.
     * @summary Get a Discount
     * @param {string} discountId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDiscountsDiscountId(discountId: string, include?: string, options?: any): AxiosPromise<DiscountResponse>;
    /**
     * Create a new Discount.
     * @summary Create Discount
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDiscounts(inlineObject8?: InlineObject8, options?: any): AxiosPromise<DiscountResponse>;
    /**
     * Updates a Discount
     * @summary Update Discount
     * @param {string} discountId
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDiscountsDiscountId(discountId: string, inlineObject9?: InlineObject9, options?: any): AxiosPromise<DiscountResponse>;
};
/**
 * DiscountsApi - object-oriented interface
 * @export
 * @class DiscountsApi
 * @extends {BaseAPI}
 */
export declare class DiscountsApi extends BaseAPI {
    /**
     * Deletes a Discount
     * @summary Delete Discount
     * @param {string} discountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    deleteDiscountsDiscountId(discountId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of Discounts
     * @summary Get Discounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    getDiscounts(options?: any): AxiosPromise<DiscountCollection>;
    /**
     * Returns a Discount by it\'s ID.
     * @summary Get a Discount
     * @param {string} discountId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    getDiscountsDiscountId(discountId: string, include?: string, options?: any): AxiosPromise<DiscountResponse>;
    /**
     * Create a new Discount.
     * @summary Create Discount
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    postDiscounts(inlineObject8?: InlineObject8, options?: any): AxiosPromise<DiscountResponse>;
    /**
     * Updates a Discount
     * @summary Update Discount
     * @param {string} discountId
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscountsApi
     */
    putDiscountsDiscountId(discountId: string, inlineObject9?: InlineObject9, options?: any): AxiosPromise<DiscountResponse>;
}
/**
 * LanguagesApi - axios parameter creator
 * @export
 */
export declare const LanguagesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLanguagesLanguageId(languageId: string, options?: any): RequestArgs;
    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguages(options?: any): RequestArgs;
    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguagesLanguageId(languageId: string, options?: any): RequestArgs;
    /**
     * Create a new language
     * @summary Create Language
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLanguages(inlineObject10?: InlineObject10, options?: any): RequestArgs;
    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putLanguagesLanguageId(languageId: string, language?: Language, options?: any): RequestArgs;
};
/**
 * LanguagesApi - functional programming interface
 * @export
 */
export declare const LanguagesApiFp: (configuration?: Configuration) => {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLanguagesLanguageId(languageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguages(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageCollection>;
    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguagesLanguageId(languageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>;
    /**
     * Create a new language
     * @summary Create Language
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLanguages(inlineObject10?: InlineObject10, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>;
    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putLanguagesLanguageId(languageId: string, language?: Language, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguageResponse>;
};
/**
 * LanguagesApi - factory interface
 * @export
 */
export declare const LanguagesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLanguagesLanguageId(languageId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguages(options?: any): AxiosPromise<LanguageCollection>;
    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLanguagesLanguageId(languageId: string, options?: any): AxiosPromise<LanguageResponse>;
    /**
     * Create a new language
     * @summary Create Language
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postLanguages(inlineObject10?: InlineObject10, options?: any): AxiosPromise<LanguageResponse>;
    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putLanguagesLanguageId(languageId: string, language?: Language, options?: any): AxiosPromise<LanguageResponse>;
};
/**
 * LanguagesApi - object-oriented interface
 * @export
 * @class LanguagesApi
 * @extends {BaseAPI}
 */
export declare class LanguagesApi extends BaseAPI {
    /**
     * Delete a Language by its ID
     * @summary Delete Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    deleteLanguagesLanguageId(languageId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of Languages
     * @summary Get Languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    getLanguages(options?: any): AxiosPromise<LanguageCollection>;
    /**
     * Get a Language by ID
     * @summary Get Language
     * @param {string} languageId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    getLanguagesLanguageId(languageId: string, options?: any): AxiosPromise<LanguageResponse>;
    /**
     * Create a new language
     * @summary Create Language
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    postLanguages(inlineObject10?: InlineObject10, options?: any): AxiosPromise<LanguageResponse>;
    /**
     * Update a Language using it\'s ID
     * @summary Update Language
     * @param {string} languageId
     * @param {Language} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    putLanguagesLanguageId(languageId: string, language?: Language, options?: any): AxiosPromise<LanguageResponse>;
}
/**
 * LayoutsApi - axios parameter creator
 * @export
 */
export declare const LayoutsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a paginated list of Layouts
     * @summary Get Layouts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLayouts(options?: any): RequestArgs;
};
/**
 * LayoutsApi - functional programming interface
 * @export
 */
export declare const LayoutsApiFp: (configuration?: Configuration) => {
    /**
     * Get a paginated list of Layouts
     * @summary Get Layouts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLayouts(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LayoutCollection>;
};
/**
 * LayoutsApi - factory interface
 * @export
 */
export declare const LayoutsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a paginated list of Layouts
     * @summary Get Layouts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLayouts(options?: any): AxiosPromise<LayoutCollection>;
};
/**
 * LayoutsApi - object-oriented interface
 * @export
 * @class LayoutsApi
 * @extends {BaseAPI}
 */
export declare class LayoutsApi extends BaseAPI {
    /**
     * Get a paginated list of Layouts
     * @summary Get Layouts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutsApi
     */
    getLayouts(options?: any): AxiosPromise<LayoutCollection>;
}
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export declare const OrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrdersLinesOrderId(orderLineId: string, options?: any): RequestArgs;
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders(include?: string, options?: any): RequestArgs;
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersBulk(orders: '1sfe534r4ref:934redfk', format: string, options?: any): RequestArgs;
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} status
     * @param {string} id An order id to use for the template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersEmailPreviewStatus(status: string, id: string, options?: any): RequestArgs;
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdInvoice(orderId: string, options?: any): RequestArgs;
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdShippingMethods(orderId: string, include?: string, options?: any): RequestArgs;
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersOrderId(orderId: string, options?: any): RequestArgs;
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersTypes(options?: any): RequestArgs;
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrders(createOrderBody?: CreateOrderBody, options?: any): RequestArgs;
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersBulk(inlineObject11?: InlineObject11, options?: any): RequestArgs;
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersOrderIdExpire(orderId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersProcess(inlineObject1?: InlineObject1, options?: any): RequestArgs;
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdContact(orderId: string, inlineObject13?: InlineObject13, options?: any): RequestArgs;
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdLines(orderId: string, inlineObject14?: InlineObject14, options?: any): RequestArgs;
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingAddress(orderId: string, address?: Address, options?: any): RequestArgs;
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingCost(orderId: string, include?: string, inlineObject12?: InlineObject12, options?: any): RequestArgs;
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderId(orderId: string, include?: string, inlineObject?: InlineObject, options?: any): RequestArgs;
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderIdBillingAddress(orderId: string, address?: Address, options?: any): RequestArgs;
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export declare const OrdersApiFp: (configuration?: Configuration) => {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrdersLinesOrderId(orderLineId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders(include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderCollection>;
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersBulk(orders: '1sfe534r4ref:934redfk', format: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderExportResponse>;
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} status
     * @param {string} id An order id to use for the template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersEmailPreviewStatus(status: string, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailPreviewResponse>;
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdInvoice(orderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResponse>;
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdShippingMethods(orderId: string, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingPriceCollection>;
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersOrderId(orderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersTypes(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderTypeCollection>;
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrders(createOrderBody?: CreateOrderBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersBulk(inlineObject11?: InlineObject11, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersOrderIdExpire(orderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersProcess(inlineObject1?: InlineObject1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdContact(orderId: string, inlineObject13?: InlineObject13, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdLines(orderId: string, inlineObject14?: InlineObject14, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingAddress(orderId: string, address?: Address, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingCost(orderId: string, include?: string, inlineObject12?: InlineObject12, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderId(orderId: string, include?: string, inlineObject?: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderIdBillingAddress(orderId: string, address?: Address, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
};
/**
 * OrdersApi - factory interface
 * @export
 */
export declare const OrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrdersLinesOrderId(orderLineId: string, options?: any): AxiosPromise<void>;
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrders(include?: string, options?: any): AxiosPromise<OrderCollection>;
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersBulk(orders: '1sfe534r4ref:934redfk', format: string, options?: any): AxiosPromise<OrderExportResponse>;
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} status
     * @param {string} id An order id to use for the template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersEmailPreviewStatus(status: string, id: string, options?: any): AxiosPromise<EmailPreviewResponse>;
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdInvoice(orderId: string, options?: any): AxiosPromise<InvoiceResponse>;
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersIdShippingMethods(orderId: string, include?: string, options?: any): AxiosPromise<ShippingPriceCollection>;
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersOrderId(orderId: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrdersTypes(options?: any): AxiosPromise<OrderTypeCollection>;
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrders(createOrderBody?: CreateOrderBody, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersBulk(inlineObject11?: InlineObject11, options?: any): AxiosPromise<void>;
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersOrderIdExpire(orderId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrdersProcess(inlineObject1?: InlineObject1, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdContact(orderId: string, inlineObject13?: InlineObject13, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdLines(orderId: string, inlineObject14?: InlineObject14, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingAddress(orderId: string, address?: Address, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersIdShippingCost(orderId: string, include?: string, inlineObject12?: InlineObject12, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderId(orderId: string, include?: string, inlineObject?: InlineObject, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrdersOrderIdBillingAddress(orderId: string, address?: Address, options?: any): AxiosPromise<OrderResponse>;
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export declare class OrdersApi extends BaseAPI {
    /**
     * Deletes an order line from an order
     * @summary Delete an order line
     * @param {string} orderLineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    deleteOrdersLinesOrderId(orderLineId: string, options?: any): AxiosPromise<void>;
    /**
     * If you\'re an admin user you will be able to see all orders, otherwise only the current users orders will be returned.
     * @summary Get orders
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrders(include?: string, options?: any): AxiosPromise<OrderCollection>;
    /**
     * Export orders into a base64 encoded string
     * @summary Get Order export
     * @param {'1sfe534r4ref:934redfk'} orders Colon seperated order IDs
     * @param {string} format The export format, must be present in config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersBulk(orders: '1sfe534r4ref:934redfk', format: string, options?: any): AxiosPromise<OrderExportResponse>;
    /**
     * This endpoint will get a HTML email preview for an order status, this is useful if you want to be able to see what email will be sent out for the corresponding Order status.  Mailers for each order status should be stored in the getcandy config under `orders.mailers`
     * @summary Get order status preview email
     * @param {string} status
     * @param {string} id An order id to use for the template
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersEmailPreviewStatus(status: string, id: string, options?: any): AxiosPromise<EmailPreviewResponse>;
    /**
     * Get an orders invoice
     * @summary Get order invoice
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersIdInvoice(orderId: string, options?: any): AxiosPromise<InvoiceResponse>;
    /**
     * This will return a list of all ShippingMethod\'s that are available for this order.
     * @summary Get Order Shipping Methods
     * @param {string} orderId
     * @param {string} [include] The available resources to include
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersIdShippingMethods(orderId: string, include?: string, options?: any): AxiosPromise<ShippingPriceCollection>;
    /**
     * Get an Order by it\'s ID.  You must be an admin or owner to retrieve the order, otherwise you\'ll get a 404.
     * @summary Get Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersOrderId(orderId: string, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Returns all order types currently in the system
     * @summary Get order types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getOrdersTypes(options?: any): AxiosPromise<OrderTypeCollection>;
    /**
     * Create an Order from a Basket instance
     * @summary Create Order
     * @param {CreateOrderBody} [createOrderBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrders(createOrderBody?: CreateOrderBody, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Allows you to bulk update a field across multiple Orders.  You must have the correct priviledges to perform this action.
     * @summary Bulk update orders
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersBulk(inlineObject11?: InlineObject11, options?: any): AxiosPromise<void>;
    /**
     * Sets an order to be expired. You must have the correct priviledges to perform this action. Once an order is expired, it will no longer appear in results unless performed by an admin or in the hub.
     * @summary Expire an Order
     * @param {string} orderId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersOrderIdExpire(orderId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Processes an order on the API
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    postOrdersProcess(inlineObject1?: InlineObject1, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Add contact details to an order
     * @summary Add contact details
     * @param {string} orderId
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdContact(orderId: string, inlineObject13?: InlineObject13, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Adds an order line to an order
     * @summary Add order line
     * @param {string} orderId
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdLines(orderId: string, inlineObject14?: InlineObject14, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an orders shipping address
     * @summary Update shipping address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdShippingAddress(orderId: string, address?: Address, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Adds a shipping cost to an Order
     * @summary Add shipping cost
     * @param {string} orderId
     * @param {string} [include] Related resources to include in response
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersIdShippingCost(orderId: string, include?: string, inlineObject12?: InlineObject12, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an Order
     * @summary Update Order
     * @param {string} orderId
     * @param {string} [include]
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersOrderId(orderId: string, include?: string, inlineObject?: InlineObject, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Update an orders billing address
     * @summary Update billing address
     * @param {string} orderId
     * @param {Address} [address] All fields are required when an &#x60;address_id&#x60; is not present.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    putOrdersOrderIdBillingAddress(orderId: string, address?: Address, options?: any): AxiosPromise<OrderResponse>;
}
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export declare const PaymentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Removes a users reusable payment method. This can be invoked by any admin user and also the user who the record belongs to.
     * @summary Delete reusable payment
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersPaymentsId(id: string, options?: any): RequestArgs;
    /**
     * Gets the default, configured payment provider.
     * @summary Get Payment Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsProvider(options?: any): RequestArgs;
    /**
     * Returns a list of available Payment Types in the system
     * @summary Payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsTypes(options?: any): RequestArgs;
    /**
     * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
     * @summary Threed Secure Payment
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPayments3dSecure(inlineObject15?: InlineObject15, options?: any): RequestArgs;
    /**
     * Refund a transaction
     * @summary Refund a payment
     * @param {string} transactionId
     * @param {number} [amount] If left blank, the full amount will be refunded
     * @param {string} [notes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPaymentsIdRefund(transactionId: string, amount?: number, notes?: string, options?: any): RequestArgs;
    /**
     * Voids a payment in the system.
     * @summary Void a payment
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPaymentsTransactionIdVoid(transactionId: string, options?: any): RequestArgs;
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
export declare const PaymentsApiFp: (configuration?: Configuration) => {
    /**
     * Removes a users reusable payment method. This can be invoked by any admin user and also the user who the record belongs to.
     * @summary Delete reusable payment
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersPaymentsId(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Gets the default, configured payment provider.
     * @summary Get Payment Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsProvider(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentProviderResponse>;
    /**
     * Returns a list of available Payment Types in the system
     * @summary Payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsTypes(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentTypeCollection>;
    /**
     * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
     * @summary Threed Secure Payment
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPayments3dSecure(inlineObject15?: InlineObject15, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>;
    /**
     * Refund a transaction
     * @summary Refund a payment
     * @param {string} transactionId
     * @param {number} [amount] If left blank, the full amount will be refunded
     * @param {string} [notes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPaymentsIdRefund(transactionId: string, amount?: number, notes?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>;
    /**
     * Voids a payment in the system.
     * @summary Void a payment
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPaymentsTransactionIdVoid(transactionId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>;
};
/**
 * PaymentsApi - factory interface
 * @export
 */
export declare const PaymentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Removes a users reusable payment method. This can be invoked by any admin user and also the user who the record belongs to.
     * @summary Delete reusable payment
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersPaymentsId(id: string, options?: any): AxiosPromise<void>;
    /**
     * Gets the default, configured payment provider.
     * @summary Get Payment Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsProvider(options?: any): AxiosPromise<PaymentProviderResponse>;
    /**
     * Returns a list of available Payment Types in the system
     * @summary Payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsTypes(options?: any): AxiosPromise<PaymentTypeCollection>;
    /**
     * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
     * @summary Threed Secure Payment
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPayments3dSecure(inlineObject15?: InlineObject15, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Refund a transaction
     * @summary Refund a payment
     * @param {string} transactionId
     * @param {number} [amount] If left blank, the full amount will be refunded
     * @param {string} [notes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPaymentsIdRefund(transactionId: string, amount?: number, notes?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Voids a payment in the system.
     * @summary Void a payment
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postPaymentsTransactionIdVoid(transactionId: string, options?: any): AxiosPromise<TransactionResponse>;
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export declare class PaymentsApi extends BaseAPI {
    /**
     * Removes a users reusable payment method. This can be invoked by any admin user and also the user who the record belongs to.
     * @summary Delete reusable payment
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    deleteUsersPaymentsId(id: string, options?: any): AxiosPromise<void>;
    /**
     * Gets the default, configured payment provider.
     * @summary Get Payment Provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPaymentsProvider(options?: any): AxiosPromise<PaymentProviderResponse>;
    /**
     * Returns a list of available Payment Types in the system
     * @summary Payment types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPaymentsTypes(options?: any): AxiosPromise<PaymentTypeCollection>;
    /**
     * Validate a ThreeD secure request and process the transaaction, if your payment provider supports it.
     * @summary Threed Secure Payment
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    postPayments3dSecure(inlineObject15?: InlineObject15, options?: any): AxiosPromise<OrderResponse>;
    /**
     * Refund a transaction
     * @summary Refund a payment
     * @param {string} transactionId
     * @param {number} [amount] If left blank, the full amount will be refunded
     * @param {string} [notes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    postPaymentsIdRefund(transactionId: string, amount?: number, notes?: string, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Voids a payment in the system.
     * @summary Void a payment
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    postPaymentsTransactionIdVoid(transactionId: string, options?: any): AxiosPromise<TransactionResponse>;
}
/**
 * ProductFamiliesApi - axios parameter creator
 * @export
 */
export declare const ProductFamiliesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): RequestArgs;
    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [includes] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamilies(includes?: string, options?: any): RequestArgs;
    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): RequestArgs;
    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductFamilies(options?: any): RequestArgs;
    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject27?: InlineObject27, options?: any): RequestArgs;
};
/**
 * ProductFamiliesApi - functional programming interface
 * @export
 */
export declare const ProductFamiliesApiFp: (configuration?: Configuration) => {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [includes] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamilies(includes?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyCollection>;
    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>;
    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductFamilies(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>;
    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject27?: InlineObject27, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductFamilyResponse>;
};
/**
 * ProductFamiliesApi - factory interface
 * @export
 */
export declare const ProductFamiliesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [includes] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamilies(includes?: string, options?: any): AxiosPromise<ProductFamilyCollection>;
    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): AxiosPromise<ProductFamilyResponse>;
    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductFamilies(options?: any): AxiosPromise<ProductFamilyResponse>;
    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject27?: InlineObject27, options?: any): AxiosPromise<ProductFamilyResponse>;
};
/**
 * ProductFamiliesApi - object-oriented interface
 * @export
 * @class ProductFamiliesApi
 * @extends {BaseAPI}
 */
export declare class ProductFamiliesApi extends BaseAPI {
    /**
     * Sends a request to delete a product family
     * @summary Delete product family
     * @param {string} productFamilyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    deleteProductFamiliesProductFamilyId(productFamilyId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of all product families.
     * @summary Get product families
     * @param {string} [includes] Define included relationships
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    getProductFamilies(includes?: string, options?: any): AxiosPromise<ProductFamilyCollection>;
    /**
     * Returns a single product family based on ID.
     * @summary Get a product family
     * @param {string} productFamilyId
     * @param {string} [includes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    getProductFamiliesProductFamilyId(productFamilyId: string, includes?: string, options?: any): AxiosPromise<ProductFamilyResponse>;
    /**
     * Create a new product family.
     * @summary Create product family
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    postProductFamilies(options?: any): AxiosPromise<ProductFamilyResponse>;
    /**
     * Update a product family
     * @summary Update product family
     * @param {string} productFamilyId
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductFamiliesApi
     */
    putProductFamiliesProductFamilyId(productFamilyId: string, inlineObject27?: InlineObject27, options?: any): AxiosPromise<ProductFamilyResponse>;
}
/**
 * ProductVariantsApi - axios parameter creator
 * @export
 */
export declare const ProductVariantsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a paginated list of all product variants in the system
     * @summary Get Product Variants
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsVariants(include?: string, options?: any): RequestArgs;
    /**
     * Get a product variant by it\'s ID
     * @summary Get Product Variant
     * @param {string} productVariantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsVariantsProductVariantId(productVariantId: string, options?: any): RequestArgs;
    /**
     * Request to update a product variants inventory.
     * @summary Update ProductVariant Inventory
     * @param {string} productVariantId
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsVariantsProductVariantIdInventory(productVariantId: string, inlineObject16?: InlineObject16, options?: any): RequestArgs;
};
/**
 * ProductVariantsApi - functional programming interface
 * @export
 */
export declare const ProductVariantsApiFp: (configuration?: Configuration) => {
    /**
     * Get a paginated list of all product variants in the system
     * @summary Get Product Variants
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsVariants(include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantCollection>;
    /**
     * Get a product variant by it\'s ID
     * @summary Get Product Variant
     * @param {string} productVariantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsVariantsProductVariantId(productVariantId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantResponse>;
    /**
     * Request to update a product variants inventory.
     * @summary Update ProductVariant Inventory
     * @param {string} productVariantId
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsVariantsProductVariantIdInventory(productVariantId: string, inlineObject16?: InlineObject16, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductVariantResponse>;
};
/**
 * ProductVariantsApi - factory interface
 * @export
 */
export declare const ProductVariantsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a paginated list of all product variants in the system
     * @summary Get Product Variants
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsVariants(include?: string, options?: any): AxiosPromise<ProductVariantCollection>;
    /**
     * Get a product variant by it\'s ID
     * @summary Get Product Variant
     * @param {string} productVariantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsVariantsProductVariantId(productVariantId: string, options?: any): AxiosPromise<ProductVariantResponse>;
    /**
     * Request to update a product variants inventory.
     * @summary Update ProductVariant Inventory
     * @param {string} productVariantId
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsVariantsProductVariantIdInventory(productVariantId: string, inlineObject16?: InlineObject16, options?: any): AxiosPromise<ProductVariantResponse>;
};
/**
 * ProductVariantsApi - object-oriented interface
 * @export
 * @class ProductVariantsApi
 * @extends {BaseAPI}
 */
export declare class ProductVariantsApi extends BaseAPI {
    /**
     * Get a paginated list of all product variants in the system
     * @summary Get Product Variants
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    getProductsVariants(include?: string, options?: any): AxiosPromise<ProductVariantCollection>;
    /**
     * Get a product variant by it\'s ID
     * @summary Get Product Variant
     * @param {string} productVariantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    getProductsVariantsProductVariantId(productVariantId: string, options?: any): AxiosPromise<ProductVariantResponse>;
    /**
     * Request to update a product variants inventory.
     * @summary Update ProductVariant Inventory
     * @param {string} productVariantId
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductVariantsApi
     */
    putProductsVariantsProductVariantIdInventory(productVariantId: string, inlineObject16?: InlineObject16, options?: any): AxiosPromise<ProductVariantResponse>;
}
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export declare const ProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Detaches a category from a product. Does not delete the category.
     * @summary Detach category
     * @param {string} productId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCategoriesCategory(productId: string, categoryId: string, options?: any): RequestArgs;
    /**
     * Detaches a collection from a product. Does not delete the collection.
     * @summary Detach collection
     * @param {string} productId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCollectionsDetach(productId: string, collectionId: string, options?: any): RequestArgs;
    /**
     * Detaches customer groups from a product
     * @summary Detach customer groups
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCustomerGroups(productId: string, options?: any): RequestArgs;
    /**
     * Deletes a product by it\'s ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @summary Delete Product
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductId(productId: string, options?: any): RequestArgs;
    /**
     * Removes product associations
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductIdAssociations(productId: string, options?: any): RequestArgs;
    /**
     * Gets a paginated list of products.
     * @summary Get Products
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): RequestArgs;
    /**
     * Returns a product by it\'s given ID
     * @summary Get Product
     * @param {string} productId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductId(productId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): RequestArgs;
    /**
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductIdDrafts(productId: string, options?: any): RequestArgs;
    /**
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @summary Get recommended products
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsRecommended(basketId: string, options?: any): RequestArgs;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product redirect
     * @param {string} productId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductRedirects(productId: string, inlineObject19?: InlineObject19, options?: any): RequestArgs;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product route
     * @param {string} productId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductUrls(productId: string, inlineObject18?: InlineObject18, options?: any): RequestArgs;
    /**
     * Creates a new product in the system. When creating a new product will also create 1 variant for that product.
     * @summary Create Product
     * @param {string} [include]
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProducts(include?: string, inlineObject26?: InlineObject26, options?: any): RequestArgs;
    /**
     * Create a draft product from an existing product.
     * @summary Create Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdDrafts(productId: string, options?: any): RequestArgs;
    /**
     * Publish a draft from a Product
     * @summary Publish Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdPublish(productId: string, options?: any): RequestArgs;
    /**
     * Updates product associations
     * @summary Update product associations
     * @param {string} productId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAssociations(productId: string, inlineObject24?: InlineObject24, options?: any): RequestArgs;
    /**
     * Allows you to sync up the attributes which are directly associated to this product.
     * @summary Update Product attributes
     * @param {string} productId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAttributes(productId: string, inlineObject20?: InlineObject20, options?: any): RequestArgs;
    /**
     * Sync product categories
     * @summary Update Product categories
     * @param {string} productId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCategories(productId: string, inlineObject22?: InlineObject22, options?: any): RequestArgs;
    /**
     * Sync product Channels
     * @summary Update Product channels
     * @param {string} productId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductChannels(productId: string, inlineObject23?: InlineObject23, options?: any): RequestArgs;
    /**
     * Update a products customer groups
     * @summary Update customer groups
     * @param {string} productId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCustomerGroups(productId: string, inlineObject25?: InlineObject25, options?: any): RequestArgs;
    /**
     * Update a products collections.
     * @summary Update Product collections
     * @param {string} productId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdCollections(productId: string, inlineObject21?: InlineObject21, options?: any): RequestArgs;
    /**
     * Duplicates a product, requires you to specify new slugs and SKU\'s.  > Duplicated product will not immediately be active.
     * @summary Duplicate Product
     * @param {string} productId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdDuplicate(productId: string, inlineObject17?: InlineObject17, options?: any): RequestArgs;
    /**
     * Updates a product by it\'s ID
     * @summary Update Product
     * @param {string} productId
     * @param {ProductUpdateBody} [productUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsProductId(productId: string, productUpdateBody?: ProductUpdateBody, options?: any): RequestArgs;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     * Detaches a category from a product. Does not delete the category.
     * @summary Detach category
     * @param {string} productId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCategoriesCategory(productId: string, categoryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Detaches a collection from a product. Does not delete the collection.
     * @summary Detach collection
     * @param {string} productId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCollectionsDetach(productId: string, collectionId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Detaches customer groups from a product
     * @summary Detach customer groups
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCustomerGroups(productId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Deletes a product by it\'s ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @summary Delete Product
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductId(productId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Removes product associations
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductIdAssociations(productId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Gets a paginated list of products.
     * @summary Get Products
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCollection>;
    /**
     * Returns a product by it\'s given ID
     * @summary Get Product
     * @param {string} productId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductId(productId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductIdDrafts(productId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @summary Get recommended products
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsRecommended(basketId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductRecommendationCollection>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product redirect
     * @param {string} productId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductRedirects(productId: string, inlineObject19?: InlineObject19, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product route
     * @param {string} productId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductUrls(productId: string, inlineObject18?: InlineObject18, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Creates a new product in the system. When creating a new product will also create 1 variant for that product.
     * @summary Create Product
     * @param {string} [include]
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProducts(include?: string, inlineObject26?: InlineObject26, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Create a draft product from an existing product.
     * @summary Create Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdDrafts(productId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Publish a draft from a Product
     * @summary Publish Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdPublish(productId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Updates product associations
     * @summary Update product associations
     * @param {string} productId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAssociations(productId: string, inlineObject24?: InlineObject24, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Allows you to sync up the attributes which are directly associated to this product.
     * @summary Update Product attributes
     * @param {string} productId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAttributes(productId: string, inlineObject20?: InlineObject20, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Sync product categories
     * @summary Update Product categories
     * @param {string} productId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCategories(productId: string, inlineObject22?: InlineObject22, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Sync product Channels
     * @summary Update Product channels
     * @param {string} productId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductChannels(productId: string, inlineObject23?: InlineObject23, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Update a products customer groups
     * @summary Update customer groups
     * @param {string} productId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCustomerGroups(productId: string, inlineObject25?: InlineObject25, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Update a products collections.
     * @summary Update Product collections
     * @param {string} productId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdCollections(productId: string, inlineObject21?: InlineObject21, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Duplicates a product, requires you to specify new slugs and SKU\'s.  > Duplicated product will not immediately be active.
     * @summary Duplicate Product
     * @param {string} productId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdDuplicate(productId: string, inlineObject17?: InlineObject17, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
    /**
     * Updates a product by it\'s ID
     * @summary Update Product
     * @param {string} productId
     * @param {ProductUpdateBody} [productUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsProductId(productId: string, productUpdateBody?: ProductUpdateBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductResponse>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Detaches a category from a product. Does not delete the category.
     * @summary Detach category
     * @param {string} productId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCategoriesCategory(productId: string, categoryId: string, options?: any): AxiosPromise<void>;
    /**
     * Detaches a collection from a product. Does not delete the collection.
     * @summary Detach collection
     * @param {string} productId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCollectionsDetach(productId: string, collectionId: string, options?: any): AxiosPromise<void>;
    /**
     * Detaches customer groups from a product
     * @summary Detach customer groups
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductCustomerGroups(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Deletes a product by it\'s ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @summary Delete Product
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductId(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Removes product associations
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductsProductIdAssociations(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a paginated list of products.
     * @summary Get Products
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): AxiosPromise<ProductCollection>;
    /**
     * Returns a product by it\'s given ID
     * @summary Get Product
     * @param {string} productId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductId(productId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsProductIdDrafts(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @summary Get recommended products
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsRecommended(basketId: string, options?: any): AxiosPromise<ProductRecommendationCollection>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product redirect
     * @param {string} productId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductRedirects(productId: string, inlineObject19?: InlineObject19, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product route
     * @param {string} productId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductUrls(productId: string, inlineObject18?: InlineObject18, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Creates a new product in the system. When creating a new product will also create 1 variant for that product.
     * @summary Create Product
     * @param {string} [include]
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProducts(include?: string, inlineObject26?: InlineObject26, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Create a draft product from an existing product.
     * @summary Create Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdDrafts(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Publish a draft from a Product
     * @summary Publish Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsIdPublish(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Updates product associations
     * @summary Update product associations
     * @param {string} productId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAssociations(productId: string, inlineObject24?: InlineObject24, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Allows you to sync up the attributes which are directly associated to this product.
     * @summary Update Product attributes
     * @param {string} productId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductAttributes(productId: string, inlineObject20?: InlineObject20, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Sync product categories
     * @summary Update Product categories
     * @param {string} productId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCategories(productId: string, inlineObject22?: InlineObject22, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Sync product Channels
     * @summary Update Product channels
     * @param {string} productId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductChannels(productId: string, inlineObject23?: InlineObject23, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Update a products customer groups
     * @summary Update customer groups
     * @param {string} productId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductCustomerGroups(productId: string, inlineObject25?: InlineObject25, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Update a products collections.
     * @summary Update Product collections
     * @param {string} productId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdCollections(productId: string, inlineObject21?: InlineObject21, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Duplicates a product, requires you to specify new slugs and SKU\'s.  > Duplicated product will not immediately be active.
     * @summary Duplicate Product
     * @param {string} productId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postProductsProductIdDuplicate(productId: string, inlineObject17?: InlineObject17, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Updates a product by it\'s ID
     * @summary Update Product
     * @param {string} productId
     * @param {ProductUpdateBody} [productUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putProductsProductId(productId: string, productUpdateBody?: ProductUpdateBody, options?: any): AxiosPromise<ProductResponse>;
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI {
    /**
     * Detaches a category from a product. Does not delete the category.
     * @summary Detach category
     * @param {string} productId
     * @param {string} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductCategoriesCategory(productId: string, categoryId: string, options?: any): AxiosPromise<void>;
    /**
     * Detaches a collection from a product. Does not delete the collection.
     * @summary Detach collection
     * @param {string} productId
     * @param {string} collectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductCollectionsDetach(productId: string, collectionId: string, options?: any): AxiosPromise<void>;
    /**
     * Detaches customer groups from a product
     * @summary Detach customer groups
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductCustomerGroups(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Deletes a product by it\'s ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @summary Delete Product
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductId(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Removes product associations
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductsProductIdAssociations(productId: string, options?: any): AxiosPromise<void>;
    /**
     * Gets a paginated list of products.
     * @summary Get Products
     * @param {string} [include]
     * @param {boolean} [paginated]
     * @param {string} [ids] Return only the selected IDs
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProducts(include?: string, paginated?: boolean, ids?: string, limit?: number, options?: any): AxiosPromise<ProductCollection>;
    /**
     * Returns a product by it\'s given ID
     * @summary Get Product
     * @param {string} productId
     * @param {string} [include]
     * @param {string} [exclTax] Prices shouldn\&#39;t include tax
     * @param {string} [fullResponse] Returns full &#x60;attribute_data&#x60; in response
     * @param {string} [optionData] Include option data
     * @param {string} [draft] Show draft if exists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductsProductId(productId: string, include?: string, exclTax?: string, fullResponse?: string, optionData?: string, draft?: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @summary Create draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductsProductIdDrafts(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @summary Get recommended products
     * @param {string} basketId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductsRecommended(basketId: string, options?: any): AxiosPromise<ProductRecommendationCollection>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product redirect
     * @param {string} productId
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductRedirects(productId: string, inlineObject19?: InlineObject19, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Creates and syncs a new product route.
     * @summary Create Product route
     * @param {string} productId
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductUrls(productId: string, inlineObject18?: InlineObject18, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Creates a new product in the system. When creating a new product will also create 1 variant for that product.
     * @summary Create Product
     * @param {string} [include]
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProducts(include?: string, inlineObject26?: InlineObject26, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Create a draft product from an existing product.
     * @summary Create Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsIdDrafts(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Publish a draft from a Product
     * @summary Publish Draft
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsIdPublish(productId: string, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Updates product associations
     * @summary Update product associations
     * @param {string} productId
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductAssociations(productId: string, inlineObject24?: InlineObject24, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Allows you to sync up the attributes which are directly associated to this product.
     * @summary Update Product attributes
     * @param {string} productId
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductAttributes(productId: string, inlineObject20?: InlineObject20, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Sync product categories
     * @summary Update Product categories
     * @param {string} productId
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductCategories(productId: string, inlineObject22?: InlineObject22, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Sync product Channels
     * @summary Update Product channels
     * @param {string} productId
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductChannels(productId: string, inlineObject23?: InlineObject23, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Update a products customer groups
     * @summary Update customer groups
     * @param {string} productId
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductCustomerGroups(productId: string, inlineObject25?: InlineObject25, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Update a products collections.
     * @summary Update Product collections
     * @param {string} productId
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductIdCollections(productId: string, inlineObject21?: InlineObject21, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Duplicates a product, requires you to specify new slugs and SKU\'s.  > Duplicated product will not immediately be active.
     * @summary Duplicate Product
     * @param {string} productId
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    postProductsProductIdDuplicate(productId: string, inlineObject17?: InlineObject17, options?: any): AxiosPromise<ProductResponse>;
    /**
     * Updates a product by it\'s ID
     * @summary Update Product
     * @param {string} productId
     * @param {ProductUpdateBody} [productUpdateBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    putProductsProductId(productId: string, productUpdateBody?: ProductUpdateBody, options?: any): AxiosPromise<ProductResponse>;
}
/**
 * RecycleBinApi - axios parameter creator
 * @export
 */
export declare const RecycleBinApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
     * @summary Delete item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecycleBinItemId(itemId: string, options?: any): RequestArgs;
    /**
     * Returns a paginated list of all recycle bin items.
     * @summary Get records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecycleBin(options?: any): RequestArgs;
    /**
     * Retrieves a recycle bin item.
     * @summary Get item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecycleBinItemId(itemId: string, options?: any): RequestArgs;
};
/**
 * RecycleBinApi - functional programming interface
 * @export
 */
export declare const RecycleBinApiFp: (configuration?: Configuration) => {
    /**
     * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
     * @summary Delete item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecycleBinItemId(itemId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Returns a paginated list of all recycle bin items.
     * @summary Get records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecycleBin(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecycleBinCollection>;
    /**
     * Retrieves a recycle bin item.
     * @summary Get item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecycleBinItemId(itemId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecycleBinResponse>;
};
/**
 * RecycleBinApi - factory interface
 * @export
 */
export declare const RecycleBinApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
     * @summary Delete item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRecycleBinItemId(itemId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of all recycle bin items.
     * @summary Get records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecycleBin(options?: any): AxiosPromise<RecycleBinCollection>;
    /**
     * Retrieves a recycle bin item.
     * @summary Get item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecycleBinItemId(itemId: string, options?: any): AxiosPromise<RecycleBinResponse>;
};
/**
 * RecycleBinApi - object-oriented interface
 * @export
 * @class RecycleBinApi
 * @extends {BaseAPI}
 */
export declare class RecycleBinApi extends BaseAPI {
    /**
     * Remove a recycle bin item  > This will also hard delete the model associated with the recycle bin item, this action is not reversable and will cause loss of data.
     * @summary Delete item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    deleteRecycleBinItemId(itemId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of all recycle bin items.
     * @summary Get records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    getRecycleBin(options?: any): AxiosPromise<RecycleBinCollection>;
    /**
     * Retrieves a recycle bin item.
     * @summary Get item
     * @param {string} itemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecycleBinApi
     */
    getRecycleBinItemId(itemId: string, options?: any): AxiosPromise<RecycleBinResponse>;
}
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export declare const ReportsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Gets best selling products grouped by month.
     * @summary Get best selling products
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsBestSellers(from?: string, to?: string, options?: any): RequestArgs;
    /**
     * Returns metric (KPI) data for either sales or orders.
     * @summary Get metric data
     * @param {'sales' | 'orders'} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsMetricsSubject(subject: 'sales' | 'orders', options?: any): RequestArgs;
    /**
     * Returns a report for orders between a given date range
     * @summary Get sales report
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrders(from?: string, to?: string, options?: any): RequestArgs;
    /**
     * Returns an array of order averages between a given date range.
     * @summary Get order averages
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {'weekly' | 'daily' | 'yearly' | 'monthly'} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrdersAverages(from?: string, to?: string, mode?: 'weekly' | 'daily' | 'yearly' | 'monthly', options?: any): RequestArgs;
    /**
     * Returns a monthly grouped list of new/returning and total customers.
     * @summary Get Customer Report
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrdersCustomers(from?: string, to?: string, options?: any): RequestArgs;
    /**
     * This endpoints returns sales report figures.  > Currently this provides data suitable for chartjs.org but this is subject to change and be more decoupled in a future release.
     * @summary Get sales report
     * @param {string} from The from date
     * @param {string} [to] The to date
     * @param {'weekly' | 'monthly' | 'daily'} [mode] The dataset mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsSales(from: string, to?: string, mode?: 'weekly' | 'monthly' | 'daily', options?: any): RequestArgs;
};
/**
 * ReportsApi - functional programming interface
 * @export
 */
export declare const ReportsApiFp: (configuration?: Configuration) => {
    /**
     * Gets best selling products grouped by month.
     * @summary Get best selling products
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsBestSellers(from?: string, to?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>;
    /**
     * Returns metric (KPI) data for either sales or orders.
     * @summary Get metric data
     * @param {'sales' | 'orders'} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsMetricsSubject(subject: 'sales' | 'orders', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>;
    /**
     * Returns a report for orders between a given date range
     * @summary Get sales report
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrders(from?: string, to?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2001>>;
    /**
     * Returns an array of order averages between a given date range.
     * @summary Get order averages
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {'weekly' | 'daily' | 'yearly' | 'monthly'} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrdersAverages(from?: string, to?: string, mode?: 'weekly' | 'daily' | 'yearly' | 'monthly', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2003>>;
    /**
     * Returns a monthly grouped list of new/returning and total customers.
     * @summary Get Customer Report
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrdersCustomers(from?: string, to?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>;
    /**
     * This endpoints returns sales report figures.  > Currently this provides data suitable for chartjs.org but this is subject to change and be more decoupled in a future release.
     * @summary Get sales report
     * @param {string} from The from date
     * @param {string} [to] The to date
     * @param {'weekly' | 'monthly' | 'daily'} [mode] The dataset mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsSales(from: string, to?: string, mode?: 'weekly' | 'monthly' | 'daily', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>;
};
/**
 * ReportsApi - factory interface
 * @export
 */
export declare const ReportsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Gets best selling products grouped by month.
     * @summary Get best selling products
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductsBestSellers(from?: string, to?: string, options?: any): AxiosPromise<InlineResponse2004>;
    /**
     * Returns metric (KPI) data for either sales or orders.
     * @summary Get metric data
     * @param {'sales' | 'orders'} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsMetricsSubject(subject: 'sales' | 'orders', options?: any): AxiosPromise<InlineResponse2005>;
    /**
     * Returns a report for orders between a given date range
     * @summary Get sales report
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrders(from?: string, to?: string, options?: any): AxiosPromise<Array<InlineResponse2001>>;
    /**
     * Returns an array of order averages between a given date range.
     * @summary Get order averages
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {'weekly' | 'daily' | 'yearly' | 'monthly'} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrdersAverages(from?: string, to?: string, mode?: 'weekly' | 'daily' | 'yearly' | 'monthly', options?: any): AxiosPromise<Array<InlineResponse2003>>;
    /**
     * Returns a monthly grouped list of new/returning and total customers.
     * @summary Get Customer Report
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsOrdersCustomers(from?: string, to?: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     * This endpoints returns sales report figures.  > Currently this provides data suitable for chartjs.org but this is subject to change and be more decoupled in a future release.
     * @summary Get sales report
     * @param {string} from The from date
     * @param {string} [to] The to date
     * @param {'weekly' | 'monthly' | 'daily'} [mode] The dataset mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportsSales(from: string, to?: string, mode?: 'weekly' | 'monthly' | 'daily', options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export declare class ReportsApi extends BaseAPI {
    /**
     * Gets best selling products grouped by month.
     * @summary Get best selling products
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getProductsBestSellers(from?: string, to?: string, options?: any): AxiosPromise<InlineResponse2004>;
    /**
     * Returns metric (KPI) data for either sales or orders.
     * @summary Get metric data
     * @param {'sales' | 'orders'} subject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReportsMetricsSubject(subject: 'sales' | 'orders', options?: any): AxiosPromise<InlineResponse2005>;
    /**
     * Returns a report for orders between a given date range
     * @summary Get sales report
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReportsOrders(from?: string, to?: string, options?: any): AxiosPromise<InlineResponse2001[]>;
    /**
     * Returns an array of order averages between a given date range.
     * @summary Get order averages
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {'weekly' | 'daily' | 'yearly' | 'monthly'} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReportsOrdersAverages(from?: string, to?: string, mode?: 'weekly' | 'daily' | 'yearly' | 'monthly', options?: any): AxiosPromise<InlineResponse2003[]>;
    /**
     * Returns a monthly grouped list of new/returning and total customers.
     * @summary Get Customer Report
     * @param {string} [from] The from date
     * @param {string} [to] The to date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReportsOrdersCustomers(from?: string, to?: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     * This endpoints returns sales report figures.  > Currently this provides data suitable for chartjs.org but this is subject to change and be more decoupled in a future release.
     * @summary Get sales report
     * @param {string} from The from date
     * @param {string} [to] The to date
     * @param {'weekly' | 'monthly' | 'daily'} [mode] The dataset mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    getReportsSales(from: string, to?: string, mode?: 'weekly' | 'monthly' | 'daily', options?: any): AxiosPromise<InlineResponse200>;
}
/**
 * RootApi - axios parameter creator
 * @export
 */
export declare const RootApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns information about the API
     * @summary Get root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(options?: any): RequestArgs;
};
/**
 * RootApi - functional programming interface
 * @export
 */
export declare const RootApiFp: (configuration?: Configuration) => {
    /**
     * Returns information about the API
     * @summary Get root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Root>;
};
/**
 * RootApi - factory interface
 * @export
 */
export declare const RootApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns information about the API
     * @summary Get root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(options?: any): AxiosPromise<Root>;
};
/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export declare class RootApi extends BaseAPI {
    /**
     * Returns information about the API
     * @summary Get root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    get(options?: any): AxiosPromise<Root>;
}
/**
 * RoutesApi - axios parameter creator
 * @export
 */
export declare const RoutesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns paginated list of routes.
     * @summary Get routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutes(options?: any): RequestArgs;
    /**
     * Retrieve a route by it\'s slug.
     * @summary Get route
     * @param {string} slug
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutesSlug(slug: string, include?: string, options?: any): RequestArgs;
};
/**
 * RoutesApi - functional programming interface
 * @export
 */
export declare const RoutesApiFp: (configuration?: Configuration) => {
    /**
     * Returns paginated list of routes.
     * @summary Get routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutes(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RouteCollection>;
    /**
     * Retrieve a route by it\'s slug.
     * @summary Get route
     * @param {string} slug
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutesSlug(slug: string, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RouteResponse>;
};
/**
 * RoutesApi - factory interface
 * @export
 */
export declare const RoutesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns paginated list of routes.
     * @summary Get routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutes(options?: any): AxiosPromise<RouteCollection>;
    /**
     * Retrieve a route by it\'s slug.
     * @summary Get route
     * @param {string} slug
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoutesSlug(slug: string, include?: string, options?: any): AxiosPromise<RouteResponse>;
};
/**
 * RoutesApi - object-oriented interface
 * @export
 * @class RoutesApi
 * @extends {BaseAPI}
 */
export declare class RoutesApi extends BaseAPI {
    /**
     * Returns paginated list of routes.
     * @summary Get routes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    getRoutes(options?: any): AxiosPromise<RouteCollection>;
    /**
     * Retrieve a route by it\'s slug.
     * @summary Get route
     * @param {string} slug
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    getRoutesSlug(slug: string, include?: string, options?: any): AxiosPromise<RouteResponse>;
}
/**
 * SearchApi - axios parameter creator
 * @export
 */
export declare const SearchApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearchesSavedSearchId(savedSearchId: string, options?: any): RequestArgs;
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearches(options?: any): RequestArgs;
    /**
     * Search across products or categories
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'category' | 'product'} [searchType]
     * @param {string} [keywords]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {string} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearch(channel?: string, category?: string, page?: number, searchType?: 'category' | 'product', keywords?: string, rank?: boolean, idsOnly?: string, include?: string, sort?: string, options?: any): RequestArgs;
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export declare const SearchApiFp: (configuration?: Configuration) => {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearchesSavedSearchId(savedSearchId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearches(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedSearchCollection>;
    /**
     * Search across products or categories
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'category' | 'product'} [searchType]
     * @param {string} [keywords]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {string} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearch(channel?: string, category?: string, page?: number, searchType?: 'category' | 'product', keywords?: string, rank?: boolean, idsOnly?: string, include?: string, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Search>;
};
/**
 * SearchApi - factory interface
 * @export
 */
export declare const SearchApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSavedSearchesSavedSearchId(savedSearchId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSavedSearches(options?: any): AxiosPromise<SavedSearchCollection>;
    /**
     * Search across products or categories
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'category' | 'product'} [searchType]
     * @param {string} [keywords]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {string} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSearch(channel?: string, category?: string, page?: number, searchType?: 'category' | 'product', keywords?: string, rank?: boolean, idsOnly?: string, include?: string, sort?: string, options?: any): AxiosPromise<Search>;
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export declare class SearchApi extends BaseAPI {
    /**
     * Delete a saved search entry by ID.
     * @summary Delete saved search
     * @param {string} savedSearchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    deleteSavedSearchesSavedSearchId(savedSearchId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a list of current saved searches for products
     * @summary Get saved searches
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    getSavedSearches(options?: any): AxiosPromise<SavedSearchCollection>;
    /**
     * Search across products or categories
     * @summary Search GetCandy
     * @param {string} [channel]
     * @param {string} [category]
     * @param {number} [page]
     * @param {'category' | 'product'} [searchType]
     * @param {string} [keywords]
     * @param {boolean} [rank] Whether to rank results based on config
     * @param {string} [idsOnly] Will only return result ID\&#39;s, good for performance
     * @param {string} [include]
     * @param {string} [sort]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    getSearch(channel?: string, category?: string, page?: number, searchType?: 'category' | 'product', keywords?: string, rank?: boolean, idsOnly?: string, include?: string, sort?: string, options?: any): AxiosPromise<Search>;
}
/**
 * SettingsApi - axios parameter creator
 * @export
 */
export declare const SettingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieves settings that have been defined in the database.
     * @summary Get settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: any): RequestArgs;
    /**
     * Get specific settings.
     * @summary Get setting
     * @param {string} handle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettingsHandle(handle: string, options?: any): RequestArgs;
};
/**
 * SettingsApi - functional programming interface
 * @export
 */
export declare const SettingsApiFp: (configuration?: Configuration) => {
    /**
     * Retrieves settings that have been defined in the database.
     * @summary Get settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingCollection>;
    /**
     * Get specific settings.
     * @summary Get setting
     * @param {string} handle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettingsHandle(handle: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingResponse>;
};
/**
 * SettingsApi - factory interface
 * @export
 */
export declare const SettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves settings that have been defined in the database.
     * @summary Get settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettings(options?: any): AxiosPromise<SettingCollection>;
    /**
     * Get specific settings.
     * @summary Get setting
     * @param {string} handle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSettingsHandle(handle: string, options?: any): AxiosPromise<SettingResponse>;
};
/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export declare class SettingsApi extends BaseAPI {
    /**
     * Retrieves settings that have been defined in the database.
     * @summary Get settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    getSettings(options?: any): AxiosPromise<SettingCollection>;
    /**
     * Get specific settings.
     * @summary Get setting
     * @param {string} handle
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    getSettingsHandle(handle: string, options?: any): AxiosPromise<SettingResponse>;
}
/**
 * ShippingApi - axios parameter creator
 * @export
 */
export declare const ShippingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes a shipping method.
     * @summary Delete shipping method
     * @param {string} shippingMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShippingShippingMethodId(shippingMethodId: string, options?: any): RequestArgs;
    /**
     * Returns a paginated list of shipping methods
     * @summary Get shipping methods
     * @param {number} [perPage]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipping(perPage?: number, include?: string, options?: any): RequestArgs;
    /**
     * Returns a shipping method by it\'s ID.
     * @summary Get shipping methods
     * @param {string} shippingMethodId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingShippingMethodId(shippingMethodId: string, include?: string, options?: any): RequestArgs;
    /**
     * Returns a paginated list of shipping zones.
     * @summary Get Shipping Zones
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingZones(include?: string, options?: any): RequestArgs;
    /**
     * Get a shipping zone by it\'s ID.
     * @summary Get Shipping Zone
     * @param {string} shippingZoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingZonesShippingZoneId(shippingZoneId: string, options?: any): RequestArgs;
    /**
     * Create a new shipping method.
     * @summary Create shipping method
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShipping(inlineObject33?: InlineObject33, options?: any): RequestArgs;
    /**
     * Add a price to a shipping method.
     * @summary Add shipping price
     * @param {string} shippingMethodId
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShippingIdPrices(shippingMethodId: string, inlineObject29?: InlineObject29, options?: any): RequestArgs;
    /**
     * Create a new shipping zone
     * @summary Create Shipping Zone
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShippingZones(inlineObject28?: InlineObject28, options?: any): RequestArgs;
    /**
     * Update shipping method users
     * @summary Update shipping method users
     * @param {string} id
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingIdUsers(id: string, inlineObject32?: InlineObject32, options?: any): RequestArgs;
    /**
     * Update a shipping price
     * @summary Update shipping price
     * @param {string} shippingPriceId
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingPricesShippingPriceId(shippingPriceId: string, inlineObject30?: InlineObject30, options?: any): RequestArgs;
    /**
     * Update shipping method by it\'s ID
     * @summary Update shipping method
     * @param {string} shippingMethodId
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingShippingMethodId(shippingMethodId: string, inlineObject34?: InlineObject34, options?: any): RequestArgs;
    /**
     * Update a shipping method\'s zones.
     * @summary Update shipping method zones
     * @param {string} shippingMethodId
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingShippingMethodIdZones(shippingMethodId: string, inlineObject31?: InlineObject31, options?: any): RequestArgs;
};
/**
 * ShippingApi - functional programming interface
 * @export
 */
export declare const ShippingApiFp: (configuration?: Configuration) => {
    /**
     * Deletes a shipping method.
     * @summary Delete shipping method
     * @param {string} shippingMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShippingShippingMethodId(shippingMethodId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Returns a paginated list of shipping methods
     * @summary Get shipping methods
     * @param {number} [perPage]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipping(perPage?: number, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodCollection>;
    /**
     * Returns a shipping method by it\'s ID.
     * @summary Get shipping methods
     * @param {string} shippingMethodId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingShippingMethodId(shippingMethodId: string, include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodResponse>;
    /**
     * Returns a paginated list of shipping zones.
     * @summary Get Shipping Zones
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingZones(include?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingZoneCollection>;
    /**
     * Get a shipping zone by it\'s ID.
     * @summary Get Shipping Zone
     * @param {string} shippingZoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingZonesShippingZoneId(shippingZoneId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingZoneResponse>;
    /**
     * Create a new shipping method.
     * @summary Create shipping method
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShipping(inlineObject33?: InlineObject33, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>;
    /**
     * Add a price to a shipping method.
     * @summary Add shipping price
     * @param {string} shippingMethodId
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShippingIdPrices(shippingMethodId: string, inlineObject29?: InlineObject29, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingPriceResponse>;
    /**
     * Create a new shipping zone
     * @summary Create Shipping Zone
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShippingZones(inlineObject28?: InlineObject28, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingZoneResponse>;
    /**
     * Update shipping method users
     * @summary Update shipping method users
     * @param {string} id
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingIdUsers(id: string, inlineObject32?: InlineObject32, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodResponse>;
    /**
     * Update a shipping price
     * @summary Update shipping price
     * @param {string} shippingPriceId
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingPricesShippingPriceId(shippingPriceId: string, inlineObject30?: InlineObject30, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingPriceResponse>;
    /**
     * Update shipping method by it\'s ID
     * @summary Update shipping method
     * @param {string} shippingMethodId
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingShippingMethodId(shippingMethodId: string, inlineObject34?: InlineObject34, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodResponse>;
    /**
     * Update a shipping method\'s zones.
     * @summary Update shipping method zones
     * @param {string} shippingMethodId
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingShippingMethodIdZones(shippingMethodId: string, inlineObject31?: InlineObject31, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingMethodResponse>;
};
/**
 * ShippingApi - factory interface
 * @export
 */
export declare const ShippingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes a shipping method.
     * @summary Delete shipping method
     * @param {string} shippingMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShippingShippingMethodId(shippingMethodId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of shipping methods
     * @summary Get shipping methods
     * @param {number} [perPage]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShipping(perPage?: number, include?: string, options?: any): AxiosPromise<ShippingMethodCollection>;
    /**
     * Returns a shipping method by it\'s ID.
     * @summary Get shipping methods
     * @param {string} shippingMethodId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingShippingMethodId(shippingMethodId: string, include?: string, options?: any): AxiosPromise<ShippingMethodResponse>;
    /**
     * Returns a paginated list of shipping zones.
     * @summary Get Shipping Zones
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingZones(include?: string, options?: any): AxiosPromise<ShippingZoneCollection>;
    /**
     * Get a shipping zone by it\'s ID.
     * @summary Get Shipping Zone
     * @param {string} shippingZoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShippingZonesShippingZoneId(shippingZoneId: string, options?: any): AxiosPromise<ShippingZoneResponse>;
    /**
     * Create a new shipping method.
     * @summary Create shipping method
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShipping(inlineObject33?: InlineObject33, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     * Add a price to a shipping method.
     * @summary Add shipping price
     * @param {string} shippingMethodId
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShippingIdPrices(shippingMethodId: string, inlineObject29?: InlineObject29, options?: any): AxiosPromise<ShippingPriceResponse>;
    /**
     * Create a new shipping zone
     * @summary Create Shipping Zone
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postShippingZones(inlineObject28?: InlineObject28, options?: any): AxiosPromise<ShippingZoneResponse>;
    /**
     * Update shipping method users
     * @summary Update shipping method users
     * @param {string} id
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingIdUsers(id: string, inlineObject32?: InlineObject32, options?: any): AxiosPromise<ShippingMethodResponse>;
    /**
     * Update a shipping price
     * @summary Update shipping price
     * @param {string} shippingPriceId
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingPricesShippingPriceId(shippingPriceId: string, inlineObject30?: InlineObject30, options?: any): AxiosPromise<ShippingPriceResponse>;
    /**
     * Update shipping method by it\'s ID
     * @summary Update shipping method
     * @param {string} shippingMethodId
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingShippingMethodId(shippingMethodId: string, inlineObject34?: InlineObject34, options?: any): AxiosPromise<ShippingMethodResponse>;
    /**
     * Update a shipping method\'s zones.
     * @summary Update shipping method zones
     * @param {string} shippingMethodId
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShippingShippingMethodIdZones(shippingMethodId: string, inlineObject31?: InlineObject31, options?: any): AxiosPromise<ShippingMethodResponse>;
};
/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export declare class ShippingApi extends BaseAPI {
    /**
     * Deletes a shipping method.
     * @summary Delete shipping method
     * @param {string} shippingMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    deleteShippingShippingMethodId(shippingMethodId: string, options?: any): AxiosPromise<void>;
    /**
     * Returns a paginated list of shipping methods
     * @summary Get shipping methods
     * @param {number} [perPage]
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    getShipping(perPage?: number, include?: string, options?: any): AxiosPromise<ShippingMethodCollection>;
    /**
     * Returns a shipping method by it\'s ID.
     * @summary Get shipping methods
     * @param {string} shippingMethodId
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    getShippingShippingMethodId(shippingMethodId: string, include?: string, options?: any): AxiosPromise<ShippingMethodResponse>;
    /**
     * Returns a paginated list of shipping zones.
     * @summary Get Shipping Zones
     * @param {string} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    getShippingZones(include?: string, options?: any): AxiosPromise<ShippingZoneCollection>;
    /**
     * Get a shipping zone by it\'s ID.
     * @summary Get Shipping Zone
     * @param {string} shippingZoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    getShippingZonesShippingZoneId(shippingZoneId: string, options?: any): AxiosPromise<ShippingZoneResponse>;
    /**
     * Create a new shipping method.
     * @summary Create shipping method
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    postShipping(inlineObject33?: InlineObject33, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     * Add a price to a shipping method.
     * @summary Add shipping price
     * @param {string} shippingMethodId
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    postShippingIdPrices(shippingMethodId: string, inlineObject29?: InlineObject29, options?: any): AxiosPromise<ShippingPriceResponse>;
    /**
     * Create a new shipping zone
     * @summary Create Shipping Zone
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    postShippingZones(inlineObject28?: InlineObject28, options?: any): AxiosPromise<ShippingZoneResponse>;
    /**
     * Update shipping method users
     * @summary Update shipping method users
     * @param {string} id
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    putShippingIdUsers(id: string, inlineObject32?: InlineObject32, options?: any): AxiosPromise<ShippingMethodResponse>;
    /**
     * Update a shipping price
     * @summary Update shipping price
     * @param {string} shippingPriceId
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    putShippingPricesShippingPriceId(shippingPriceId: string, inlineObject30?: InlineObject30, options?: any): AxiosPromise<ShippingPriceResponse>;
    /**
     * Update shipping method by it\'s ID
     * @summary Update shipping method
     * @param {string} shippingMethodId
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    putShippingShippingMethodId(shippingMethodId: string, inlineObject34?: InlineObject34, options?: any): AxiosPromise<ShippingMethodResponse>;
    /**
     * Update a shipping method\'s zones.
     * @summary Update shipping method zones
     * @param {string} shippingMethodId
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    putShippingShippingMethodIdZones(shippingMethodId: string, inlineObject31?: InlineObject31, options?: any): AxiosPromise<ShippingMethodResponse>;
}
/**
 * TagsApi - axios parameter creator
 * @export
 */
export declare const TagsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Deletes a tag by it\'s ID
     * @summary Delete a tag
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsTagId(tagId: string, options?: any): RequestArgs;
    /**
     * Get paginated list of tags
     * @summary Get all tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags(options?: any): RequestArgs;
    /**
     * Gets a tag by it\'s ID
     * @summary Get a tag
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagsTagId(tagId: string, options?: any): RequestArgs;
    /**
     * Create a new tag
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTags(inlineObject35?: InlineObject35, options?: any): RequestArgs;
    /**
     * Updates a tag by it\'s ID
     * @summary Update a tag
     * @param {string} tagId
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTagsTagId(tagId: string, inlineObject36?: InlineObject36, options?: any): RequestArgs;
};
/**
 * TagsApi - functional programming interface
 * @export
 */
export declare const TagsApiFp: (configuration?: Configuration) => {
    /**
     * Deletes a tag by it\'s ID
     * @summary Delete a tag
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsTagId(tagId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Get paginated list of tags
     * @summary Get all tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagCollection>;
    /**
     * Gets a tag by it\'s ID
     * @summary Get a tag
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagsTagId(tagId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>;
    /**
     * Create a new tag
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTags(inlineObject35?: InlineObject35, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>;
    /**
     * Updates a tag by it\'s ID
     * @summary Update a tag
     * @param {string} tagId
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTagsTagId(tagId: string, inlineObject36?: InlineObject36, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>;
};
/**
 * TagsApi - factory interface
 * @export
 */
export declare const TagsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Deletes a tag by it\'s ID
     * @summary Delete a tag
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagsTagId(tagId: string, options?: any): AxiosPromise<void>;
    /**
     * Get paginated list of tags
     * @summary Get all tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags(options?: any): AxiosPromise<TagCollection>;
    /**
     * Gets a tag by it\'s ID
     * @summary Get a tag
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagsTagId(tagId: string, options?: any): AxiosPromise<TagResponse>;
    /**
     * Create a new tag
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTags(inlineObject35?: InlineObject35, options?: any): AxiosPromise<TagResponse>;
    /**
     * Updates a tag by it\'s ID
     * @summary Update a tag
     * @param {string} tagId
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTagsTagId(tagId: string, inlineObject36?: InlineObject36, options?: any): AxiosPromise<TagResponse>;
};
/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export declare class TagsApi extends BaseAPI {
    /**
     * Deletes a tag by it\'s ID
     * @summary Delete a tag
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    deleteTagsTagId(tagId: string, options?: any): AxiosPromise<void>;
    /**
     * Get paginated list of tags
     * @summary Get all tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    getTags(options?: any): AxiosPromise<TagCollection>;
    /**
     * Gets a tag by it\'s ID
     * @summary Get a tag
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    getTagsTagId(tagId: string, options?: any): AxiosPromise<TagResponse>;
    /**
     * Create a new tag
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    postTags(inlineObject35?: InlineObject35, options?: any): AxiosPromise<TagResponse>;
    /**
     * Updates a tag by it\'s ID
     * @summary Update a tag
     * @param {string} tagId
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    putTagsTagId(tagId: string, inlineObject36?: InlineObject36, options?: any): AxiosPromise<TagResponse>;
}
/**
 * TaxesApi - axios parameter creator
 * @export
 */
export declare const TaxesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a tax record by it\'s ID.
     * @summary Delete tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaxesTaxId(taxId: string, options?: any): RequestArgs;
    /**
     * Get a paginated list of taxes
     * @summary Get taxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxes(options?: any): RequestArgs;
    /**
     * Get a tax record by it\'s ID
     * @summary Get tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxesTaxId(taxId: string, options?: any): RequestArgs;
    /**
     * Create a new tax resource.
     * @summary Create tax
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTaxes(inlineObject37?: InlineObject37, options?: any): RequestArgs;
    /**
     * Update a tax record by it\'s ID
     * @summary Update tax record
     * @param {string} taxId
     * @param {InlineObject38} [inlineObject38]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTaxesTaxId(taxId: string, inlineObject38?: InlineObject38, options?: any): RequestArgs;
};
/**
 * TaxesApi - functional programming interface
 * @export
 */
export declare const TaxesApiFp: (configuration?: Configuration) => {
    /**
     * Delete a tax record by it\'s ID.
     * @summary Delete tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaxesTaxId(taxId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Get a paginated list of taxes
     * @summary Get taxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxes(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxCollection>;
    /**
     * Get a tax record by it\'s ID
     * @summary Get tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxesTaxId(taxId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxResponse>;
    /**
     * Create a new tax resource.
     * @summary Create tax
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTaxes(inlineObject37?: InlineObject37, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxResponse>;
    /**
     * Update a tax record by it\'s ID
     * @summary Update tax record
     * @param {string} taxId
     * @param {InlineObject38} [inlineObject38]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTaxesTaxId(taxId: string, inlineObject38?: InlineObject38, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaxResponse>;
};
/**
 * TaxesApi - factory interface
 * @export
 */
export declare const TaxesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a tax record by it\'s ID.
     * @summary Delete tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTaxesTaxId(taxId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a paginated list of taxes
     * @summary Get taxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxes(options?: any): AxiosPromise<TaxCollection>;
    /**
     * Get a tax record by it\'s ID
     * @summary Get tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaxesTaxId(taxId: string, options?: any): AxiosPromise<TaxResponse>;
    /**
     * Create a new tax resource.
     * @summary Create tax
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTaxes(inlineObject37?: InlineObject37, options?: any): AxiosPromise<TaxResponse>;
    /**
     * Update a tax record by it\'s ID
     * @summary Update tax record
     * @param {string} taxId
     * @param {InlineObject38} [inlineObject38]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTaxesTaxId(taxId: string, inlineObject38?: InlineObject38, options?: any): AxiosPromise<TaxResponse>;
};
/**
 * TaxesApi - object-oriented interface
 * @export
 * @class TaxesApi
 * @extends {BaseAPI}
 */
export declare class TaxesApi extends BaseAPI {
    /**
     * Delete a tax record by it\'s ID.
     * @summary Delete tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    deleteTaxesTaxId(taxId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a paginated list of taxes
     * @summary Get taxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    getTaxes(options?: any): AxiosPromise<TaxCollection>;
    /**
     * Get a tax record by it\'s ID
     * @summary Get tax record
     * @param {string} taxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    getTaxesTaxId(taxId: string, options?: any): AxiosPromise<TaxResponse>;
    /**
     * Create a new tax resource.
     * @summary Create tax
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    postTaxes(inlineObject37?: InlineObject37, options?: any): AxiosPromise<TaxResponse>;
    /**
     * Update a tax record by it\'s ID
     * @summary Update tax record
     * @param {string} taxId
     * @param {InlineObject38} [inlineObject38]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaxesApi
     */
    putTaxesTaxId(taxId: string, inlineObject38?: InlineObject38, options?: any): AxiosPromise<TaxResponse>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete a user by their given ID.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersUserId(userId: string, options?: any): RequestArgs;
    /**
     * Get a paginated list of users.
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): RequestArgs;
    /**
     * Returns the user associated to the access token.
     * @summary Get the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersCurrent(options?: any): RequestArgs;
    /**
     * Get a user by their given ID.
     * @summary Get user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserId(userId: string, options?: any): RequestArgs;
    /**
     * Allows the current user to update their password.
     * @summary Reset  password
     * @param {AccountPasswordResetBody} [accountPasswordResetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAccountPassword(accountPasswordResetBody?: AccountPasswordResetBody, options?: any): RequestArgs;
    /**
     * Create a new user in the system
     * @summary Create user
     * @param {InlineObject39} [inlineObject39]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUsers(inlineObject39?: InlineObject39, options?: any): RequestArgs;
    /**
     * Updates a user record from their ID.
     * @param {string} userId
     * @param {InlineObject40} [inlineObject40]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserId(userId: string, inlineObject40?: InlineObject40, options?: any): RequestArgs;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Delete a user by their given ID.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersUserId(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * Get a paginated list of users.
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCollection>;
    /**
     * Returns the user associated to the access token.
     * @summary Get the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersCurrent(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>;
    /**
     * Get a user by their given ID.
     * @summary Get user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserId(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>;
    /**
     * Allows the current user to update their password.
     * @summary Reset  password
     * @param {AccountPasswordResetBody} [accountPasswordResetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAccountPassword(accountPasswordResetBody?: AccountPasswordResetBody, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * Create a new user in the system
     * @summary Create user
     * @param {InlineObject39} [inlineObject39]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUsers(inlineObject39?: InlineObject39, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>;
    /**
     * Updates a user record from their ID.
     * @param {string} userId
     * @param {InlineObject40} [inlineObject40]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserId(userId: string, inlineObject40?: InlineObject40, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete a user by their given ID.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUsersUserId(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a paginated list of users.
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): AxiosPromise<UserCollection>;
    /**
     * Returns the user associated to the access token.
     * @summary Get the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersCurrent(options?: any): AxiosPromise<UserResponse>;
    /**
     * Get a user by their given ID.
     * @summary Get user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserId(userId: string, options?: any): AxiosPromise<UserResponse>;
    /**
     * Allows the current user to update their password.
     * @summary Reset  password
     * @param {AccountPasswordResetBody} [accountPasswordResetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAccountPassword(accountPasswordResetBody?: AccountPasswordResetBody, options?: any): AxiosPromise<Message>;
    /**
     * Create a new user in the system
     * @summary Create user
     * @param {InlineObject39} [inlineObject39]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postUsers(inlineObject39?: InlineObject39, options?: any): AxiosPromise<UserResponse>;
    /**
     * Updates a user record from their ID.
     * @param {string} userId
     * @param {InlineObject40} [inlineObject40]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserId(userId: string, inlineObject40?: InlineObject40, options?: any): AxiosPromise<UserResponse>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Delete a user by their given ID.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    deleteUsersUserId(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a paginated list of users.
     * @summary Get users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsers(options?: any): AxiosPromise<UserCollection>;
    /**
     * Returns the user associated to the access token.
     * @summary Get the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersCurrent(options?: any): AxiosPromise<UserResponse>;
    /**
     * Get a user by their given ID.
     * @summary Get user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUsersUserId(userId: string, options?: any): AxiosPromise<UserResponse>;
    /**
     * Allows the current user to update their password.
     * @summary Reset  password
     * @param {AccountPasswordResetBody} [accountPasswordResetBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    postAccountPassword(accountPasswordResetBody?: AccountPasswordResetBody, options?: any): AxiosPromise<Message>;
    /**
     * Create a new user in the system
     * @summary Create user
     * @param {InlineObject39} [inlineObject39]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    postUsers(inlineObject39?: InlineObject39, options?: any): AxiosPromise<UserResponse>;
    /**
     * Updates a user record from their ID.
     * @param {string} userId
     * @param {InlineObject40} [inlineObject40]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    putUsersUserId(userId: string, inlineObject40?: InlineObject40, options?: any): AxiosPromise<UserResponse>;
}
/**
 * VersioningApi - axios parameter creator
 * @export
 */
export declare const VersioningApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Restores a model version
     * @summary Restore model
     * @param {string} modelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postVersionsModelIdRestore(modelId: string, options?: any): RequestArgs;
};
/**
 * VersioningApi - functional programming interface
 * @export
 */
export declare const VersioningApiFp: (configuration?: Configuration) => {
    /**
     * Restores a model version
     * @summary Restore model
     * @param {string} modelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postVersionsModelIdRestore(modelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>;
};
/**
 * VersioningApi - factory interface
 * @export
 */
export declare const VersioningApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Restores a model version
     * @summary Restore model
     * @param {string} modelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postVersionsModelIdRestore(modelId: string, options?: any): AxiosPromise<object>;
};
/**
 * VersioningApi - object-oriented interface
 * @export
 * @class VersioningApi
 * @extends {BaseAPI}
 */
export declare class VersioningApi extends BaseAPI {
    /**
     * Restores a model version
     * @summary Restore model
     * @param {string} modelId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersioningApi
     */
    postVersionsModelIdRestore(modelId: string, options?: any): AxiosPromise<object>;
}

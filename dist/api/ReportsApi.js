/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse4229 from '../model/InlineResponse4229';
/**
* Reports service.
* @module api/ReportsApi
* @version 0.9.0
*/

export default class ReportsApi {
  /**
  * Constructs a new ReportsApi. 
  * @alias module:api/ReportsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }
  /**
   * Get best selling products
   * Gets best selling products grouped by month.
   * @param {Object} opts Optional parameters
   * @param {String} opts.from The from date
   * @param {String} opts.to The to date
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2004} and HTTP response
   */


  getProductsBestSellersWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'from': opts['from'],
      'to': opts['to']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['auth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse2004;
    return this.apiClient.callApi('/reports/products/best-sellers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get best selling products
   * Gets best selling products grouped by month.
   * @param {Object} opts Optional parameters
   * @param {String} opts.from The from date
   * @param {String} opts.to The to date
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2004}
   */


  getProductsBestSellers(opts) {
    return this.getProductsBestSellersWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get metric data
   * Returns metric (KPI) data for either sales or orders.
   * @param {module:model/String} subject 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2005} and HTTP response
   */


  getReportsMetricsSubjectWithHttpInfo(subject) {
    let postBody = null; // verify the required parameter 'subject' is set

    if (subject === undefined || subject === null) {
      throw new Error("Missing the required parameter 'subject' when calling getReportsMetricsSubject");
    }

    let pathParams = {
      'subject': subject
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['auth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse2005;
    return this.apiClient.callApi('/reports/metrics/{subject}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get metric data
   * Returns metric (KPI) data for either sales or orders.
   * @param {module:model/String} subject 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2005}
   */


  getReportsMetricsSubject(subject) {
    return this.getReportsMetricsSubjectWithHttpInfo(subject).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get sales report
   * Returns a report for orders between a given date range
   * @param {Object} opts Optional parameters
   * @param {String} opts.from The from date
   * @param {String} opts.to The to date
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2001>} and HTTP response
   */


  getReportsOrdersWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'from': opts['from'],
      'to': opts['to']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['auth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [InlineResponse2001];
    return this.apiClient.callApi('/reports/orders', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get sales report
   * Returns a report for orders between a given date range
   * @param {Object} opts Optional parameters
   * @param {String} opts.from The from date
   * @param {String} opts.to The to date
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2001>}
   */


  getReportsOrders(opts) {
    return this.getReportsOrdersWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get order averages
   * Returns an array of order averages between a given date range.
   * @param {Object} opts Optional parameters
   * @param {String} opts.from The from date
   * @param {String} opts.to The to date
   * @param {module:model/String} opts.mode 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/InlineResponse2003>} and HTTP response
   */


  getReportsOrdersAveragesWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'from': opts['from'],
      'to': opts['to'],
      'mode': opts['mode']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['auth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [InlineResponse2003];
    return this.apiClient.callApi('/reports/orders/averages', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get order averages
   * Returns an array of order averages between a given date range.
   * @param {Object} opts Optional parameters
   * @param {String} opts.from The from date
   * @param {String} opts.to The to date
   * @param {module:model/String} opts.mode 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/InlineResponse2003>}
   */


  getReportsOrdersAverages(opts) {
    return this.getReportsOrdersAveragesWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get Customer Report
   * Returns a monthly grouped list of new/returning and total customers.
   * @param {Object} opts Optional parameters
   * @param {String} opts.from The from date
   * @param {String} opts.to The to date
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2002} and HTTP response
   */


  getReportsOrdersCustomersWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'from': opts['from'],
      'to': opts['to']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['auth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse2002;
    return this.apiClient.callApi('/reports/orders/customers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get Customer Report
   * Returns a monthly grouped list of new/returning and total customers.
   * @param {Object} opts Optional parameters
   * @param {String} opts.from The from date
   * @param {String} opts.to The to date
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2002}
   */


  getReportsOrdersCustomers(opts) {
    return this.getReportsOrdersCustomersWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
  /**
   * Get sales report
   * This endpoints returns sales report figures.  > Currently this provides data suitable for chartjs.org but this is subject to change and be more decoupled in a future release.
   * @param {String} from The from date
   * @param {Object} opts Optional parameters
   * @param {String} opts.to The to date
   * @param {module:model/String} opts.mode The dataset mode
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
   */


  getReportsSalesWithHttpInfo(from, opts) {
    opts = opts || {};
    let postBody = null; // verify the required parameter 'from' is set

    if (from === undefined || from === null) {
      throw new Error("Missing the required parameter 'from' when calling getReportsSales");
    }

    let pathParams = {};
    let queryParams = {
      'from': from,
      'to': opts['to'],
      'mode': opts['mode']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['auth'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = InlineResponse200;
    return this.apiClient.callApi('/reports/sales', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }
  /**
   * Get sales report
   * This endpoints returns sales report figures.  > Currently this provides data suitable for chartjs.org but this is subject to change and be more decoupled in a future release.
   * @param {String} from The from date
   * @param {Object} opts Optional parameters
   * @param {String} opts.to The to date
   * @param {module:model/String} opts.mode The dataset mode
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
   */


  getReportsSales(from, opts) {
    return this.getReportsSalesWithHttpInfo(from, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

}
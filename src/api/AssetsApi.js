/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssetDetachBody from '../model/AssetDetachBody';
import AssetResponse from '../model/AssetResponse';
import AssetSimple from '../model/AssetSimple';
import UpdateAssetBody from '../model/UpdateAssetBody';

/**
* Assets service.
* @module api/AssetsApi
* @version 0.9.0
*/
export default class AssetsApi {

    /**
    * Constructs a new AssetsApi. 
    * @alias module:api/AssetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Asset
     * Upload an asset to a model
     * @param {Object} opts Optional parameters
     * @param {String} opts.mimeType Required when passing url
     * @param {String} opts.url External URL to file to upload, required without file
     * @param {Object} opts.file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetResponse} and HTTP response
     */
    postAssetsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'mime_type': opts['mimeType'],
        'url': opts['url'],
        'file': opts['file']
      };

      let authNames = ['auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Asset
     * Upload an asset to a model
     * @param {Object} opts Optional parameters
     * @param {String} opts.mimeType Required when passing url
     * @param {String} opts.url External URL to file to upload, required without file
     * @param {Object} opts.file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetResponse}
     */
    postAssets(opts) {
      return this.postAssetsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Detach an asset from it's model
     * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
     * @param {String} assetId The hashed asset id
     * @param {String} ownerId The hashed owner id
     * @param {Object} opts Optional parameters
     * @param {module:model/AssetDetachBody} opts.assetDetachBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    postAssetsAssetIdDetachOwnerIdWithHttpInfo(assetId, ownerId, opts) {
      opts = opts || {};
      let postBody = opts['assetDetachBody'];
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling postAssetsAssetIdDetachOwnerId");
      }
      // verify the required parameter 'ownerId' is set
      if (ownerId === undefined || ownerId === null) {
        throw new Error("Missing the required parameter 'ownerId' when calling postAssetsAssetIdDetachOwnerId");
      }

      let pathParams = {
        'assetId': assetId,
        'ownerId': ownerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assets/{assetId}/detach/{ownerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Detach an asset from it's model
     * Detaches any assets from a given model. Useful if you want to remove certain assets from a product (or another model) without deleting the asset itself.
     * @param {String} assetId The hashed asset id
     * @param {String} ownerId The hashed owner id
     * @param {Object} opts Optional parameters
     * @param {module:model/AssetDetachBody} opts.assetDetachBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    postAssetsAssetIdDetachOwnerId(assetId, ownerId, opts) {
      return this.postAssetsAssetIdDetachOwnerIdWithHttpInfo(assetId, ownerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Simple asset upload
     * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
     * @param {Object} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetSimple} and HTTP response
     */
    postAssetsSimpleWithHttpInfo(file) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling postAssetsSimple");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AssetSimple;
      return this.apiClient.callApi(
        '/assets/simple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Simple asset upload
     * This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
     * @param {Object} file 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetSimple}
     */
    postAssetsSimple(file) {
      return this.postAssetsSimpleWithHttpInfo(file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Assets
     * Update all assets in the given array of ids.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAssetBody} opts.updateAssetBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AssetResponse} and HTTP response
     */
    putAssetsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['updateAssetBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/assets', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Assets
     * Update all assets in the given array of ids.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAssetBody} opts.updateAssetBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AssetResponse}
     */
    putAssets(opts) {
      return this.putAssetsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

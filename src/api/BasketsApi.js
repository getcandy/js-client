/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddBasketMetaBody from '../model/AddBasketMetaBody';
import Basket from '../model/Basket';
import BasketCollection from '../model/BasketCollection';
import BasketLineUpdateBody from '../model/BasketLineUpdateBody';
import BasketResponse from '../model/BasketResponse';
import CreateBasketBody from '../model/CreateBasketBody';
import CreateBasketLinesBody from '../model/CreateBasketLinesBody';
import Error from '../model/Error';
import InlineResponse2007 from '../model/InlineResponse2007';
import ResolveBasketBody from '../model/ResolveBasketBody';
import SaveBasketBody from '../model/SaveBasketBody';
import SavedBasketCollection from '../model/SavedBasketCollection';
import SavedBasketResponse from '../model/SavedBasketResponse';
import Unauthenticated from '../model/Unauthenticated';

/**
* Baskets service.
* @module api/BasketsApi
* @version 0.9.0
*/
export default class BasketsApi {

    /**
    * Constructs a new BasketsApi. 
    * @alias module:api/BasketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete basket lines
     * Removes basket lines from a basket
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    deleteBasketLinesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/basket-lines', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete basket lines
     * Removes basket lines from a basket
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    deleteBasketLines() {
      return this.deleteBasketLinesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a basket by ID
     * Deletes a basket
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBasketsBasketIdWithHttpInfo(basketId) {
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsBasketId");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/baskets/{basketId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a basket by ID
     * Deletes a basket
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBasketsBasketId(basketId) {
      return this.deleteBasketsBasketIdWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove discount
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one. 
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBasketsBasketIdDiscountsWithHttpInfo(basketId) {
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsBasketIdDiscounts");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/baskets/{basketId}/discounts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove discount
     * Allows a user/guest to remove a basket from their basket. Useful if you can only have one discount at a time and they wish to use a different one. 
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBasketsBasketIdDiscounts(basketId) {
      return this.deleteBasketsBasketIdDiscountsWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user
     * Removes a user from a basket and turns it into a guest basket  > This endpoint will be deprecated in 0.3.0
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2007} and HTTP response
     */
    deleteBasketsBasketIdUserWithHttpInfo(basketId) {
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling deleteBasketsBasketIdUser");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/baskets/{basketId}/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove user
     * Removes a user from a basket and turns it into a guest basket  > This endpoint will be deprecated in 0.3.0
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2007}
     */
    deleteBasketsBasketIdUser(basketId) {
      return this.deleteBasketsBasketIdUserWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get baskets
     * Get a paginated list of baskets
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketCollection} and HTTP response
     */
    getBasketsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketCollection;
      return this.apiClient.callApi(
        '/baskets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get baskets
     * Get a paginated list of baskets
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketCollection}
     */
    getBaskets() {
      return this.getBasketsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get basket
     * Get a basket by it's ID
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    getBasketsBasketIdWithHttpInfo(basketId) {
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling getBasketsBasketId");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/baskets/{basketId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get basket
     * Get a basket by it's ID
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    getBasketsBasketId(basketId) {
      return this.getBasketsBasketIdWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the current basket for a user
     * This request will get the current active basket for a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    getBasketsCurrentWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/baskets/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the current basket for a user
     * This request will get the current active basket for a user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    getBasketsCurrent() {
      return this.getBasketsCurrentWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a users saved baskets
     * Returns an authenticatd users saved baskets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SavedBasketCollection} and HTTP response
     */
    getBasketsSavedWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SavedBasketCollection;
      return this.apiClient.callApi(
        '/baskets/saved', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a users saved baskets
     * Returns an authenticatd users saved baskets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SavedBasketCollection}
     */
    getBasketsSaved() {
      return this.getBasketsSavedWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create basket lines
     * Add lines to a basket
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBasketLinesBody} opts.createBasketLinesBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    postBasketLinesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createBasketLinesBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/basket-lines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create basket lines
     * Add lines to a basket
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBasketLinesBody} opts.createBasketLinesBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    postBasketLines(opts) {
      return this.postBasketLinesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBasketBody} opts.createBasketBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    postBasketsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createBasketBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/baskets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBasketBody} opts.createBasketBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    postBaskets(opts) {
      return this.postBasketsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Allow a user to claim a basket
     * A user is able to \"claim\" a guest basket. 
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    postBasketsBasketIdClaimWithHttpInfo(basketId) {
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsBasketIdClaim");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/baskets/{basketId}/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Allow a user to claim a basket
     * A user is able to \"claim\" a guest basket. 
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    postBasketsBasketIdClaim(basketId) {
      return this.postBasketsBasketIdClaimWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add meta information
     * Allows you to add custom meta information to a basket.
     * @param {String} basketId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AddBasketMetaBody} opts.addBasketMetaBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Basket} and HTTP response
     */
    postBasketsBasketIdMetaWithHttpInfo(basketId, opts) {
      opts = opts || {};
      let postBody = opts['addBasketMetaBody'];
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsBasketIdMeta");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Basket;
      return this.apiClient.callApi(
        '/baskets/{basketId}/meta', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add meta information
     * Allows you to add custom meta information to a basket.
     * @param {String} basketId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AddBasketMetaBody} opts.addBasketMetaBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Basket}
     */
    postBasketsBasketIdMeta(basketId, opts) {
      return this.postBasketsBasketIdMetaWithHttpInfo(basketId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Save a basket for a user
     * Saves a basket to a users account.
     * @param {String} basketId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveBasketBody} opts.saveBasketBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    postBasketsBasketIdSaveWithHttpInfo(basketId, opts) {
      opts = opts || {};
      let postBody = opts['saveBasketBody'];
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling postBasketsBasketIdSave");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/baskets/{basketId}/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Save a basket for a user
     * Saves a basket to a users account.
     * @param {String} basketId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveBasketBody} opts.saveBasketBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    postBasketsBasketIdSave(basketId, opts) {
      return this.postBasketsBasketIdSaveWithHttpInfo(basketId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resolve a basket
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @param {Object} opts Optional parameters
     * @param {module:model/ResolveBasketBody} opts.resolveBasketBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    postBasketsResolveWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['resolveBasketBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/baskets/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Resolve a basket
     * This endpoint is for when you want to either merge a users basket with a guest basket and then assign that new basket or associate a user to a guest basket.  If you choose not to merge a basket, their current one will be overwritten with the guest basket.
     * @param {Object} opts Optional parameters
     * @param {module:model/ResolveBasketBody} opts.resolveBasketBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    postBasketsResolve(opts) {
      return this.postBasketsResolveWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update basket line
     * Update a basket line based on it's ID.
     * @param {String} basketLineId 
     * @param {Object} opts Optional parameters
     * @param {module:model/BasketLineUpdateBody} opts.basketLineUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    putBasketLinesBasketLineIdWithHttpInfo(basketLineId, opts) {
      opts = opts || {};
      let postBody = opts['basketLineUpdateBody'];
      // verify the required parameter 'basketLineId' is set
      if (basketLineId === undefined || basketLineId === null) {
        throw new Error("Missing the required parameter 'basketLineId' when calling putBasketLinesBasketLineId");
      }

      let pathParams = {
        'basketLineId': basketLineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/basket-lines/{basketLineId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update basket line
     * Update a basket line based on it's ID.
     * @param {String} basketLineId 
     * @param {Object} opts Optional parameters
     * @param {module:model/BasketLineUpdateBody} opts.basketLineUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    putBasketLinesBasketLineId(basketLineId, opts) {
      return this.putBasketLinesBasketLineIdWithHttpInfo(basketLineId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update basket line quantity
     * Update basket line quantity
     * @param {String} basketLineId 
     * @param {Object} opts Optional parameters
     * @param {module:model/BasketLineUpdateBody} opts.basketLineUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    putBasketLinesBasketLineIdAddWithHttpInfo(basketLineId, opts) {
      opts = opts || {};
      let postBody = opts['basketLineUpdateBody'];
      // verify the required parameter 'basketLineId' is set
      if (basketLineId === undefined || basketLineId === null) {
        throw new Error("Missing the required parameter 'basketLineId' when calling putBasketLinesBasketLineIdAdd");
      }

      let pathParams = {
        'basketLineId': basketLineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/basket-lines/{basketLineId}/add', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update basket line quantity
     * Update basket line quantity
     * @param {String} basketLineId 
     * @param {Object} opts Optional parameters
     * @param {module:model/BasketLineUpdateBody} opts.basketLineUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    putBasketLinesBasketLineIdAdd(basketLineId, opts) {
      return this.putBasketLinesBasketLineIdAddWithHttpInfo(basketLineId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove basket line quantity
     * Removes quantity from a basket line
     * @param {String} basketLineId 
     * @param {Object} opts Optional parameters
     * @param {module:model/BasketLineUpdateBody} opts.basketLineUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    putBasketLinesBasketLineIdRemoveWithHttpInfo(basketLineId, opts) {
      opts = opts || {};
      let postBody = opts['basketLineUpdateBody'];
      // verify the required parameter 'basketLineId' is set
      if (basketLineId === undefined || basketLineId === null) {
        throw new Error("Missing the required parameter 'basketLineId' when calling putBasketLinesBasketLineIdRemove");
      }

      let pathParams = {
        'basketLineId': basketLineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/basket-lines/{basketLineId}/remove', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove basket line quantity
     * Removes quantity from a basket line
     * @param {String} basketLineId 
     * @param {Object} opts Optional parameters
     * @param {module:model/BasketLineUpdateBody} opts.basketLineUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    putBasketLinesBasketLineIdRemove(basketLineId, opts) {
      return this.putBasketLinesBasketLineIdRemoveWithHttpInfo(basketLineId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a basket by ID
     * Updates a basket
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BasketResponse} and HTTP response
     */
    putBasketsBasketIdWithHttpInfo(basketId) {
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling putBasketsBasketId");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/baskets/{basketId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a basket by ID
     * Updates a basket
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BasketResponse}
     */
    putBasketsBasketId(basketId) {
      return this.putBasketsBasketIdWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add user
     * Attach a user to a basket.  > This endpoint will be deprecated in version 0.3.0
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Basket} and HTTP response
     */
    putBasketsBasketIdUserWithHttpInfo(basketId) {
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling putBasketsBasketIdUser");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Basket;
      return this.apiClient.callApi(
        '/baskets/{basketId}/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add user
     * Attach a user to a basket.  > This endpoint will be deprecated in version 0.3.0
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Basket}
     */
    putBasketsBasketIdUser(basketId) {
      return this.putBasketsBasketIdUserWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a saved basket
     * Updates a saved basket on the API
     * @param {String} basketId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveBasketBody} opts.saveBasketBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SavedBasketResponse} and HTTP response
     */
    putBasketsSavedBasketIdWithHttpInfo(basketId, opts) {
      opts = opts || {};
      let postBody = opts['saveBasketBody'];
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling putBasketsSavedBasketId");
      }

      let pathParams = {
        'basketId': basketId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SavedBasketResponse;
      return this.apiClient.callApi(
        '/baskets/saved/{basketId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a saved basket
     * Updates a saved basket on the API
     * @param {String} basketId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveBasketBody} opts.saveBasketBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SavedBasketResponse}
     */
    putBasketsSavedBasketId(basketId, opts) {
      return this.putBasketsSavedBasketIdWithHttpInfo(basketId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

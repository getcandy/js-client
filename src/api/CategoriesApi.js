/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttachCategoryChannelsBody from '../model/AttachCategoryChannelsBody';
import AttachCategoryCustomerGroupsBody from '../model/AttachCategoryCustomerGroupsBody';
import AttachCategoryProductsBody from '../model/AttachCategoryProductsBody';
import AttachCategoryRoutesBody from '../model/AttachCategoryRoutesBody';
import CategoryAttachLayoutBody from '../model/CategoryAttachLayoutBody';
import CategoryCollection from '../model/CategoryCollection';
import CategoryResponse from '../model/CategoryResponse';
import CreateCategoryBody from '../model/CreateCategoryBody';
import Error from '../model/Error';
import InlineResponse4041 from '../model/InlineResponse4041';
import Message from '../model/Message';
import ReorderCategoryBody from '../model/ReorderCategoryBody';
import UpdateAttributesBody from '../model/UpdateAttributesBody';

/**
* Categories service.
* @module api/CategoriesApi
* @version 0.9.0
*/
export default class CategoriesApi {

    /**
    * Constructs a new CategoriesApi. 
    * @alias module:api/CategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Return a paged array of categories
     * Returns a paginated resource of categories
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fullResponse 
     * @param {String} opts.include 
     * @param {Boolean} opts.tree Whether response should be a node tree
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryCollection} and HTTP response
     */
    getCategoriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'full_response': opts['fullResponse'],
        'include': opts['include'],
        'tree': opts['tree']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryCollection;
      return this.apiClient.callApi(
        '/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return a paged array of categories
     * Returns a paginated resource of categories
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fullResponse 
     * @param {String} opts.include 
     * @param {Boolean} opts.tree Whether response should be a node tree
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryCollection}
     */
    getCategories(opts) {
      return this.getCategoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return a single category
     * Returns a single category from a given ID
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    getCategoriesCategoryIdWithHttpInfo(categoryId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoriesCategoryId");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
        'includes': opts['includes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/categories/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Return a single category
     * Returns a single category from a given ID
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    getCategoriesCategoryId(categoryId, opts) {
      return this.getCategoriesCategoryIdWithHttpInfo(categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get categories by parent id
     * Returns categories by a given parent ID.
     * @param {String} parentId If omitted will return top level catgories
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryCollection} and HTTP response
     */
    getCategoriesParentParentIdWithHttpInfo(parentId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parentId' is set
      if (parentId === undefined || parentId === null) {
        throw new Error("Missing the required parameter 'parentId' when calling getCategoriesParentParentId");
      }

      let pathParams = {
        'parentId': parentId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryCollection;
      return this.apiClient.callApi(
        '/categories/parent/{parentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get categories by parent id
     * Returns categories by a given parent ID.
     * @param {String} parentId If omitted will return top level catgories
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryCollection}
     */
    getCategoriesParentParentId(parentId, opts) {
      return this.getCategoriesParentParentIdWithHttpInfo(parentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new category
     * Creates a new category and returns it's resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCategoryBody} opts.createCategoryBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    postCategoriesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createCategoryBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new category
     * Creates a new category and returns it's resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCategoryBody} opts.createCategoryBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    postCategories(opts) {
      return this.postCategoriesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Attach channels to a category
     * Attaches channels to a catagory
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachCategoryChannelsBody} opts.attachCategoryChannelsBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    postCategoriesCategoryIdChannelsWithHttpInfo(categoryId, opts) {
      opts = opts || {};
      let postBody = opts['attachCategoryChannelsBody'];
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling postCategoriesCategoryIdChannels");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/categories/{categoryId}/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Attach channels to a category
     * Attaches channels to a catagory
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachCategoryChannelsBody} opts.attachCategoryChannelsBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    postCategoriesCategoryIdChannels(categoryId, opts) {
      return this.postCategoriesCategoryIdChannelsWithHttpInfo(categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Attach customer groups to a category
     * Attaches customer groups to a category resource.
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachCategoryCustomerGroupsBody} opts.attachCategoryCustomerGroupsBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    postCategoriesCategoryIdCustomerGroupsWithHttpInfo(categoryId, opts) {
      opts = opts || {};
      let postBody = opts['attachCategoryCustomerGroupsBody'];
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling postCategoriesCategoryIdCustomerGroups");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/categories/{categoryId}/customer-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Attach customer groups to a category
     * Attaches customer groups to a category resource.
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachCategoryCustomerGroupsBody} opts.attachCategoryCustomerGroupsBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    postCategoriesCategoryIdCustomerGroups(categoryId, opts) {
      return this.postCategoriesCategoryIdCustomerGroupsWithHttpInfo(categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a category layout
     * Attaches layouts to a category resource
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryAttachLayoutBody} opts.categoryAttachLayoutBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    postCategoriesCategoryLayoutsWithHttpInfo(categoryId, opts) {
      opts = opts || {};
      let postBody = opts['categoryAttachLayoutBody'];
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling postCategoriesCategoryLayouts");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/categories/{categoryId}/layouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a category layout
     * Attaches layouts to a category resource
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CategoryAttachLayoutBody} opts.categoryAttachLayoutBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    postCategoriesCategoryLayouts(categoryId, opts) {
      return this.postCategoriesCategoryLayoutsWithHttpInfo(categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a category's routes
     * Attaches routes to a category resource.
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachCategoryRoutesBody} opts.attachCategoryRoutesBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    postCategoriesCategoryRoutesWithHttpInfo(categoryId, opts) {
      opts = opts || {};
      let postBody = opts['attachCategoryRoutesBody'];
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling postCategoriesCategoryRoutes");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/categories/{categoryId}/routes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a category's routes
     * Attaches routes to a category resource.
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachCategoryRoutesBody} opts.attachCategoryRoutesBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    postCategoriesCategoryRoutes(categoryId, opts) {
      return this.postCategoriesCategoryRoutesWithHttpInfo(categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reorder a category
     * @param {Object} opts Optional parameters
     * @param {module:model/ReorderCategoryBody} opts.reorderCategoryBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Message} and HTTP response
     */
    postCategoriesReorderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['reorderCategoryBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/categories/reorder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reorder a category
     * @param {Object} opts Optional parameters
     * @param {module:model/ReorderCategoryBody} opts.reorderCategoryBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Message}
     */
    postCategoriesReorder(opts) {
      return this.postCategoriesReorderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a category
     * Update a category using a given ID.
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAttributesBody} opts.updateAttributesBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    putCategoriesCategoryIdWithHttpInfo(categoryId, opts) {
      opts = opts || {};
      let postBody = opts['updateAttributesBody'];
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putCategoriesCategoryId");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/categories/{categoryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a category
     * Update a category using a given ID.
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAttributesBody} opts.updateAttributesBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    putCategoriesCategoryId(categoryId, opts) {
      return this.putCategoriesCategoryIdWithHttpInfo(categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Attach products
     * Attaches products to a category resource.
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachCategoryProductsBody} opts.attachCategoryProductsBody When using \"custom\" sort type, sorting will be based on the position.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    putCategoriesCategoryIdProductsWithHttpInfo(categoryId, opts) {
      opts = opts || {};
      let postBody = opts['attachCategoryProductsBody'];
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling putCategoriesCategoryIdProducts");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/categories/{categoryId}/products', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Attach products
     * Attaches products to a category resource.
     * @param {String} categoryId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AttachCategoryProductsBody} opts.attachCategoryProductsBody When using \"custom\" sort type, sorting will be based on the position.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    putCategoriesCategoryIdProducts(categoryId, opts) {
      return this.putCategoriesCategoryIdProductsWithHttpInfo(categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

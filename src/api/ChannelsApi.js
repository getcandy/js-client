/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Channel from '../model/Channel';
import ChannelCollection from '../model/ChannelCollection';
import ChannelResponse from '../model/ChannelResponse';
import Error from '../model/Error';
import InlineResponse422 from '../model/InlineResponse422';

/**
* Channels service.
* @module api/ChannelsApi
* @version 0.9.0
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete the channel resource
     * @param {String} channelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteChannelsChannelIdWithHttpInfo(channelId) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteChannelsChannelId");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/channels/{channelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete the channel resource
     * @param {String} channelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteChannelsChannelId(channelId) {
      return this.deleteChannelsChannelIdWithHttpInfo(channelId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all channels
     * Gets a paginated list of all channel
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes Comma separated includes for the resource
     * @param {Number} opts.perPage How many results per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChannelCollection} and HTTP response
     */
    getChannelsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includes': opts['includes'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChannelCollection;
      return this.apiClient.callApi(
        '/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all channels
     * Gets a paginated list of all channel
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes Comma separated includes for the resource
     * @param {Number} opts.perPage How many results per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChannelCollection}
     */
    getChannels(opts) {
      return this.getChannelsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the channel resource
     * @param {String} channelId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChannelResponse} and HTTP response
     */
    getChannelsChannelIdWithHttpInfo(channelId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getChannelsChannelId");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
        'includes': opts['includes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ChannelResponse;
      return this.apiClient.callApi(
        '/channels/{channelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the channel resource
     * @param {String} channelId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChannelResponse}
     */
    getChannelsChannelId(channelId, opts) {
      return this.getChannelsChannelIdWithHttpInfo(channelId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new channel
     * Create a new channel resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.handle 
     * @param {String} opts.name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Channel} and HTTP response
     */
    postChannelsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'handle': opts['handle'],
        'name': opts['name']
      };

      let authNames = ['auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new channel
     * Create a new channel resource
     * @param {Object} opts Optional parameters
     * @param {String} opts.handle 
     * @param {String} opts.name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Channel}
     */
    postChannels(opts) {
      return this.postChannelsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the channel resource
     * @param {String} channelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ChannelResponse} and HTTP response
     */
    putChannelsChannelIdWithHttpInfo(channelId) {
      let postBody = null;
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling putChannelsChannelId");
      }

      let pathParams = {
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ChannelResponse;
      return this.apiClient.callApi(
        '/channels/{channelId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the channel resource
     * @param {String} channelId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ChannelResponse}
     */
    putChannelsChannelId(channelId) {
      return this.putChannelsChannelIdWithHttpInfo(channelId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

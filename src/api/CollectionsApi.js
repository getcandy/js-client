/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryResponse from '../model/CategoryResponse';
import CollectionCollection from '../model/CollectionCollection';
import CollectionResponse from '../model/CollectionResponse';
import Error from '../model/Error';
import InlineObject5 from '../model/InlineObject5';
import InlineObject6 from '../model/InlineObject6';
import InlineObject7 from '../model/InlineObject7';
import InlineObject8 from '../model/InlineObject8';

/**
* Collections service.
* @module api/CollectionsApi
* @version 1.0.0
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete Collection
     * Delete a Collection by its ID
     * @param {String} collectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCollectionsCollectionIdWithHttpInfo(collectionId) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteCollectionsCollectionId");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/collections/{collectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Collection
     * Delete a Collection by its ID
     * @param {String} collectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCollectionsCollectionId(collectionId) {
      return this.deleteCollectionsCollectionIdWithHttpInfo(collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Collections
     * Get a paginated response of collections.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.include 
     * @param {String} opts.perPage  (default to '25')
     * @param {String} opts.fullResponse 
     * @param {String} opts.sort 
     * @param {String} opts.page 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionCollection} and HTTP response
     */
    getCollectionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include'],
        'per_page': opts['perPage'],
        'full_response': opts['fullResponse'],
        'sort': opts['sort'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionCollection;
      return this.apiClient.callApi(
        '/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Collections
     * Get a paginated response of collections.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.include 
     * @param {String} opts.perPage  (default to '25')
     * @param {String} opts.fullResponse 
     * @param {String} opts.sort 
     * @param {String} opts.page 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionCollection}
     */
    getCollections(opts) {
      return this.getCollectionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Single Collection
     * Get a single Collection by its ID
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionResponse} and HTTP response
     */
    getCollectionsCollectionIdWithHttpInfo(collectionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling getCollectionsCollectionId");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionResponse;
      return this.apiClient.callApi(
        '/collections/{collectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Single Collection
     * Get a single Collection by its ID
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionResponse}
     */
    getCollectionsCollectionId(collectionId, opts) {
      return this.getCollectionsCollectionIdWithHttpInfo(collectionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Collection
     * Create a new collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject7} opts.inlineObject7 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionResponse} and HTTP response
     */
    postCollectionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['inlineObject7'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CollectionResponse;
      return this.apiClient.callApi(
        '/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Collection
     * Create a new collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject7} opts.inlineObject7 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionResponse}
     */
    postCollections(opts) {
      return this.postCollectionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a collection's products
     * Syncs products with a collection.
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject6} opts.inlineObject6 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    postCollectionsCollectionIdProductsWithHttpInfo(collectionId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject6'];
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling postCollectionsCollectionIdProducts");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/collections/{collectionId}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a collection's products
     * Syncs products with a collection.
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject6} opts.inlineObject6 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    postCollectionsCollectionIdProducts(collectionId, opts) {
      return this.postCollectionsCollectionIdProductsWithHttpInfo(collectionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a collection's routes
     * This request will allow you to attach routes to a collection
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject5} opts.inlineObject5 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CategoryResponse} and HTTP response
     */
    postCollectionsCollectionRoutesWithHttpInfo(collectionId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject5'];
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling postCollectionsCollectionRoutes");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/collections/{collectionId}/routes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a collection's routes
     * This request will allow you to attach routes to a collection
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject5} opts.inlineObject5 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CategoryResponse}
     */
    postCollectionsCollectionRoutes(collectionId, opts) {
      return this.postCollectionsCollectionRoutesWithHttpInfo(collectionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Collection
     * Update a Collection by its ID.
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject8} opts.inlineObject8 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CollectionResponse} and HTTP response
     */
    putCollectionsCollectionIdWithHttpInfo(collectionId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject8'];
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling putCollectionsCollectionId");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CollectionResponse;
      return this.apiClient.callApi(
        '/collections/{collectionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Collection
     * Update a Collection by its ID.
     * @param {String} collectionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject8} opts.inlineObject8 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CollectionResponse}
     */
    putCollectionsCollectionId(collectionId, opts) {
      return this.putCollectionsCollectionIdWithHttpInfo(collectionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InlineObject11 from '../model/InlineObject11';
import InlineResponse4223 from '../model/InlineResponse4223';
import Language from '../model/Language';
import LanguageCollection from '../model/LanguageCollection';
import LanguageResponse from '../model/LanguageResponse';

/**
* Languages service.
* @module api/LanguagesApi
* @version 0.9.0
*/
export default class LanguagesApi {

    /**
    * Constructs a new LanguagesApi. 
    * @alias module:api/LanguagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete Language
     * Delete a Language by its ID
     * @param {String} languageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteLanguagesLanguageIdWithHttpInfo(languageId) {
      let postBody = null;
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling deleteLanguagesLanguageId");
      }

      let pathParams = {
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/languages/{languageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Language
     * Delete a Language by its ID
     * @param {String} languageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteLanguagesLanguageId(languageId) {
      return this.deleteLanguagesLanguageIdWithHttpInfo(languageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Languages
     * Returns a paginated list of Languages
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguageCollection} and HTTP response
     */
    getLanguagesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LanguageCollection;
      return this.apiClient.callApi(
        '/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Languages
     * Returns a paginated list of Languages
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguageCollection}
     */
    getLanguages() {
      return this.getLanguagesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Language
     * Get a Language by ID
     * @param {String} languageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguageResponse} and HTTP response
     */
    getLanguagesLanguageIdWithHttpInfo(languageId) {
      let postBody = null;
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling getLanguagesLanguageId");
      }

      let pathParams = {
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LanguageResponse;
      return this.apiClient.callApi(
        '/languages/{languageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Language
     * Get a Language by ID
     * @param {String} languageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguageResponse}
     */
    getLanguagesLanguageId(languageId) {
      return this.getLanguagesLanguageIdWithHttpInfo(languageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Language
     * Create a new language
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject11} opts.inlineObject11 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguageResponse} and HTTP response
     */
    postLanguagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['inlineObject11'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LanguageResponse;
      return this.apiClient.callApi(
        '/languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Language
     * Create a new language
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject11} opts.inlineObject11 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguageResponse}
     */
    postLanguages(opts) {
      return this.postLanguagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Language
     * Update a Language using it's ID
     * @param {String} languageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguageResponse} and HTTP response
     */
    putLanguagesLanguageIdWithHttpInfo(languageId, opts) {
      opts = opts || {};
      let postBody = opts['language'];
      // verify the required parameter 'languageId' is set
      if (languageId === undefined || languageId === null) {
        throw new Error("Missing the required parameter 'languageId' when calling putLanguagesLanguageId");
      }

      let pathParams = {
        'languageId': languageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LanguageResponse;
      return this.apiClient.callApi(
        '/languages/{languageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Language
     * Update a Language using it's ID
     * @param {String} languageId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} opts.language 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguageResponse}
     */
    putLanguagesLanguageId(languageId, opts) {
      return this.putLanguagesLanguageIdWithHttpInfo(languageId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

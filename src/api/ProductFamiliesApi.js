/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InlineObject28 from '../model/InlineObject28';
import InlineResponse42211 from '../model/InlineResponse42211';
import ProductFamilyCollection from '../model/ProductFamilyCollection';
import ProductFamilyResponse from '../model/ProductFamilyResponse';

/**
* ProductFamilies service.
* @module api/ProductFamiliesApi
* @version 0.9.0
*/
export default class ProductFamiliesApi {

    /**
    * Constructs a new ProductFamiliesApi. 
    * @alias module:api/ProductFamiliesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete product family
     * Sends a request to delete a product family
     * @param {String} productFamilyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductFamiliesProductFamilyIdWithHttpInfo(productFamilyId) {
      let postBody = null;
      // verify the required parameter 'productFamilyId' is set
      if (productFamilyId === undefined || productFamilyId === null) {
        throw new Error("Missing the required parameter 'productFamilyId' when calling deleteProductFamiliesProductFamilyId");
      }

      let pathParams = {
        'productFamilyId': productFamilyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/product-families/{productFamilyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete product family
     * Sends a request to delete a product family
     * @param {String} productFamilyId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductFamiliesProductFamilyId(productFamilyId) {
      return this.deleteProductFamiliesProductFamilyIdWithHttpInfo(productFamilyId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get product families
     * Returns a paginated list of all product families.
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes Define included relationships
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductFamilyCollection} and HTTP response
     */
    getProductFamiliesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includes': opts['includes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductFamilyCollection;
      return this.apiClient.callApi(
        '/product-families', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get product families
     * Returns a paginated list of all product families.
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes Define included relationships
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductFamilyCollection}
     */
    getProductFamilies(opts) {
      return this.getProductFamiliesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a product family
     * Returns a single product family based on ID.
     * @param {String} productFamilyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductFamilyResponse} and HTTP response
     */
    getProductFamiliesProductFamilyIdWithHttpInfo(productFamilyId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productFamilyId' is set
      if (productFamilyId === undefined || productFamilyId === null) {
        throw new Error("Missing the required parameter 'productFamilyId' when calling getProductFamiliesProductFamilyId");
      }

      let pathParams = {
        'productFamilyId': productFamilyId
      };
      let queryParams = {
        'includes': opts['includes']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductFamilyResponse;
      return this.apiClient.callApi(
        '/product-families/{productFamilyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a product family
     * Returns a single product family based on ID.
     * @param {String} productFamilyId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includes 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductFamilyResponse}
     */
    getProductFamiliesProductFamilyId(productFamilyId, opts) {
      return this.getProductFamiliesProductFamilyIdWithHttpInfo(productFamilyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create product family
     * Create a new product family.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductFamilyResponse} and HTTP response
     */
    postProductFamiliesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductFamilyResponse;
      return this.apiClient.callApi(
        '/product-families', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create product family
     * Create a new product family.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductFamilyResponse}
     */
    postProductFamilies() {
      return this.postProductFamiliesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update product family
     * Update a product family
     * @param {String} productFamilyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject28} opts.inlineObject28 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductFamilyResponse} and HTTP response
     */
    putProductFamiliesProductFamilyIdWithHttpInfo(productFamilyId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject28'];
      // verify the required parameter 'productFamilyId' is set
      if (productFamilyId === undefined || productFamilyId === null) {
        throw new Error("Missing the required parameter 'productFamilyId' when calling putProductFamiliesProductFamilyId");
      }

      let pathParams = {
        'productFamilyId': productFamilyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductFamilyResponse;
      return this.apiClient.callApi(
        '/product-families/{productFamilyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update product family
     * Update a product family
     * @param {String} productFamilyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject28} opts.inlineObject28 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductFamilyResponse}
     */
    putProductFamiliesProductFamilyId(productFamilyId, opts) {
      return this.putProductFamiliesProductFamilyIdWithHttpInfo(productFamilyId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

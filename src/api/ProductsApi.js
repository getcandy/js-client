/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InlineObject17 from '../model/InlineObject17';
import InlineObject18 from '../model/InlineObject18';
import InlineObject19 from '../model/InlineObject19';
import InlineObject20 from '../model/InlineObject20';
import InlineObject21 from '../model/InlineObject21';
import InlineObject22 from '../model/InlineObject22';
import InlineObject23 from '../model/InlineObject23';
import InlineObject24 from '../model/InlineObject24';
import InlineObject25 from '../model/InlineObject25';
import InlineObject26 from '../model/InlineObject26';
import InlineResponse42210 from '../model/InlineResponse42210';
import InlineResponse4227 from '../model/InlineResponse4227';
import InlineResponse4228 from '../model/InlineResponse4228';
import ProductCollection from '../model/ProductCollection';
import ProductRecommendationCollection from '../model/ProductRecommendationCollection';
import ProductResponse from '../model/ProductResponse';
import ProductUpdateBody from '../model/ProductUpdateBody';
import Unauthenticated from '../model/Unauthenticated';

/**
* Products service.
* @module api/ProductsApi
* @version 0.9.0
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Detach category
     * Detaches a category from a product. Does not delete the category.
     * @param {String} productId 
     * @param {String} categoryId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsProductCategoriesCategoryWithHttpInfo(productId, categoryId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsProductCategoriesCategory");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteProductsProductCategoriesCategory");
      }

      let pathParams = {
        'productId': productId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{productId}/categories/{categoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Detach category
     * Detaches a category from a product. Does not delete the category.
     * @param {String} productId 
     * @param {String} categoryId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsProductCategoriesCategory(productId, categoryId) {
      return this.deleteProductsProductCategoriesCategoryWithHttpInfo(productId, categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Detach collection
     * Detaches a collection from a product. Does not delete the collection.
     * @param {String} productId 
     * @param {String} collectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsProductCollectionsDetachWithHttpInfo(productId, collectionId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsProductCollectionsDetach");
      }
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteProductsProductCollectionsDetach");
      }

      let pathParams = {
        'productId': productId,
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{productId}/collections/{collectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Detach collection
     * Detaches a collection from a product. Does not delete the collection.
     * @param {String} productId 
     * @param {String} collectionId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsProductCollectionsDetach(productId, collectionId) {
      return this.deleteProductsProductCollectionsDetachWithHttpInfo(productId, collectionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Detach customer groups
     * Detaches customer groups from a product
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsProductCustomerGroupsWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsProductCustomerGroups");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{productId}/customer-groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Detach customer groups
     * Detaches customer groups from a product
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsProductCustomerGroups(productId) {
      return this.deleteProductsProductCustomerGroupsWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Product
     * Deletes a product by it's ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsProductIdWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsProductId");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Product
     * Deletes a product by it's ID  > This will only soft delete the product. It will then be available to restore at a later time.
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsProductId(productId) {
      return this.deleteProductsProductIdWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes product associations
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductsProductIdAssociationsWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductsProductIdAssociations");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{productId}/associations', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes product associations
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductsProductIdAssociations(productId) {
      return this.deleteProductsProductIdAssociationsWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Products
     * Gets a paginated list of products.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @param {Boolean} opts.paginated  (default to true)
     * @param {String} opts.ids Return only the selected IDs
     * @param {Number} opts.limit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductCollection} and HTTP response
     */
    getProductsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include'],
        'paginated': opts['paginated'],
        'ids': opts['ids'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductCollection;
      return this.apiClient.callApi(
        '/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Products
     * Gets a paginated list of products.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @param {Boolean} opts.paginated  (default to true)
     * @param {String} opts.ids Return only the selected IDs
     * @param {Number} opts.limit 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductCollection}
     */
    getProducts(opts) {
      return this.getProductsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Product
     * Returns a product by it's given ID
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @param {String} opts.exclTax Prices shouldn't include tax
     * @param {String} opts.fullResponse Returns full `attribute_data` in response
     * @param {String} opts.optionData Include option data
     * @param {String} opts.draft Show draft if exists
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    getProductsProductIdWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsProductId");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'include': opts['include'],
        'excl_tax': opts['exclTax'],
        'full_response': opts['fullResponse'],
        'option_data': opts['optionData'],
        'draft': opts['draft']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Product
     * Returns a product by it's given ID
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @param {String} opts.exclTax Prices shouldn't include tax
     * @param {String} opts.fullResponse Returns full `attribute_data` in response
     * @param {String} opts.optionData Include option data
     * @param {String} opts.draft Show draft if exists
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    getProductsProductId(productId, opts) {
      return this.getProductsProductIdWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create draft
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    getProductsProductIdDraftsWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductsProductIdDrafts");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/drafts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create draft
     * Create a draft for a product.  If a draft already exists, that current draft will be returned.
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    getProductsProductIdDrafts(productId) {
      return this.getProductsProductIdDraftsWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get recommended products
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductRecommendationCollection} and HTTP response
     */
    getProductsRecommendedWithHttpInfo(basketId) {
      let postBody = null;
      // verify the required parameter 'basketId' is set
      if (basketId === undefined || basketId === null) {
        throw new Error("Missing the required parameter 'basketId' when calling getProductsRecommended");
      }

      let pathParams = {
      };
      let queryParams = {
        'basket_id': basketId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductRecommendationCollection;
      return this.apiClient.callApi(
        '/products/recommended', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get recommended products
     * This endpoint will return recommended products based on a basket.  Using product associations, the API will find products in the basket and display any relations that have been defined.
     * @param {String} basketId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductRecommendationCollection}
     */
    getProductsRecommended(basketId) {
      return this.getProductsRecommendedWithHttpInfo(basketId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Product redirect
     * Creates and syncs a new product route.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject19} opts.inlineObject19 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductRedirectsWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject19'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductRedirects");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/redirects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Product redirect
     * Creates and syncs a new product route.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject19} opts.inlineObject19 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductRedirects(productId, opts) {
      return this.postProductRedirectsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Product route
     * Creates and syncs a new product route.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject18} opts.inlineObject18 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductUrlsWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject18'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductUrls");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/urls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Product route
     * Creates and syncs a new product route.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject18} opts.inlineObject18 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductUrls(productId, opts) {
      return this.postProductUrlsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Product
     * Creates a new product in the system. When creating a new product will also create 1 variant for that product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @param {module:model/InlineObject26} opts.inlineObject26 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['inlineObject26'];

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Product
     * Creates a new product in the system. When creating a new product will also create 1 variant for that product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @param {module:model/InlineObject26} opts.inlineObject26 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProducts(opts) {
      return this.postProductsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Draft
     * Create a draft product from an existing product.
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsIdDraftsWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsIdDrafts");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/drafts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Draft
     * Create a draft product from an existing product.
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsIdDrafts(productId) {
      return this.postProductsIdDraftsWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Publish Draft
     * Publish a draft from a Product
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsIdPublishWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsIdPublish");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Publish Draft
     * Publish a draft from a Product
     * @param {String} productId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsIdPublish(productId) {
      return this.postProductsIdPublishWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update product associations
     * Updates product associations
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject24} opts.inlineObject24 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsProductAssociationsWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject24'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsProductAssociations");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/associations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update product associations
     * Updates product associations
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject24} opts.inlineObject24 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsProductAssociations(productId, opts) {
      return this.postProductsProductAssociationsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Product attributes
     * Allows you to sync up the attributes which are directly associated to this product.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject20} opts.inlineObject20 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsProductAttributesWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject20'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsProductAttributes");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Product attributes
     * Allows you to sync up the attributes which are directly associated to this product.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject20} opts.inlineObject20 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsProductAttributes(productId, opts) {
      return this.postProductsProductAttributesWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Product categories
     * Sync product categories
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject22} opts.inlineObject22 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsProductCategoriesWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject22'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsProductCategories");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Product categories
     * Sync product categories
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject22} opts.inlineObject22 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsProductCategories(productId, opts) {
      return this.postProductsProductCategoriesWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Product channels
     * Sync product Channels
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject23} opts.inlineObject23 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsProductChannelsWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject23'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsProductChannels");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Product channels
     * Sync product Channels
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject23} opts.inlineObject23 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsProductChannels(productId, opts) {
      return this.postProductsProductChannelsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update customer groups
     * Update a products customer groups
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject25} opts.inlineObject25 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsProductCustomerGroupsWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject25'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsProductCustomerGroups");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/customer-groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update customer groups
     * Update a products customer groups
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject25} opts.inlineObject25 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsProductCustomerGroups(productId, opts) {
      return this.postProductsProductCustomerGroupsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Product collections
     * Update a products collections.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject21} opts.inlineObject21 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsProductIdCollectionsWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject21'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsProductIdCollections");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Product collections
     * Update a products collections.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject21} opts.inlineObject21 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsProductIdCollections(productId, opts) {
      return this.postProductsProductIdCollectionsWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Duplicate Product
     * Duplicates a product, requires you to specify new slugs and SKU's.  > Duplicated product will not immediately be active.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject17} opts.inlineObject17 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    postProductsProductIdDuplicateWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject17'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling postProductsProductIdDuplicate");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Duplicate Product
     * Duplicates a product, requires you to specify new slugs and SKU's.  > Duplicated product will not immediately be active.
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject17} opts.inlineObject17 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    postProductsProductIdDuplicate(productId, opts) {
      return this.postProductsProductIdDuplicateWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Product
     * Updates a product by it's ID
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductUpdateBody} opts.productUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProductResponse} and HTTP response
     */
    putProductsProductIdWithHttpInfo(productId, opts) {
      opts = opts || {};
      let postBody = opts['productUpdateBody'];
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling putProductsProductId");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductResponse;
      return this.apiClient.callApi(
        '/products/{productId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Product
     * Updates a product by it's ID
     * @param {String} productId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProductUpdateBody} opts.productUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProductResponse}
     */
    putProductsProductId(productId, opts) {
      return this.putProductsProductIdWithHttpInfo(productId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

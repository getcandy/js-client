/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Links from '../model/Links';
import RouteCollection from '../model/RouteCollection';
import RouteResponse from '../model/RouteResponse';

/**
* Routes service.
* @module api/RoutesApi
* @version 1.0.0
*/
export default class RoutesApi {

    /**
    * Constructs a new RoutesApi. 
    * @alias module:api/RoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get routes
     * Returns paginated list of routes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RouteCollection} and HTTP response
     */
    getRoutesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteCollection;
      return this.apiClient.callApi(
        '/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get routes
     * Returns paginated list of routes.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RouteCollection}
     */
    getRoutes() {
      return this.getRoutesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get route
     * Retrieve a route by it's slug.
     * @param {String} slug 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RouteResponse} and HTTP response
     */
    getRoutesSlugWithHttpInfo(slug, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getRoutesSlug");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RouteResponse;
      return this.apiClient.callApi(
        '/routes/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get route
     * Retrieve a route by it's slug.
     * @param {String} slug 
     * @param {Object} opts Optional parameters
     * @param {String} opts.include 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RouteResponse}
     */
    getRoutesSlug(slug, opts) {
      return this.getRoutesSlugWithHttpInfo(slug, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}

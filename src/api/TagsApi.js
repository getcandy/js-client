/**
 * GetCandy
 * The GetCandy API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@getcandy.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import InlineObject36 from '../model/InlineObject36';
import InlineObject37 from '../model/InlineObject37';
import InlineResponse42211 from '../model/InlineResponse42211';
import TagCollection from '../model/TagCollection';
import TagResponse from '../model/TagResponse';

/**
* Tags service.
* @module api/TagsApi
* @version 0.9.0
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete a tag
     * Deletes a tag by it's ID
     * @param {String} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTagsTagIdWithHttpInfo(tagId) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteTagsTagId");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{tagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a tag
     * Deletes a tag by it's ID
     * @param {String} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTagsTagId(tagId) {
      return this.deleteTagsTagIdWithHttpInfo(tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all tags
     * Get paginated list of tags
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagCollection} and HTTP response
     */
    getTagsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagCollection;
      return this.apiClient.callApi(
        '/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all tags
     * Get paginated list of tags
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagCollection}
     */
    getTags() {
      return this.getTagsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a tag
     * Gets a tag by it's ID
     * @param {String} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagResponse} and HTTP response
     */
    getTagsTagIdWithHttpInfo(tagId) {
      let postBody = null;
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagsTagId");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagResponse;
      return this.apiClient.callApi(
        '/tags/{tagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a tag
     * Gets a tag by it's ID
     * @param {String} tagId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponse}
     */
    getTagsTagId(tagId) {
      return this.getTagsTagIdWithHttpInfo(tagId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new tag
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject36} opts.inlineObject36 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagResponse} and HTTP response
     */
    postTagsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['inlineObject36'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TagResponse;
      return this.apiClient.callApi(
        '/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new tag
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject36} opts.inlineObject36 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponse}
     */
    postTags(opts) {
      return this.postTagsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a tag
     * Updates a tag by it's ID
     * @param {String} tagId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject37} opts.inlineObject37 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TagResponse} and HTTP response
     */
    putTagsTagIdWithHttpInfo(tagId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject37'];
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling putTagsTagId");
      }

      let pathParams = {
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TagResponse;
      return this.apiClient.callApi(
        '/tags/{tagId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a tag
     * Updates a tag by it's ID
     * @param {String} tagId 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject37} opts.inlineObject37 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TagResponse}
     */
    putTagsTagId(tagId, opts) {
      return this.putTagsTagIdWithHttpInfo(tagId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
